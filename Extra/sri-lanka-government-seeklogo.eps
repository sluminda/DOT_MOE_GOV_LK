%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Govrnment Logo-Colour.eps
%%Creator: Adobe Illustrator(R) 12
%%AI8_CreatorVersion: 12.0.0%AI9_PrintingDataBegin%%For: Athrri
%%CreationDate: 6/12/2007
%%BoundingBox: 0 0 438 628
%%HiResBoundingBox: 0 0 437.4053 627.3716
%%CropBox: 0 0 437.4053 627.3716
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%+ procset Adobe_CoolType_Core 2.23 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_BuildNumber: Adobe Illustrator(R) 12.0.0 x198 R agm 4.3861 ct 5.530
%ADO_ContainsXMP: MainFirst
%AI7_Thumbnail: 92 128 8
%%BeginData: 21472 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD28FFA95353292F292F295454A9FD4FFF7E2F0629282906290729
%062928537EFD4BFFA9FD04292829292F282F2929282F29292FFD49FF7E06
%2906290652527D7DA77D7D52520629062906A8FD46FF7E2929292F527DA1
%845354535A53A8A77D5229292F297EFD44FF7E0629282952A8532F287C9F
%A59F7C282F53A85229062906A8FD43FF2929292F7DA8297C522F527D527D
%522F527629A87C2F292929FD42FF2F29062952A828A59F29062906292829
%0629A59F06A85229062953FD40FF7E2F292952A829C79F2F292F297DC67D
%292F292FA5A629A85229292FA8FD3FFF532829287D297C9F29067D282952
%C65229287D2929A47C537D2829287EFD3FFF2929287D7E532E2F297CA47D
%292F522F297DA47D292F52537E5328292FFD3EFF7E2906297C5428290629
%287C5229072906297C7C28290629287E7C290629A8FD3DFF7E292928A853
%A0292F2929292F53A87D842F2FFD0529A053A7282F29A8FD3DFF53292853
%7D53A42F287D282929A77BA47B7E072928530753A4537D5306297EFD3DFF
%7E282952A852CC2953A4FE2E547CFEC6C67C5452FEA42F29C653A8522928
%7EFD3DFF532906537D53A42F287C2829297D7AFE7B7D0629527C0653A453
%7D53062953FD3DFFA8292F52A853A6FD062953A77CA753FD04292F53A653
%A8282929A9FD3DFF5329062F7D5328290729287C52292953292952532829
%0629525A7C29062953FD3AFFA854292F2929287D7E532E2929A6A47D292F
%282929A0A47D29292E537E53282F292929547EFD35FF7E29292829062906
%2952A8299F7B29287C062952C62829287C06297B7C297D52290629062906
%29297EA8FD30FF7E53292F2929295354A9A9A7527E28FE7C29292F29A0A4
%7D292F29297CFE29A851A7A8A95453FD042928537EFD2DFFA82929282906
%292F7EA8A8FD047C765A28C67C290629072F062907297BC6287E52A77C7C
%7CA7A8A82F292829062929A8FD2AFF7E2929072929547ECF7D7C7CA7A8FF
%FF7D7C7E287C2F2F2E532953282F527C297E527DFFFFA8A77C7C7CA8A87E
%FD052954A9FD26FF7E2F0629062929A9A87C51A1A7FD06FF7D527E292F28
%9FA4C6A47C2853297E527DFD06FFA8A77B7C7DA95329062928297EFD24FF
%7E2F292F29537EFF7C7C7DFFFFFFA8FD06FFA852A77E7EFD05537E7E7D52
%A8FD06FFA8FFFFFFA77C7CA87E54292F292F53FD22FF53290629067EA8A7
%51A7FFFF7CA77B7CA8FD07FF7D7D7CA77D7E7DA77C7D7DFD07FFA87C7BA7
%7CFFFFA7757CA87E072906292FFD20FF2F29072929A8A87C7CCFA8A8A7A5
%517DFD0AFFA7A7527C517C7CA7A7FD09FFA87C51A5A7A8FFFF7C7CA7A929
%29072929A9FD1CFFA92929062929FF7D7C7CFFA8A67B7C7B7C7DFD05FFA8
%A77CA69FA49EA5A4A59EA59EA47BA67CA7A7FD05FF7D7C7B7C7BA7A8FFA7
%7C7CFF5329062929A8FD1BFF292F292953FF7C7CA8FF7C7C7CFE7B7DA8FF
%FFFFA8A8A6A59EA57C7C5253525328535253527C7CA59EA5A6A7A8FFFFFF
%A87C9FFE7C7CA0FFA8A17CFF54FD0429A9FD19FF2929062953FF757C7DA7
%7DC69F7C52A7CFFFFFA87CA57AA6525328290629062F292F292F07290629
%285352A09EA57CA8A8FFA8A7527C9EC67DA7A8A775A87E29282906A9FD17
%FFFD042954FF7CA7A8A69F7D7BA67CA8FFFFA8A79EA57C5306292953537D
%5253527D527D5253527D53532929065376A59EA6A8FFFFA7A0A67B7DA5A7
%FFA77BA87E2F292929A9FD15FF2F29062953A8517DFFA89EA67B7C7DFFFF
%FF7CA59E7C28292953FD0452517C7B5126A551277B7C5152275252532829
%28527AA47CA8FFFF7D7B7BA59FA8FFA751A77E29062928FD14FF53292929
%54FF7BA7FFA77DA67BA57CFFFFA87BA47C532953535927527BC7A4FEFEFE
%A47CFEA0A5FEFEFEA4C79F7627525353072F76A49FA8FFFF7BA59FA67DA7
%FFA875CA7E29292953FD12FF7E2907292FFF75A7FFA8A47C7B7C7DFFFFA7
%9EA52829295327527B527BFEC6C6A47C7BC67BC69FA5517CA4C6A4FE9F51
%7B5227522829287C9EA7A8FF7C7C7BA0A4A8FFA751A85329062953FD10FF
%A92F292929FF7CA7FFA8A1C77CA67CFFA8A6A47C29295352527C51FEA5A5
%A4525152517CA57CA4A59F5251522752A5A67BFE517C52525253297CA4A6
%A8FF7CA6A0C67DA8FFA77BFF532929297EFD0FFF53282906A97C7CA8A77B
%7C7B7D7DFFA8A09E52065352527BFEC6A57BFE9F7C51A59FFEA4A57BA57B
%A6A4FE9EA5519F7BA59FA5C6FE7B52275306527AA584FF7D7C7B7C7BA8FF
%7C75FF2929062FA9FD0DFF7E292F297EA77CA8FFA6C77CA67CFFA8A6A453
%297D527CA4FEC6A6A4A0A4A59FC7C6FEA4C7A57CA5C7A5A5A4CCC6C7A5A6
%C6A6A5A0C6FEA47C527D2953A5A5A8FF7CA67CC6A7FFA87C7DA9292F297E
%FD0DFF28292853A87CA7A77CA6A47DA8FFA87B9E53075327A0C6FEA45227
%9F9FA6A4A57BA5A4A59FC77BA5A4A59FA5A4A5A5A57BC7A5A02752A4FEC6
%A55153282F7BA57DFFA87CA4A77CA7A87CA754282906A8FD0BFF5329292F
%A8A07CFFA5A67CFE7BFFA8A6A453077D2752FEFE7B5151FEA5C77BC7A5A5
%A5C7A4C69E7C7BA59FC7A4A5A4C77BC79FA5A5FE75517CC7FE7C277D2953
%9FA5A8A87BC676A5A6FFA17CA92F282953FD0AFFA829062953A875A8A8A6
%9E527CA8A87C9E530653519F75C675277BFEA4C7A49F7BC69E9F7BA07CA7
%7DA77DA77CA67B9F7BA0A4A57BC7A4FE9E5275FE517C5153282F9F9FA8A8
%7C7C7AA7A8A87BA77E2906297EFD09FF7E292929FF7CA87CA7A7C6A4A7FF
%A7A47D297D2052FEC79FA67BFEA4CCA5C7A57CA5A7A7A8545429302F2F29
%54537E7D7D7CA5A5C8A4C7A4FE9FC77BA6FE7C207D2953A4A7FFA7A4C7A8
%A77DFF7CFF2F2F2953FD08FFA90629287E7D7CA8A67B7CA5A1AFA89E7C06
%53527B7B7CA4C79FA59FA5A4C7A47C7CA8532F072F5353537E7777533007
%29297E7DA09EC7A4A59FC77BA0A4A67B7B515306529EA7A8A09F7CA4A6FF
%7C7CA8062928A8FD07FF5329282FA97CA7A8A5C67CA7FFFF7BA6295352A6
%FEFEA57CA4C7A5A6A5C69FA77E54075477A19AC2BBBB93BBBBBC9AC37D54
%07307EA77BFEA5C77BA6C6A6A5FEFEA55153297C9EA8FFA77CFEA0FFA87C
%A853282953FD06FFA82F062953A77CA8527DA4A47CFF7CA428295276A4FE
%517CA47CA5C69EA57BA853292FA199BB8C938C938C938C938C938CB599A1
%2F2929A87CA57B7CA4A5A47C27C6C67C275328A57BA87CA47B7C7CFF7CA7
%7E290629A8FD05FFA8292F29FF7CA8A8A5527D7DFFA8A576295352A4FE7B
%529FC7A57CA5FE7CA92F307DC293B5939393B5939393B5939393B593938D
%C2A130297E7C7CC6C8A5A6A4527CFEC67C522952A4A7FF7D7D7CA5A8FF7C
%FF292F297EFD05FF53292853A77C7EA7A4A59FA07DA69F2928527BFEA451
%7BFEA4A5A47B7CA9072FA1B58D938C938D938C938D938C938D938C938D93
%8CB5A054067E7CA5A4A5A4FE9F279FFE9E5253297BA67DA67BA5A4A7A8A0
%A77E062929FD04FFA92F29297EA77CA77CA6A4C7A7A89E7D295351FEC652
%51FEA4C7A4C77CA8075AC2B58DB593938DB593938DB593938DB593938DB5
%93938DB5BC7E297E7CA5A4C7A4FE7B52A5FE757D29539EA7A7C6A4A67CA7
%A7A6A829292FA8FFFFFF7E282906A97C7DA4A552A77DFF7CA528532727A4
%A527C6A4A5A4A47BA8295499934B998C938C938C938C938C938C938C938C
%938C938C938C93997E067E7CA4A4A5A4C651A5C6512753067C7BA8A77D51
%A4A5A87BCF2929067EFFFFFF5329295AA8A0A8C7C67CA6A8A8A57629537C
%7BA6A5A59FA6A4CC9FA82F54C2B5515293B5939393B5939375B593939376
%75765176939393B59393BC7E29A87BCCA5C7A5CCA57C7B7C522952A5A7A7
%7C7CC6A6A8A7A77E292F2FFFFFFF53282953A77CFF52C6A4A4A7A79E5328
%5251FEA4A59FA59FA59EA0532FA1936F5275938C938D756F5227274B524B
%527BA67B7C515251998C938D93A02F29A77AC7A5A07BA6A4FE755229297B
%A77DA4A4C77CFF7CA07E29062FA8FFFF292F29A97CA8A77C7CC77CFF9FA6
%295327527CA09FCCA4C7A4A6A82F77BB937C7B9A75524B765152517C7B7C
%7B52A57C2752517C51A65176517693B5A12F7E7C7B7CA5C7A4A57B7C277D
%297C9FA8A0C67C7CA7CF7CFF292928A9FF7E29062FA87C7CA0A47C7DFFA8
%A452295276A4FEA47C7BA09FA47C5429C28C757B7C6F527B7C51A07B7C51
%52515227A55127217627754B76517C51758CBC532F7D7BA4A59FA59FC6C6
%7C522952A47DFF7D7CA47C7D7CA753282953FF7E282F53CA7CA7A4FE7CA7
%A8A7A45329527BFE7B7CA5C79FA67BA829A293B575A67B99517CC6FE7C7C
%517C7C7C5152A5CC7B7C517675765152275293938DA2297E9FC7A5A6A57C
%7CFEA47D532FA4A77DA77CFEA4A87CA85429297EFF5329285AA7A07DC6A4
%C69EA8A0A5285352A5C65251C69FA5A47C532FA0938C76A4766F27275251
%7C51524B5251762776517C9FA67B7C517C75A551998D9399542FA77AA5A5
%C67B52A4C65153077C9FA7A4C6A4A5A8A77C7E282929FF5429295AA77DA8
%7CFEA4A7A8A67C295352A4FE517CC6C7A4A57D5453BC939351CC75935152
%5252F87C7C52757C7C526F997576517C51766F7676A5519393BB772F7DA5
%A5C7C6A627FEC65253297CA57DA7C6C67CFFA7A67E2F292FFF2929067E7C
%A17C7C517C7CA89E7C285351FEA4517BFEA4A57AA8077D92936F7C9E768C
%9351A57B7C9FA5275251274B756E9369754B5251756F527B528C938CA107
%7E7BA59FC7A4517BFE7B5306769EA77C7C527C7CA87CA9062929A92F292F
%7EA77DA6A47CA5C77DC75229537CFEA627FEC6C7A5A67E2FA1B5939A7BA6
%759393522752517C527C51764B27517C5276517CA5C7A57C76A651B593B5
%A03053A6A4CCA5FE517CFEA6522F52C77CC79F7CC6A7A87CA92F292FA806
%2907A87CA87CC67BC67DA89E53065951FEA47C7BA57BA57B7E07A18C936F
%9F7B768D936F992752275127522727279FC6FEA4FEA4FEA4FEA4FE7B758C
%938DBC2F547CA5A4C7A5A0A4FE755229539EA17CC67BA47DFF7CA9292907
%A82F292FA8A0A7A87CA57CFFA7A4522F53277BA6A5A69FA6A4A65330A093
%93527BA6279993934BA0C6A67B7C7CA09FFEC6FEA4FEC6FEA4FEC6FEA4CC
%51998D93BB542F7D7BA67BA69FA05127525328A5A7A87BA57CA8A8A0A82F
%282FA8062906A97C7C7B7CA4A6A8A79E5306527BFEA4C6A4C6A4C67C5329
%BC8C75517C517C27936F52C6FEA4FEA4FEA4FEA4C6A4C6A4C6A4C6A4C6A4
%C6A47C6F938CBB532F7CA5A5A57BC7A4C67B52292F9EA7A8A5A47C7BA87B
%A8292906A82F292FA8A67DA6C6FE7CFFA7A5522F527C7BA67BA07BA67B7C
%53549A936F7C7C7C515251769FFEC6FEA4FEC6FEC6CCC6FEA4FEC6FEA4FE
%C6FEA4FE529993B5BB542FA7A4A5A5C7A5A69F7C525328A5A7A87CFEC67C
%A8A6A82F292FA8072906A97C7CA4FE757C7CA89E52067D277C9FC79FA57B
%A57C5A29C38D93277C5152A47C27C6A4C6A4C6A4FEA59FA4FEA4C6A4FEC6
%FEA4FEA4FE7B528D938CC253537CA57BA57BA5A4A52752292F9EA77C7C7B
%FE9F7C7CA9292906A82F292F7EA77CA6A4A6C6A7A8A55229527CFEC751A6
%A5A5A4A67E2FA0B59352275227FEC67CA5C751FEC6FEC67C76FEA4FEFEA6
%517CA5FEA4FEFE7C6F9393939A5453A7A4C7A5A5517CFEA0522F2EA57CA6
%A4A0A4A7A87CA82F29297E2829067E7CA77D7CA4A57DA87A7C065351FE7B
%27A4C6A4A57B7E07A18C934B527B5251FE517C9F52A4C6A4A427A5C6FE9F
%52517C7B527BFEA4C751938C938CA1077E7BA49EC7C65251FE7B5206539E
%A77DA4A57C7DA87CA9062906A95429297EA77CA67BA77CA8A8A57C29527C
%C6FE51A6C6C7A5A5A72F77BB935251A6522751FE767C51FEC6FE51A6FEA5
%51524BFEFEFE52279FFE9F7693B593B5A12F7DA6A4C7C6C727C7FE7C532F
%76A5A8A87C7C9FA67DA7A82F292FA92F29287E7DA7A7A57C7CA0FF7BA006
%5352A5C65275FEA4A57AA72F539993277C7B7C2751517C27279FFE7B2775
%5251756852A4FE7B526F519FC651758C93997D07A79FA5A4FE9F52A4FE51
%53067C9FA89F7C7CA0A8A77C7E062929FF7E282953A87CA87C7CA4A6FFA7
%9E532F527BFE5252A4A6A5A57C7E07A19276527C517693764B93757CFE76
%5176FD04934B7CFEA5279A757CC6A627998DC32F547CA5A5C7A47C51FEA4
%7C53297BA6A8A6A47C7CFF7CA77E292854FF7D290653A87C7DA5A4A57DFF
%A7A45229527CC6A551A59FA5A4A57D2F53BB8C5227518C938C938C9351FE
%7B276F938C938C9327A5C6526F767BFE51768C9377297D7C7B7C7BA57BA5
%C6A5522F28A47CAF7DA4A4A5A87CA754282953FFA9292F29FF7CCFA7C6A0
%A77CA8A57C295351A5A4C79FC7C6C77B7D5A2FA1B575766FB59393937651
%A0FE7C519993B593997552A5FE51764BA6FE7C9393A0542FA7A4CCA5A67B
%A6A5C7517D297DA4A77CA7A5C7A7FF7BCF2F29297EFFA82906297EA67CA7
%9EA07BC6A8A67B292F5227A0A4C69FA07BA57BA8075499938D938C93934B
%517CA4FE51998D938C99517C7BFEA452517C9FC65193937E067E7BA59FA5
%A4C6A4A0272753297BA67DC67BA57BA7A77CA82928297EFFFF5329287EA7
%7C7CFEC6FE7CFFA7A4522F527CFEA67CA6A5C7A5C67C7E29A2FD04938D99
%2752517C5152759393937552767C515227525152275293A129547CC6A5A6
%9FC79FA5FEA6525328A5A1AF9FFEC6FE7DA77C84282F29FFFFFF7E282929
%CA7BA876A57B7D7CA89F7C0653275151C79FA5A4C7A4A47C5407A192938C
%938C996F754B936F938C938C994B764B756F938D756F9392C3072F7DA5A4
%C6A4A57BA57B522753067C9E7D7C7D7BA07CA87BA853290653FFFFFFA829
%292FA8A67CA67C7C7BA5A8A79E53295227FEA451A5FEA5C7A4A5A75407CA
%939393B5939393B5939393B5939393B5939393B5939393B593C32F2F7EA6
%A4C7A5FEC6527BFE5152532F9FA7A8A57C7C7BA1A7A6A85329297EFD04FF
%2929067E7D7C7CFEC6FE9FFFA8A575295352A4FE5151A4FEA4A59FA0A72F
%07A293938C938D938C938D938C938D938C938D938C938D9392C32F297D7C
%A4A5A4C6C65251FEC676522952A4A7CFA4FEA4C6A7A77CA8282906A9FD04
%FF7E292929FF7CA8A0A6A4A5A8FF7DA4282F527CC6FE517CFEC7A5A5A4A6
%7D5407A2BCB58D9393938DB593938DB593938DB593938DB5BBA2072F7EA6
%7BA6A4A5C6A627FEFEA6525328A57CFFA8C7A4A6A1FF7CA853292953FD05
%FF7E2906297EA07CA87D7D7BA87CA87B7C065327A5C6A5277C7BA5A4C67B
%7C7D5A0654A1BB8C938C938C938C938C938C938C938CBBA05A07537DA0A4
%C67BA0A49F27A0C6A42753067C9E7D7CA87B7D83FF7D7CA82906297DFD06
%FF2F29295AA87C7CC7A07C7DA4A7A8A47D297D51FEFEA67BC7A5FE7BA6A4
%A57CA82F2F53A2BCBB93B5939393B593B593BBBCA15330297E7DFD04A5FE
%7CA6A5A6C6FE517D2953A4A7A7A57D7CA5A57DA6A77E292F29FD07FF7E28
%2906A97C7C7BFEA47BA4A7A8A09E53295251FEC6A57BFE7BA0A4C7A4A47B
%A77D2F075453A19AC29AC29AC2A0A15354072953A87CA4A4C79FA59FFE7B
%7CA4FE7B52282F7BA0A8A6A47BA4FE7CA77BFF2929287EFD07FFA9532929
%53CF7CA87CA6A6C67CA8A8A57B2F2F52277CA5FE7BA6A4C7A4C7A5C67BA6
%A77E532F072F29542F542930072F537EA77C7BC7A4C7A4C7A5C79FFEA57C
%515253297CA57DA87CFEA0A67CFF7CA77E292929A8FD08FF532906297E7C
%7C7D7C7C7B7D7BA87DA47529522751FE7B7C9F7CC6C6A4C79FA5A4A5517C
%7D7E7D7E5354537E537E7DA17BA47BA59EC7A4C6C6A051A57BFE75275229
%52A47DA87B7D517D7CA77D7CA829062953FD0AFF29292954A87C7CC7C6C7
%7CFEA6FF7DA47629537D5152FEA6277CA4FEA4A6A5CC7BA6A4C7A5A67CA6
%7C7C7CA6A5A5A4A5A5C77BC7A5FEA47C277CFE7C5152532952A47CFFA6FE
%7CCCC6A57D7CA87E282F29A9FD0AFF7E2829067E7D7C7CA5A4A5A47C7DFF
%7CA45229532827FEC6C751277BA59FA5A47CA4A5A4C7A4A57BC77BA5A4C7
%A4A59FA5A47C9FA59F5151A5C6FE5127532952A47CA87DA6A4A5A4A67D7C
%7CA90629287EFD0CFF53292929FF7CA7A8A8A8A651A5A7FF51C652295359
%52C6FEFE7B277BC7A4A67BC7A4A5A5C7A5A5A47C9FC7A5C7A4A59FC7A5A0
%A4527CFEFEFE7B52532952C67BFFA77B7BA7FD04A87CFF2929292FA9FD0C
%FF7E2906292FFF7BA77CA67B7CA4A6A87D51A452292853277BA4FEA4C67B
%FE7BA57BFEC6C6A4A57BA57BA5A4C6A4FEA4A59FFE7BA5A4FEC69F275228
%2952A475A8A8A6A47C7BA67DA851A8532906297EFD0EFF542929297EA87B
%A8A6C7A5CCA67D7DA77BA57B532953527CA4FE7BA6A4A6A552767CA5A69F
%A6A4A6A5A6A47C52527BC7A5C77BFEA47C2E7D292F7CC77BA17DA7A6C7A5
%C7A6A87CA7842F292953FD10FF292906297EA77BA8A77D7C7C7CA57D7C76
%A59E53065352522751C67C7BFE7B7C515127A6A5A57BA55151517C7BC7A4
%A0C651F852525306537BA5757D7DA47C7C7C7DA7FF7C7CA82F282929FD11
%FFA92929282FA9A77C7D9FC6A4A6A4A77C7C7CA6A47C2829537D527C277C
%FD04FEA4A5A4A6C67CA4CCA5FD04FEA0277C5253532F297CA4A67C7C7CA7
%A49FA4FE7CA87C7CA953282F29A8FD12FF7E0629062FA87C517C7CA77D7C
%7CA67B7C7C7D9EA5522906535252277C7B7B9EFEC6A551FE517CC6FEA49F
%7B7C2752525306294CA59E7C517C9F7C7C7C7DA77C7D517CA8532829067E
%FD14FF7E292F2953A9A7757C7CA7A0A07BFE7D7C7C7D7CA59F7D29292953
%53535252527C27527C52277C525252535353292929537BC77C7D7CA17DFE
%7BA67CA77CA07B7CA87E292F287EFD16FF5428292853A8A7757C7BA5A5A0
%7BA77C7B7B7D7DA69EA576530629072F28535359537D537D5253292F0729
%065352A5A4A67C7C7B7B7CA77BA6A5A57B7C517CA85328292853FD18FF54
%282F2953A8A77C7C7BA77DA67BA6C67D7CA07DA8A0A6A4A67C532E2FFD09
%292F285376A6A4A57CA77C7C7DA7C67C9FA67D7D7CA77CA7A85429292853
%FD1AFF5306292829A8A87B7C517CA4A67C9F7CFFA7A07CA17DA77CA59EA5
%7B7C7B7C5276527C7B7C7BA59EA57BA77C7C7BA7A8FF7CA07CA59E7C757C
%7BA7A82F06292853A8FD1BFF7E292F285AFFCF7C7C7B7D7DA79FA57CA8A8
%A87CA67CA77C7C7CA67BA6FD05A5A67BA67B7C7CA77CA07CCFA8A87CC79F
%A77DA77C7C7CA8FF53282F2954FD1EFF2F062929FFFFFF7D7C75527BC8A0
%A87D7D7C7DFD047C517D7C7C7CFFA8A8A8FF7C7C7C7D517C767C7C7D7CA1
%7DA77CC87B767B7C7CFFFFA828290653FD1EFF7E292F292FA9FFFFFFA8A7
%7B7C7DCFFFFFA8A8A77C51525176527DA8A07CFFFFFF7CA6A87D52765152
%75A7A7A8A8FFFFA87D7C7B7CA7FFFFFF7EFD0429A9FD1BFF7D2F06290629
%53FD05FFA8A87C7B517C7C7C7BA6517C7C7C7D52277C5252527DFD045227
%7C7D7C7C7675A6FD047C7B7B7BA7A8FD04FFA90629062906537EFD18FF2F
%29292F292953FD09FFA7A77BA7A8FF7D7CA8A8A57C51A5A5A69FA67BA59F
%A6A5A5517CA5A8A87C7DFFA8A77C7CA7FD08FFA92929292F292953FD15FF
%A929290629075359A97E7E7EAFFD07FFCF7C7B7BA57CA67BA59F7C7C5251
%7C757C7B7C51527D7CA4A59FA77CA57C7C7CA8A9FD06FFA97E7E7EA95353
%0629072929A9FD12FFA9FD0429538454534C704C704C537EFD06FFA6FEC6
%A4A6A4FE517C7DA8277C7C7C7B7C7C5252A87C5275FEA4A0A4FEC6A7FD06
%FF7E542F535253535A7E7E2FFD0429FD12FF29290629535A28706F75757B
%75756F4C29A9FFFFFFA87B7C7B7C7C527BA59FA57AA57BA59FA57BA59FA5
%7AA59F9F7B527C7C7BA07BA8FFFFFF7E29536F7551936F764B532F7E5329
%062929FD10FF5329292F7E7E4C9A75A6A4CCC6FEA4A6757028A9FFFFA87D
%7BA7A852517C7BA69FA69FA69FA69FA69FA69FA69FA67B7C5152A8A77C7D
%A8FFFF7E2F7D759375A675A07B9393762F7E5A2929297EFD0EFF7E290729
%537E4B757BFEA57C7B7C7BA0A4C7516F28A9FFA7A4C6A652F82727272027
%2727262727272627272726FD0527F87DA5C6A4A7FF7E29768CA67B527BA6
%7BA051A07575287E5329062FA8FD0DFF54282F2F7E4C997BFE7B7C767C51
%7C527CA5FE757029FF7BA07C7C2752275227522752275227522752275227
%5227522752275227A152A57CA92F76759951A67B7C517C7B7C7BA093762F
%A82929287EFD0DFF2929067E536F75FE757C51A09F767B7C51529EA5754C
%59A87C7C7C2727272627272726272727262727272627272726272727F851
%7D7C7CA853536E9F7B7C51527BA57B76519F51A67552535A282929FD0CFF
%7E29292F7E7075CC9F7C7BA67BA67BCCC67C757CC6A06F54FFCAA47C7CA5
%9FA6A5A69FA6A5A69FA6A5A69FA6A5A69FA6A5A69FA652A69EFFAF547693
%757C7B7C7CA6FEA67C7C7BA69F996F5A7E2F292FA9FD0BFF7E28292F7E4B
%7BA47C51A57B51517CA4FEA47C51A69F754CFF7D7C7652517C517C517C51
%7C517C517C517C517C517C517C517C51527C7C7DA953767BA67B7C7B277B
%FE7B27517C7B7C7575527E292906A8FD0BFF5329295A53707BC7517CC6A0
%51A07BC6A4FE7B7C7BFE754C7DA5A0A852FEC6FEC6FEC6FEC6FEC6FEC6FE
%C6FEC6FEC6FEC6FEC6C652A89FA5597D75A07B7C9FFEA4A67BA0A4CCA57C
%7BA575777E5429297EFD0BFF7E062953536FA59F7C7BC6A4C6A4A59FC6A4
%A6517CA4754C7D7A7CA0527BFEA4C6A4FEA4C6A4FEA4C6A4FEA4C6A4FEA4
%C6A4FE7B527C7C7A535293757C51A5A4FE7BA551A5A4C77B7C51934C7E29
%29287EFD0BFF5329295A53707BC7757CA5FEA57C52A5C6FE7B7C7BCC754D
%7EA77DC67B7CA4A5A5C7A5A5A5C7A5A5A5C7A5A5A5C7A5A5A5C7A5527BC7
%7DA77D7D75A57B7C9FFEC6A6527CA4FEA57C7BA075777E5429297EFD0BFF
%7E28292F7E457CC67C51A0C6A5277CC6FEA47C51A57B754CFF7DA57CA651
%51757C517C517C517C517C517C517C517C517C512752A676A6A7A8297675
%767B7CC6C6275227A5C67C7BA09F76537E292928A8FD0BFF7E29292F7E4C
%75C7A57C51A6A5527BFEA47C517CFE7C6F5AA8A67B7DFFFF517C527C517C
%527C517C527C517C527C517C525252FFA87C7BA6A95476939FA67B7CC6A0
%7B7CA47C7BA651936F547E29292FA9FD0CFF2929067E536F75FE7B5251A0
%517C7B7C5152A4A56F4C7ECF7C7D7AA7FFA8F827F827F8272727F852F8FD
%0527F82727FFFFA79E7D7CFF535351A0517C7B7C7B9F7B7C7B7C7BA57552
%5354282929FD0DFF7E282F297E4C9A7BFE7B7C527C517C527CA4CC757053
%FFFFA8A5A5A7FFFFFF7652517C51A6277CA55251A6517C517C7CFFFFFF7C
%A5A0FFFFFF2F7D93999F7C7BA07BA07BA6759A99762FA8292F297EFD0DFF
%A8290629537E4B757BC6A4A07B7C7BA5C6A5517028A9FFFF7CA57CFD04FF
%7DFD05275127522752FD042726A8FFFFFFA87CA47CFFFF7E2976759F51A6
%7B7C7B7C7BA56E9A2F7E2929282FFD0EFFA92F2907295A7E4C9475A0A4CC
%A4C69F7C757029A9FFFF7D7C7BA7FFFFFF7D2752517C51A0517C7B52517C
%517C517627A8FFFFFFA77B7CA7FFFF7E297D75937BA075A5759375762F7E
%5329072953A9FD0DFF062906290629537E28706F756F757575454C2FFFFF
%FF7CA47B9F7CFFA87DF827F851272751272776F82751FD0527F87DCFFF7C
%A07BA57DFFFFA829537676519951764C532F7E29290629062929FD0CFF53
%2F292929542F2F53A97E534C704C4D4D7E84FFFFCFA7A09FFF7DCFFF7D75
%A07BA07C7C7B7C7C7C7BA07C7C7B7C7C7C7BA0517DFFA8A7A87BA0A7CFFF
%FF7E5A537E5354535A7EA953532F532929292F53FD0AFF2F29062F53A9A8
%FFA8A9A8FFA8A97EA8A8FFA8FFFFA8527C9EA1A8FFA8FF52C6A4C6A4FEA4
%C6A4FEA4C6A4FEA4C6A4FEA4C6A4A552FFA8FFA8A07B7C76A8A8FFA8A97E
%A87EA9A8FFA8A9A8FFA8A95329062953FD06FFA9FF7E2929297EA8527C52
%7C527C527C527C527C527C527C767C517C527C527C5276517C527C517C52
%7C517C527C517C527C517C527C517C527C527C527C517C767C527C527C52
%7C527C527C527C527C52A87E29292F7EFD05FF7E282906292FA851C6A4C6
%A4FEA4C6A4FEA4C6A4FEA4C6A4FEA4C6A4FEA4C6A4FEA4C6A4FEA4C6A4FE
%A4C6A4FEA4C6A4FEA4C6A4FEA4C6A4FEA4C6A4FEA4C6A4FEA4C6A4FEA4C6
%A4FEA4C6A4FEA4C6A4A551FF29290629067EFFFFFF7E292953A8FF537CA5
%A69FA6A5A69FA6A5A69FA6A5A69FA6A5A69FA6A5A69FA6A5A69FA6A5A69F
%A6A5A69FA6A5A69FA6A5A69FA6A5A69FA6A5A69FA6A5A69FA6A5A69FA6A5
%A69FA6A5A69FA6A5A69FA6A57C7DFF7E2F29297EFFFFFF7E282929FF527B
%7BA67B9F7BA67B9F7BA67B9F7BA67B9F7BA67B9F7BA67B9F7BA67B9F7BA6
%7B9F7BA67B9F7BA67B9F7BA67B9F7BA67B9F7BA67B9F7BA67B9F7BA67B9F
%7BA67B9F7BA67B9F7BA67B9F7BA67B7B52A90729287EFFFFFF7D29292FA8
%FD047CA07C7C7CA07C7C7CA07C7C7CA07C7C7CA07C7C7CA07C7C7CA07C7C
%7CA07C7C7CA07C7C7CA07C7C7CA07C7C7CA07C7C7CA07C7C7CA07C7C7CA0
%7C7C7CA07C7C7CA07C7C7CA07C7C7CA07B7CA82F29297EFFFFFF7E062929
%FFA8A9A8A8A8AFA8A8A8AFA8A8A8AFA8A8A8AFA8A8A8AFA8A8A8AFA8A8A8
%AFA8A8A8AFA8A8A8AFA8A8A8AFA8A8A8AFA8A8A8AFA8A8A8AFA8A8A8AFA8
%A8A8AFA8A8A8AFA8A8A8AFA8A8A8AFA8A8A8A9A8FF0629287EFFFFFF7E29
%292F537E7E7E597E7E7E597E7E7E597E7E7E597E7E7E597E7E7E597E7E7E
%597E7E7E597E7E7E597E7E7E597E7E7E597E7E7E597E7E7E597E7E7E597E
%7E7E597E7E7E597E7E7E597E7E7E597E7E7E597E7E7E532F29297EFFFFFF
%7E2829072928292829282928292829282928292829282928292829282928
%292829282928292829282928292829282928292829282928292829282928
%292829282928292829282928292829282928292829282928290629287EFF
%FFFF7E29072F292F072F292F072F292F072F292F072F292F072F292F072F
%292F072F292F072F292F072F292F072F292F072F292F072F292F072F292F
%072F292F072F292F072F292F072F292F072F292F072F292F072F292F0729
%7EFFFFFF7E28290629062906290629062906290629062906290629062906
%290629062906290629062906290629062906290629062906290629062906
%290629062906290629062906290629062906290629062906290629062906
%29067EFFFF
%%EndData
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 70 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/set_gvm
{
	currentglobal exch setglobal
}bdf
/reset_gvm
{
	setglobal
}bdf
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/thold_halftone
{ 
	level3
		{sethalftone currenthalftone}
		{
			dup /HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}
			{
				begin
				Width Height mul {
					Thresholds read {pop} if
				} repeat
				end
				currenthalftone
			} ifelse
		}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			/srcDataStrs [ imageDict begin
				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
				{
					Width Decode length 2 div mul cvi string
				} repeat
				end ] def		
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put
			imageDict /Decode [0 1] put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		DataSource 0 get type
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch get exec length exch 0 ne {pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type /dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{ 
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		dup /CSDBase known {
			/CSDBase get /CSD get_res /Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5 {cleartomark} bind def
}{
	/pdfmark_5 {pdfmark} bind def
}ifelse
/ReadBypdfmark_5
{
	2 dict begin
	/makerString exch def string /tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
		pop pop cleartomark exit
		}{
			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5
		} ifelse
	}loop
	end
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.
%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for
%% definitions of some fundamental procedures.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 201 dict dup begin put
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_in_pattern false def
/AGMCORE_currentpagedevice nd
/knockout_unitsq nd
currentglobal true setglobal
[/CSA /Gradient /Procedure]
{
	/Generic /Category findresource dup length dict copy /Category defineresource pop
} forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_&setoverprint /setoverprint ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not AGMCORE_currentpagedevice/OverrideSeparations known and
						{
							AGMCORE_currentpagedevice/OverrideSeparations get
							{
								/HqnSpots /ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
						}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace
							false
							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup (Cyan) eq exch /Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup (Magenta) eq exch /Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup (Yellow) eq exch /Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup (Black) eq exch /Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type /dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading /AGMCORE_ignoreshade known
					currentdict end exch
					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where {
						begin
						dup 0 get dup /Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[ 
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get [ 
									exch {
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									} forall 
								] 1 xpt
							}if
						}ifelse
						end
					} if
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin /clonedict load end def
	/clonearray Adobe_AGM_Utils begin /clonearray load end def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/getrampcolor
	{ 
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type /stringtype eq {indx get} if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		} for
		ColorSpaceFamily /Separation eq 
		{sep}
		{
			ColorSpaceFamily /DeviceN eq
			{devn} {setcolor}ifelse
		}ifelse
	} bdf
	/sssetbackground {aload pop setcolor} bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		c1x c2x eq
		{
			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
		} ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			/max { 2 copy gt { pop } {exch pop} ifelse } bdf
			/min { 2 copy lt { pop } {exch pop} ifelse } bdf
			rampdict begin
			40 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}
						{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{ /theta 89.99 def}
							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}
							{
								/L1maxX 0 def
								/L2maxX 0 def
							} ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						} ifelse
					} ifelse
				} ifelse
			} if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt { exch } if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			} if
		} if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		newpath
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}
		{
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			} repeat
			pop
		} ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}
			{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}
					{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{ /theta 89.99 def}
						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}
						{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					} ifelse
				} ifelse
			} ifelse
		} if
		grestore
		grestore
		end
		end
		end
		} ifelse
	} bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		x1 x2 eq
		{
			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			rampdict begin
			20 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt { exch } if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				} if
			} if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				} if
			} if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			} repeat
			pop
			ext1 {
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				} if
			} if
			grestore
			grestore
			end
			end
			end
		} ifelse
	} bdf
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
/capture_currentpagedevice {
	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf
} def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup //Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name /MappedCSA xdf}ifelse
} def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup () eq exch (All) eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc {setcolor} bdf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		7 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {
					/AliasedColorants false def
					exit
				}
				{
					new_LookupTables names_index get 0 get null eq {
						dup /Names get names_index get /name xdf
						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
						or or or not {
							/AliasedColorants false def
							exit
						} if
					} if
				} ifelse
			} for
			lut_entry_len 1 eq {
				/AliasedColorants false def
			} if
			AliasedColorants {
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	dup not {
		CSA map_csa
	} if
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants {
				/currentspotalias current_spot_alias def
				false set_spot_alias
			} if
			Names {
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				/names_index names_index 1 add def
			} forall
			AvoidAliasedColorants {
				currentspotalias set_spot_alias
			} if
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
 					0 0 0 0 /setcmykcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				{setcolor} bdf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSDBase known {
			CSDBase /CSD get_res begin
			currentdict /Names known {
				currentdict devncs
			}{
				1 currentdict sepcs
			} ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt /Names where {pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal {
					/tableIndex xdf
					Lookup dup type /stringtype eq {
						compCnt tableIndex map_index
					}{
						exec
					} ifelse
					/Names where {
						pop setdevicencolor
					}{
						setsepcolor
					} ifelse
					currentgray
					tableIndex exch
					HiVal mul cvi 
					NewLookup 3 1 roll put
				} for
				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
				end
			}{
				level3
				{
					currentdict /Names known {
						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt
					} ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict /Names known {
						Lookup dup type /stringtype eq
							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
					}{
						Lookup dup type /stringtype eq
							{/exch cvx /get cvx 255 /div cvx}
							{/exec cvx}ifelse
							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx
					} ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			} ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 
			begin
			CSDBase /CSD get_res begin
			currentdict /Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
			end
		}{
			/Lookup get 4 3 -1 roll map_index setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {
			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup /CSD eq {
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	} ifelse
}def
/del_res
{
	{
		aload pop exch
		dup /CSD eq {
			pop 
			{
				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef
			}forall
		}{
			exch
			{
				1 index undefineresource
			}forall
			pop
		} ifelse
	} forall
}def
/get_res
{
	dup /CSD eq {
		pop
		dup type dup /nametype eq exch /stringtype eq or {
			AGMCORE_CSD_cache exch get
		} if
	}{
		findresource
	} ifelse
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		/CSA get_res
	} if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	clonedict
	begin
	/OldPaintProc /PaintProc load def
	/PaintProc
	{
		mark exch
		dup /OldPaintProc get stopped
		{closefile restore end} if
		cleartomark
	}  def
	end
  } {pop} ifelse
} def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	1 index dup /ID get exch /Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}{null}ifelse
	Intent ne {
		Intent /ColorRendering {findresource} stopped
		{
			pop pop systemdict /findcolorrendering known
			{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				true
			}
			{false} ifelse
		}
		{true} ifelse
		{
			dup begin
			currentdict /TransformPQR known {
				currentdict /TransformPQR get aload pop
				3 {{} eq 3 1 roll} repeat or or
			}
			{true} ifelse
			currentdict /MatrixPQR known {
				currentdict /MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true} ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR [
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind
				] def
				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def
				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def
				currentdict end
			} if
			setcolorrendering_opt
		} if		
	}if
} def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict /ColorRendering known{
			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0} ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get /CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		currentdict/TintProc known currentdict/CSA known and 3 1 roll
		//Adobe_AGM_Core begin
		dup /customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			4 -1 roll{
				exch pop /sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
			pop
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
/set_def_ht
{
	AGMCORE_def_ht sethalftone
} def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.25 0
%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.25 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.25 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict /Adobe_CoolType_Data 2 copy known not
	 { 2 copy 10 dict put }
if
get
	 begin
	 /@opStackCountByLevel 32 dict def
	 /@opStackLevel 0 def
	 /@dictStackCountByLevel 32 dict def
	 /@dictStackLevel 0 def
	 end
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup /args
			7 index
			5 add array put
			put get
			}
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{ pop count }
			if
			dup /argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					 { (*) { pop stop } 128 string /Category resourceforall }
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup
					 {
						  /@shouldNotDisappearDictValue known
								{
										  {
												end
												currentdict 1 index eq
													 { pop exit }
												if
										  }
									 loop
								}
						  if
					 }
				if
				end
		}
		{ false }
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
		currentglobal false setglobal
	  userdict /Adobe_CoolType_Data 2 copy known not
		  { 2 copy 10 dict put }
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0
%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.
%%Version: 1.21 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 27 add dict copy }
	{ 27 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
				mark
				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put
					 {
					 ((Hex) 57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
					 }
				stopped
					 {
					 cleartomark
					 Adobe_CoolType_Utility /@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						  {
						  2 copy get 3 index eq
								{ 1 index length exch sub 1 sub { end } repeat exit }
								{ pop }
						  ifelse
						  }
					 for
					 pop pop
					 Adobe_CoolType_Utility /@eexecStartData get eexec
					 }
					 { cleartomark }
				ifelse
			} }
			{ {
				Adobe_CoolType_Utility /@eexecStartData get eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/AGMIMG_flushfilters
{
	dup type /arraytype ne
		{1 array astore}if
	aload length
		{
		dup type /filetype eq
			{
			dup status 1 index currentfile ne and
				{dup flushfile closefile}
				{pop}
			ifelse
			}{pop}ifelse
		} repeat
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator /imagemask eq{
 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									[ /Separation Name [/DeviceGray]
	 									{ 
	 										sep_colorspace_proc AGMCORE_get_ink_data
											1 exch sub
	 									} bind
										] AGMCORE_&setcolorspace
										/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0 () /SubFileDecode filter
				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0 () /SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx
			}for
		/convProc load /exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2 /add cvx /index cvx
			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx
			}for
	]bind cvx 0 () /SubFileDecode filter
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt {1 add 2 div cvi}{exit}ifelse
			} loop
			string
		} repeat
		end ] def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [ [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA get_csa_by_name 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							devn_alt_datasource
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get get_csa_by_name
				}{
					/Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2007-06-12T10:10:29+06:00</xap:CreateDate>
         <xap:ModifyDate>2007-06-12T10:10:29+06:00</xap:ModifyDate>
         <xap:MetadataDate>2007-06-12T10:10:29+06:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>180</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAC0AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FUq8y+Z9E8taVJqmsXK21rHsK7u7kEhI16sxp0/hlmLFLJKojdjKQAsvnLzt/wA5F+atXkktvL4/&#xA;Q2nk0WRaPdOP8pzUJ/sNx/Mc3mDs2Ed5eo/Y4c9STyYCdP8AOvmKYyOl9qlwx5EyNJNITTrRyWPX&#xA;LTq9Pj2sfD9jDwskm7vyj510V/WudOu9Pddg7K0TePwnYn6MA7QwS24vmCPvC+BkHRknlf8AO78w&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:FBB108C19A18DC118E449F0392372BAE</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:FCB108C19A18DC118E449F0392372BAE</xapMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Core/capture_currentpagedevice get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -627.372 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 627.372 li
437.405 627.372 li
437.405 0 li
cp
clp
[1 0 0 1 0 0 ] concat
169.27 71.585 mo
169.27 44.6802 191.072 22.9307 218.005 22.9307 cv
244.802 22.9307 266.632 44.6802 266.632 71.585 cv
266.632 98.5439 244.802 120.347 218.005 120.347 cv
191.072 120.347 169.27 98.5439 169.27 71.585 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 1 .1 cmyk
ef
4 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
169.27 71.585 mo
169.27 44.6802 191.072 22.9307 218.005 22.9307 cv
244.802 22.9307 266.632 44.6802 266.632 71.585 cv
266.632 98.5439 244.802 120.347 218.005 120.347 cv
191.072 120.347 169.27 98.5439 169.27 71.585 cv
cp
1 .9 .1 0 cmyk
@
343.292 484.717 mo
320.254 484.717 301.511 503.459 301.511 526.551 cv
301.511 549.536 320.254 568.225 343.292 568.225 cv
366.384 568.225 385.019 549.536 385.019 526.551 cv
385.019 503.459 366.384 484.717 343.292 484.717 cv
cp
.15 1 1 0 cmyk
ef
1 lw
343.292 484.717 mo
320.254 484.717 301.511 503.459 301.511 526.551 cv
301.511 549.536 320.254 568.225 343.292 568.225 cv
366.384 568.225 385.019 549.536 385.019 526.551 cv
385.019 503.459 366.384 484.717 343.292 484.717 cv
cp
0 0 0 1 cmyk
@
356.5 500.814 mo
356.5 500.814 357.942 498.717 356.684 496.044 cv
355.872 494.21 354.299 493.633 353.513 491.642 cv
352.674 489.545 353.355 487.605 353.355 487.605 cv
353.355 487.605 348.717 488.917 348.036 491.904 cv
346.646 497.88 350.053 499.084 350.053 499.084 cv
356.5 500.814 li
cp
365.411 507.786 mo
365.411 507.786 367.509 506.266 367.456 503.435 cv
367.378 501.497 366.146 500.238 366.146 498.088 cv
366.146 495.888 367.561 494.367 367.561 494.367 cv
367.561 494.367 362.843 493.791 361.034 496.253 cv
357.47 501.286 360.092 503.593 360.092 503.593 cv
365.411 507.786 li
cp
371.02 517.641 mo
371.02 517.641 373.404 517.116 374.584 514.337 cv
375.213 512.451 374.584 510.931 375.371 508.991 cv
376.156 506.947 378.07 506.004 378.07 506.004 cv
378.07 506.004 373.956 503.698 371.413 505.217 cv
366.093 508.572 367.744 511.666 367.744 511.666 cv
371.02 517.641 li
cp
372.383 528.751 mo
372.383 528.751 374.899 529.224 376.891 527.18 cv
378.201 525.661 378.201 523.931 379.722 522.411 cv
381.268 520.942 383.391 520.837 383.391 520.837 cv
383.391 520.837 380.455 517.116 377.468 517.536 cv
371.36 518.479 371.57 522.097 371.57 522.097 cv
372.383 528.751 li
cp
369.29 539.656 mo
369.29 539.656 371.491 541.071 374.164 539.865 cv
376.052 538.974 376.629 537.454 378.594 536.615 cv
380.69 535.777 382.578 536.51 382.578 536.51 cv
382.578 536.51 381.294 531.899 378.358 531.216 cv
372.304 529.75 371.151 533.26 371.151 533.26 cv
369.29 539.656 li
cp
362.424 548.514 mo
362.424 548.514 363.918 550.715 366.827 550.558 cv
368.767 550.453 369.945 549.248 372.095 549.248 cv
374.349 549.248 375.843 550.715 375.843 550.715 cv
375.843 550.715 376.471 545.945 373.982 544.215 cv
368.924 540.495 366.617 543.273 366.617 543.273 cv
362.424 548.514 li
cp
352.622 554.123 mo
352.622 554.123 353.226 556.638 355.872 557.686 cv
357.76 558.316 359.304 557.686 361.296 558.526 cv
363.315 559.364 364.154 561.147 364.154 561.147 cv
364.154 561.147 366.539 557.057 364.993 554.541 cv
361.716 549.196 358.492 550.82 358.492 550.82 cv
352.622 554.123 li
cp
341.405 555.485 mo
341.405 555.485 340.984 558.001 343.03 559.994 cv
344.55 561.409 346.253 561.303 347.722 562.824 cv
349.294 564.395 349.399 566.545 349.399 566.545 cv
349.399 566.545 353.198 563.558 352.674 560.569 cv
351.784 554.49 348.087 554.647 348.087 554.647 cv
341.405 555.485 li
cp
330.607 552.444 mo
330.607 552.444 329.166 554.647 330.397 557.321 cv
331.288 559.101 332.757 559.678 333.595 561.722 cv
334.435 563.714 333.646 565.707 333.646 565.707 cv
333.646 565.707 338.286 564.449 338.968 561.512 cv
340.513 555.485 337.028 554.28 337.028 554.28 cv
330.607 552.444 li
cp
321.695 545.526 mo
321.695 545.526 319.547 547.046 319.651 549.982 cv
319.679 551.92 320.91 553.073 320.91 555.329 cv
320.91 557.477 319.547 558.892 319.547 558.892 cv
319.547 558.892 324.212 559.625 325.941 557.163 cv
329.585 552.078 326.911 549.72 326.911 549.72 cv
321.695 545.526 li
cp
316.113 535.777 mo
316.113 535.777 313.571 536.3 312.575 538.974 cv
311.842 540.861 312.522 542.486 311.736 544.425 cv
310.847 546.469 308.933 547.36 308.933 547.36 cv
308.933 547.36 313.151 549.72 315.694 548.147 cv
321.015 544.792 319.364 541.595 319.364 541.595 cv
316.113 535.777 li
cp
314.699 524.505 mo
314.699 524.505 312.156 524.087 310.217 526.184 cv
308.802 527.652 308.854 529.381 307.36 530.902 cv
305.84 532.474 303.743 532.474 303.743 532.474 cv
303.743 532.474 306.652 536.3 309.588 535.881 cv
315.799 534.833 315.484 531.216 315.484 531.216 cv
314.699 524.505 li
cp
317.687 513.708 mo
317.687 513.708 315.589 512.294 312.916 513.5 cv
311.108 514.337 310.479 515.806 308.513 516.697 cv
306.417 517.536 304.529 516.8 304.529 516.8 cv
304.529 516.8 305.735 521.467 308.617 522.097 cv
314.75 523.562 315.852 520.105 315.852 520.105 cv
317.687 513.708 li
cp
324.632 504.798 mo
324.632 504.798 323.19 502.65 320.281 502.806 cv
318.236 502.858 317.11 504.013 315.014 504.013 cv
312.733 504.013 311.266 502.65 311.266 502.65 cv
311.266 502.65 310.662 507.366 313.047 509.148 cv
318.184 512.871 320.439 509.988 320.439 509.988 cv
324.632 504.798 li
cp
334.486 499.241 mo
334.486 499.241 333.883 496.673 331.288 495.73 cv
329.296 494.944 327.803 495.678 325.811 494.891 cv
323.741 494 322.901 492.167 322.901 492.167 cv
322.901 492.167 320.543 496.253 322.115 498.77 cv
325.34 504.169 328.615 502.492 328.615 502.492 cv
334.486 499.241 li
cp
345.651 497.827 mo
345.651 497.827 346.147 495.364 344.025 493.319 cv
342.48 491.956 340.827 491.956 339.308 490.541 cv
337.814 488.917 337.709 486.819 337.709 486.819 cv
337.709 486.819 333.883 489.754 334.38 492.743 cv
335.377 498.875 338.915 498.717 338.915 498.717 cv
345.651 497.827 li
cp
0 0 1 .1 cmyk
ef
1.5 lw
356.5 500.814 mo
356.5 500.814 357.942 498.717 356.684 496.044 cv
355.872 494.21 354.299 493.633 353.513 491.642 cv
352.674 489.545 353.355 487.605 353.355 487.605 cv
353.355 487.605 348.717 488.917 348.036 491.904 cv
346.646 497.88 350.053 499.084 350.053 499.084 cv
356.5 500.814 li
cp
365.411 507.786 mo
365.411 507.786 367.509 506.266 367.456 503.435 cv
367.378 501.497 366.146 500.238 366.146 498.088 cv
366.146 495.888 367.561 494.367 367.561 494.367 cv
367.561 494.367 362.843 493.791 361.034 496.253 cv
357.47 501.286 360.092 503.593 360.092 503.593 cv
365.411 507.786 li
cp
371.02 517.641 mo
371.02 517.641 373.404 517.116 374.584 514.337 cv
375.213 512.451 374.584 510.931 375.371 508.991 cv
376.156 506.947 378.07 506.004 378.07 506.004 cv
378.07 506.004 373.956 503.698 371.413 505.217 cv
366.093 508.572 367.744 511.666 367.744 511.666 cv
371.02 517.641 li
cp
372.383 528.751 mo
372.383 528.751 374.899 529.224 376.891 527.18 cv
378.201 525.661 378.201 523.931 379.722 522.411 cv
381.268 520.942 383.391 520.837 383.391 520.837 cv
383.391 520.837 380.455 517.116 377.468 517.536 cv
371.36 518.479 371.57 522.097 371.57 522.097 cv
372.383 528.751 li
cp
369.29 539.656 mo
369.29 539.656 371.491 541.071 374.164 539.865 cv
376.052 538.974 376.629 537.454 378.594 536.615 cv
380.69 535.777 382.578 536.51 382.578 536.51 cv
382.578 536.51 381.294 531.899 378.358 531.216 cv
372.304 529.75 371.151 533.26 371.151 533.26 cv
369.29 539.656 li
cp
362.424 548.514 mo
362.424 548.514 363.918 550.715 366.827 550.558 cv
368.767 550.453 369.945 549.248 372.095 549.248 cv
374.349 549.248 375.843 550.715 375.843 550.715 cv
375.843 550.715 376.471 545.945 373.982 544.215 cv
368.924 540.495 366.617 543.273 366.617 543.273 cv
362.424 548.514 li
cp
352.622 554.123 mo
352.622 554.123 353.226 556.638 355.872 557.686 cv
357.76 558.316 359.304 557.686 361.296 558.526 cv
363.315 559.364 364.154 561.147 364.154 561.147 cv
364.154 561.147 366.539 557.057 364.993 554.541 cv
361.716 549.196 358.492 550.82 358.492 550.82 cv
352.622 554.123 li
cp
341.405 555.485 mo
341.405 555.485 340.984 558.001 343.03 559.994 cv
344.55 561.409 346.253 561.303 347.722 562.824 cv
349.294 564.395 349.399 566.545 349.399 566.545 cv
349.399 566.545 353.198 563.558 352.674 560.569 cv
351.784 554.49 348.087 554.647 348.087 554.647 cv
341.405 555.485 li
cp
330.607 552.444 mo
330.607 552.444 329.166 554.647 330.397 557.321 cv
331.288 559.101 332.757 559.678 333.595 561.722 cv
334.435 563.714 333.646 565.707 333.646 565.707 cv
333.646 565.707 338.286 564.449 338.968 561.512 cv
340.513 555.485 337.028 554.28 337.028 554.28 cv
330.607 552.444 li
cp
321.695 545.526 mo
321.695 545.526 319.547 547.046 319.651 549.982 cv
319.679 551.92 320.91 553.073 320.91 555.329 cv
320.91 557.477 319.547 558.892 319.547 558.892 cv
319.547 558.892 324.212 559.625 325.941 557.163 cv
329.585 552.078 326.911 549.72 326.911 549.72 cv
321.695 545.526 li
cp
316.113 535.777 mo
316.113 535.777 313.571 536.3 312.575 538.974 cv
311.842 540.861 312.522 542.486 311.736 544.425 cv
310.847 546.469 308.933 547.36 308.933 547.36 cv
308.933 547.36 313.151 549.72 315.694 548.147 cv
321.015 544.792 319.364 541.595 319.364 541.595 cv
316.113 535.777 li
cp
314.699 524.505 mo
314.699 524.505 312.156 524.087 310.217 526.184 cv
308.802 527.652 308.854 529.381 307.36 530.902 cv
305.84 532.474 303.743 532.474 303.743 532.474 cv
303.743 532.474 306.652 536.3 309.588 535.881 cv
315.799 534.833 315.484 531.216 315.484 531.216 cv
314.699 524.505 li
cp
317.687 513.708 mo
317.687 513.708 315.589 512.294 312.916 513.5 cv
311.108 514.337 310.479 515.806 308.513 516.697 cv
306.417 517.536 304.529 516.8 304.529 516.8 cv
304.529 516.8 305.735 521.467 308.617 522.097 cv
314.75 523.562 315.852 520.105 315.852 520.105 cv
317.687 513.708 li
cp
324.632 504.798 mo
324.632 504.798 323.19 502.65 320.281 502.806 cv
318.236 502.858 317.11 504.013 315.014 504.013 cv
312.733 504.013 311.266 502.65 311.266 502.65 cv
311.266 502.65 310.662 507.366 313.047 509.148 cv
318.184 512.871 320.439 509.988 320.439 509.988 cv
324.632 504.798 li
cp
334.486 499.241 mo
334.486 499.241 333.883 496.673 331.288 495.73 cv
329.296 494.944 327.803 495.678 325.811 494.891 cv
323.741 494 322.901 492.167 322.901 492.167 cv
322.901 492.167 320.543 496.253 322.115 498.77 cv
325.34 504.169 328.615 502.492 328.615 502.492 cv
334.486 499.241 li
cp
345.651 497.827 mo
345.651 497.827 346.147 495.364 344.025 493.319 cv
342.48 491.956 340.827 491.956 339.308 490.541 cv
337.814 488.917 337.709 486.819 337.709 486.819 cv
337.709 486.819 333.883 489.754 334.38 492.743 cv
335.377 498.875 338.915 498.717 338.915 498.717 cv
345.651 497.827 li
cp
0 0 0 1 cmyk
@
372.261 526.694 mo
372.261 542.546 359.409 555.398 343.557 555.398 cv
327.703 555.398 314.852 542.546 314.852 526.694 cv
314.852 510.84 327.703 497.989 343.557 497.989 cv
359.409 497.989 372.261 510.84 372.261 526.694 cv
cp
0 0 1 .1 cmyk
f
1.5276 lw
372.261 526.694 mo
372.261 542.546 359.409 555.398 343.557 555.398 cv
327.703 555.398 314.852 542.546 314.852 526.694 cv
314.852 510.84 327.703 497.989 343.557 497.989 cv
359.409 497.989 372.261 510.84 372.261 526.694 cv
cp
0 0 0 1 cmyk
@
92.3677 565.271 mo
70.9136 565.271 53.5142 547.979 53.5142 526.551 cv
53.5142 505.018 70.9136 487.618 92.3677 487.618 cv
113.795 487.618 131.222 505.018 131.222 526.551 cv
131.222 547.979 113.795 565.271 92.3677 565.271 cv
cp
92.3667 482.414 mo
68.043 482.414 48.2827 502.125 48.2827 526.547 cv
48.2827 550.872 68.043 570.582 92.3667 570.582 cv
116.716 570.582 136.427 550.872 136.427 526.547 cv
136.427 502.125 116.716 482.414 92.3667 482.414 cv
cp
.15 1 1 0 cmyk
ef
53.5142 526.551 mo
53.5142 505.018 70.9136 487.618 92.3677 487.618 cv
113.795 487.618 131.222 505.018 131.222 526.551 cv
131.222 547.979 113.795 565.271 92.3677 565.271 cv
70.9136 565.271 53.5142 547.979 53.5142 526.551 cv
cp
0 0 1 .1 cmyk
ef
2 lw
53.5142 526.551 mo
53.5142 505.018 70.9136 487.618 92.3677 487.618 cv
113.795 487.618 131.222 505.018 131.222 526.551 cv
131.222 547.979 113.795 565.271 92.3677 565.271 cv
70.9136 565.271 53.5142 547.979 53.5142 526.551 cv
cp
0 0 0 1 cmyk
@
92.3667 570.582 mo
68.043 570.582 48.2827 550.872 48.2827 526.547 cv
48.2827 502.125 68.043 482.414 92.3667 482.414 cv
116.716 482.414 136.427 502.125 136.427 526.547 cv
136.427 550.872 116.716 570.582 92.3667 570.582 cv
cp
92.3677 479.293 mo
66.3223 479.293 45.1636 500.399 45.1636 526.551 cv
45.1636 552.597 66.3223 573.702 92.3677 573.702 cv
118.44 573.702 139.546 552.597 139.546 526.551 cv
139.546 500.399 118.44 479.293 92.3677 479.293 cv
cp
1 .9 .1 0 cmyk
ef
343.059 570.812 mo
318.735 570.812 298.975 551.102 298.975 526.778 cv
298.975 502.355 318.735 482.644 343.059 482.644 cv
367.408 482.644 387.119 502.355 387.119 526.778 cv
387.119 551.102 367.408 570.812 343.059 570.812 cv
cp
343.061 479.524 mo
317.015 479.524 295.855 500.629 295.855 526.782 cv
295.855 552.828 317.015 573.932 343.061 573.932 cv
369.133 573.932 390.238 552.828 390.238 526.782 cv
390.238 500.629 369.133 479.524 343.061 479.524 cv
cp
ef
398.714 592.659 mo
398.714 591.692 li
398.714 584.765 393.074 579.125 386.093 579.125 cv
222.542 579.125 li
213.117 579.125 li
49.5942 579.125 li
42.6392 579.125 37.001 584.765 37.001 591.692 cv
37.001 592.659 li
29.4282 592.659 li
29.4282 602.702 li
406.339 602.702 li
406.339 592.659 li
398.714 592.659 li
cp
0 0 1 .1 cmyk
f
190.644 545.669 mo
190.644 545.674 190.642 545.68 190.643 545.685 cv
190.626 545.663 190.603 545.638 190.589 545.616 cv
190.644 545.669 li
cp
258.255 559.256 mo
257.341 558.182 255.516 557 254.039 556.196 cv
253.019 555.604 li
267.33 543.415 280.326 526.712 277.883 506.52 cv
275.896 490.517 263.114 481.818 247.944 483.213 cv
237.659 483.213 li
236.774 482.569 236.451 481.71 236.451 480.744 cv
236.451 479.831 236.907 479.024 237.687 478.649 cv
237.767 478.273 li
245.769 478.273 li
248.695 478.273 251.166 475.964 251.166 472.903 cv
251.166 470.002 248.695 467.64 245.769 467.64 cv
219.965 467.64 li
215.803 467.64 li
189.865 467.64 li
187.018 467.64 184.602 470.002 184.602 472.903 cv
184.602 475.964 187.018 478.273 189.865 478.273 cv
197.92 478.273 li
197.974 478.649 li
198.779 479.024 199.209 479.831 199.209 480.744 cv
199.209 481.71 198.94 482.569 198.081 483.213 cv
187.717 483.213 li
172.572 481.818 159.845 490.517 157.778 506.52 cv
155.307 526.712 168.41 543.415 182.641 555.604 cv
181.676 556.196 li
180.225 557 178.318 558.182 177.405 559.256 cv
174.291 563.176 172.519 567.418 167.282 568.493 cv
166.263 568.762 164.355 568.815 164.355 568.815 cv
164.355 579.878 li
271.304 579.878 li
271.304 568.815 li
271.304 568.815 269.425 568.762 268.458 568.493 cv
263.142 567.418 261.315 563.176 258.255 559.256 cv
cp
ef
131.651 293.161 mo
131.651 245.097 170.612 206.056 218.703 206.056 cv
266.82 206.056 305.835 245.097 305.835 293.161 cv
305.835 341.333 266.82 380.266 218.703 380.266 cv
170.612 380.266 131.651 341.333 131.651 293.161 cv
cp
.15 1 1 0 cmyk
ef
274.929 274.473 mo
274.714 274.902 li
262.47 268.887 262.604 270.606 250.064 273.399 cv
239.485 275.869 237.149 274.956 226.437 273.72 cv
223.696 272.7 li
223.455 271.68 223.134 270.659 222.649 269.8 cv
222.918 269.102 223.348 268.028 223.696 266.793 cv
224.046 267.116 224.61 267.383 225.065 267.545 cv
225.55 267.867 228.691 268.887 228.691 268.887 cv
228.101 267.383 226.248 264.377 229.013 263.195 cv
229.819 263.625 232.45 264.591 235.914 265.772 cv
246.091 268.941 250.655 269.854 260.939 267.383 cv
262.47 267.116 267.571 265.665 268.968 265.772 cv
273.613 266.095 276.647 270.122 274.929 274.473 cv
cp
266.874 325.758 mo
263.974 331.88 267.356 334.029 266.713 336.66 cv
266.579 337.197 263.651 335.639 262.147 335.693 cv
260.269 335.854 258.926 336.284 257.69 336.713 cv
257.449 336.5 li
256.831 336.016 256.724 335.263 256.804 334.458 cv
258.926 331.129 261.477 330 260.939 325.006 cv
259.784 325.006 li
258.2 325.006 256.482 324.2 256.187 323.288 cv
256.831 320.979 259.731 318.883 260.456 316.252 cv
260.751 316.252 260.939 316.252 261.262 316.252 cv
262.524 319.045 266.874 323.019 267.33 324.416 cv
267.25 324.846 267.115 325.275 266.874 325.758 cv
cp
237.042 247.836 mo
237.525 247.889 237.901 248.051 238.304 248.051 cv
238.251 248.051 li
237.312 248.104 235.619 248.373 234.841 248.641 cv
234.411 248.803 li
235.001 248.051 235.995 247.836 237.042 247.836 cv
cp
243.138 252.401 mo
245.526 251.649 246.011 250.951 246.279 248.427 cv
247.944 250.414 249.125 253.098 249.339 255.676 cv
252.696 254.979 253.286 253.744 254.415 250.79 cv
254.71 249.93 li
256.375 252.131 259.06 255.676 262.147 255.3 cv
262.524 254.709 262.953 254.12 263.437 253.528 cv
265.103 254.872 266.82 255.946 268.78 256.75 cv
266.632 256.965 263.974 257.288 261.235 257.502 cv
254.897 258.147 246.091 259.275 241.902 253.098 cv
241.661 252.884 240.506 250.252 240.506 250.252 cv
238.251 254.12 li
238.251 253.744 238.251 253.368 238.251 253.098 cv
238.251 251.704 238.681 249.447 238.813 248.266 cv
240.882 248.91 242.224 250.36 243.138 252.401 cv
cp
288.247 324.416 mo
285.777 323.986 282.206 321.731 281.239 319.42 cv
280.272 317.059 281.507 312.655 283.575 307.338 cv
287.334 297.671 291.55 291.174 284.246 281.401 cv
284.058 281.024 li
285.616 276.621 287.495 272.11 286.152 267.168 cv
285.239 263.84 282.528 260.295 278.876 258.308 cv
281.562 257.717 283.87 256.321 284.246 253.69 cv
285.239 247.299 276.379 243.486 274.58 249.77 cv
274.177 250.145 li
273.613 250.038 271.197 248.319 270.874 248.051 cv
260.618 240.64 250.44 236.612 237.312 237.793 cv
229.335 238.331 225.389 241.284 223.563 244.776 cv
222.542 242.305 221.334 241.177 218.542 239.297 cv
218.542 241.768 li
218.542 242.573 216.285 244.077 215.695 244.399 cv
214.111 242.358 211.131 239.244 208.445 239.244 cv
206.889 239.244 li
207.264 241.284 207.479 242.25 206.189 244.13 cv
205.895 244.56 li
203.8 241.661 202.297 240.694 198.672 240.049 cv
198.94 242.735 199.209 244.453 196.953 246.333 cv
194.322 243.486 192.576 242.144 188.414 242.788 cv
189.569 245.313 189.569 245.795 187.932 248.051 cv
187.662 248.373 li
187.341 248.427 li
185.192 249.447 182.641 249.608 180.439 249.93 cv
175.472 242.358 168.679 248.051 169.189 252.884 cv
169.618 257.932 174.291 258.415 174.881 261.422 cv
174.398 261.422 173.861 261.422 173.217 261.37 cv
172.84 260.993 172.303 260.563 171.713 259.973 cv
171.096 259.275 169.27 256.913 169.27 256.913 cv
169.27 256.913 167.928 259.758 167.712 260.993 cv
166.88 265.021 168.706 267.706 172.143 268.672 cv
171.955 270.606 174.236 272.7 174.022 273.399 cv
173.377 276.191 174.398 276.191 172.25 278.393 cv
174.452 281.561 176.814 280.327 179.58 278.553 cv
180.011 280.272 181.139 280.755 182.641 280.971 cv
183.394 280.218 184.172 279.467 185.031 278.823 cv
185.192 279.467 185.514 280.272 186.105 280.917 cv
183.796 282.258 181.566 283.87 179.66 285.858 cv
177.029 288.542 174.452 295.309 174.022 300.196 cv
172.008 299.659 168.41 295.202 167.82 294.342 cv
166.263 293 li
166.316 292.571 166.396 292.194 166.396 291.872 cv
166.396 288.167 163.336 286.555 160.328 286.288 cv
159.845 286.288 li
159.898 277.211 163.443 243.056 167.928 233.766 cv
169.377 230.919 li
166.504 232.316 li
150.474 240.694 147.789 275.385 147.601 285.858 cv
147.306 285.858 147.037 285.911 146.876 286.073 cv
144.567 286.663 142.284 288.112 141.962 290.69 cv
141.748 293.538 142.526 295.739 145.265 297.081 cv
145.077 297.403 li
143.626 300.356 144.433 302.29 146.07 303.741 cv
144.916 306.425 145.426 308.466 146.876 309.702 cv
144.056 311.795 143.573 315.662 147.037 318.026 cv
142.284 320.442 141.103 326.51 150.716 328.175 cv
149.293 330.914 150.286 335.263 155.737 335.263 cv
161.483 335.263 162.1 330.967 160.436 328.229 cv
168.679 326.94 168.625 322.052 165.322 319.045 cv
166.504 319.045 167.847 318.616 168.786 318.132 cv
170.129 320.227 171.928 322.106 173.432 323.502 cv
175.311 325.275 177.459 326.886 177.459 326.886 cv
180.762 325.758 183.259 324.2 185.702 321.461 cv
186.374 321.731 li
187.555 322.268 189.006 322.858 189.623 323.18 cv
190.857 325.275 191.879 326.94 191.879 328.389 cv
191.879 330.163 191.449 335.479 190.67 337.25 cv
188.817 338.54 185.998 335.747 182.454 336.821 cv
178.882 337.841 172.063 346.971 181.299 349.442 cv
183.394 346.864 li
184.172 347.669 184.924 349.764 187.287 349.548 cv
187.662 348.313 187.771 348.153 188.629 347.293 cv
189.328 348.636 190.912 349.764 193.408 349.764 cv
193.704 349.764 li
196.523 348.636 198.376 345.36 200.631 347.669 cv
201.195 348.313 li
202.297 349.387 203.531 350.623 205.277 349.924 cv
210.432 347.831 205.52 341.333 205.895 338.164 cv
207.908 335.962 212.875 335.372 212.875 329.463 cv
212.875 327.423 li
209.869 328.605 203.881 331.183 206.566 324.737 cv
206.619 325.006 li
220.421 323.502 225.12 321.515 235.538 315.448 cv
234.626 323.019 237.202 324.362 241.258 330.86 cv
242.493 332.471 242.332 335.372 241.526 337.25 cv
239.108 337.626 236.451 336.176 234.034 337.143 cv
229.927 338.378 225.389 350.193 232.128 350.946 cv
232.504 351.106 233.444 350.946 233.444 350.946 cv
234.841 348.797 li
235.808 350.193 237.042 350.946 238.788 350.623 cv
239.539 350.085 240.075 349.442 240.56 348.744 cv
241.795 350.193 243.325 350.569 245.231 349.924 cv
245.526 349.173 246.333 347.669 247.003 346.864 cv
247.407 351.266 251.407 349.602 254.093 347.401 cv
254.28 347.669 254.36 347.991 254.656 348.153 cv
256.241 349.817 258.523 349.173 260.269 347.777 cv
261.128 349.387 263.142 349.764 265.585 347.991 cv
266.444 351.428 270.552 349.173 271.948 347.293 cv
272.512 346.649 li
273.237 345.628 273.962 345.092 274.929 346.487 cv
275.306 347.079 li
277.399 350.569 280.81 347.293 282.716 345.092 cv
283.87 343.481 283.226 338.647 283.011 337.143 cv
282.528 333.975 281.185 334.029 284.246 331.343 cv
285.348 330.43 li
287.656 328.605 288.677 327.531 288.247 324.416 cv
cp
0 0 1 .1 cmyk
ef
163.336 501.794 mo
163.336 500.022 164.731 498.625 166.449 498.625 cv
168.195 498.625 169.699 500.022 169.699 501.794 cv
169.699 503.514 168.195 504.909 166.449 504.909 cv
164.731 504.909 163.336 503.514 163.336 501.794 cv
cp
172.519 501.794 mo
172.519 500.022 173.916 498.625 175.688 498.625 cv
177.459 498.625 178.803 500.022 178.803 501.794 cv
178.803 503.514 177.459 504.909 175.688 504.909 cv
173.916 504.909 172.519 503.514 172.519 501.794 cv
cp
181.676 501.794 mo
181.676 500.022 183.018 498.625 184.87 498.625 cv
186.588 498.625 187.984 500.022 187.984 501.794 cv
187.984 503.514 186.588 504.909 184.87 504.909 cv
183.018 504.909 181.676 503.514 181.676 501.794 cv
cp
190.777 501.794 mo
190.777 500.022 192.2 498.625 193.973 498.625 cv
195.719 498.625 197.221 500.022 197.221 501.794 cv
197.221 503.514 195.719 504.909 193.973 504.909 cv
192.2 504.909 190.777 503.514 190.777 501.794 cv
cp
199.961 501.794 mo
199.961 500.022 201.384 498.625 203.156 498.625 cv
204.901 498.625 206.404 500.022 206.404 501.794 cv
206.404 503.514 204.901 504.909 203.156 504.909 cv
201.384 504.909 199.961 503.514 199.961 501.794 cv
cp
209.144 501.794 mo
209.144 500.022 210.54 498.625 212.338 498.625 cv
214.111 498.625 215.507 500.022 215.507 501.794 cv
215.507 503.514 214.111 504.909 212.338 504.909 cv
210.54 504.909 209.144 503.514 209.144 501.794 cv
cp
202.242 545.508 mo
203.076 546.797 207.801 548.946 208.955 552.597 cv
210.164 556.302 206.298 555.766 206.298 555.766 cv
204.364 550.019 li
202.994 549.805 li
204.848 555.659 li
204.848 555.659 201.061 555.39 199.826 551.63 cv
198.564 548.033 202.297 546.636 202.242 545.616 cv
202.242 545.508 li
cp
190.589 545.616 mo
191.342 546.797 195.314 548.731 196.684 552.221 cv
197.974 555.927 194.805 555.659 194.805 555.659 cv
192.684 550.019 li
191.637 549.858 li
193.678 555.551 li
193.678 555.551 190.644 555.551 189.273 551.792 cv
187.932 548.247 190.751 546.797 190.644 545.669 cv
190.589 545.616 li
cp
180.547 545.669 mo
181.434 547.012 184.977 548.784 186.588 552.221 cv
188.254 555.819 185.676 555.39 185.676 555.39 cv
183.018 550.019 li
182.104 549.858 li
184.763 555.39 li
184.763 555.39 182.292 555.335 180.547 551.739 cv
178.882 548.247 180.815 546.85 180.547 545.831 cv
180.547 545.669 li
cp
272.325 501.794 mo
272.325 500.022 270.929 498.625 269.21 498.625 cv
267.437 498.625 266.015 500.022 266.015 501.794 cv
266.015 503.514 267.437 504.909 269.21 504.909 cv
270.929 504.909 272.325 503.514 272.325 501.794 cv
cp
263.222 501.794 mo
263.222 500.022 261.799 498.625 260.026 498.625 cv
258.255 498.625 256.831 500.022 256.831 501.794 cv
256.831 503.514 258.255 504.909 260.026 504.909 cv
261.799 504.909 263.222 503.514 263.222 501.794 cv
cp
254.039 501.794 mo
254.039 500.022 252.696 498.625 250.843 498.625 cv
249.125 498.625 247.675 500.022 247.675 501.794 cv
247.675 503.514 249.125 504.909 250.843 504.909 cv
252.696 504.909 254.039 503.514 254.039 501.794 cv
cp
244.855 501.794 mo
244.855 500.022 243.513 498.625 241.661 498.625 cv
239.969 498.625 238.492 500.022 238.492 501.794 cv
238.492 503.514 239.969 504.909 241.661 504.909 cv
243.513 504.909 244.855 503.514 244.855 501.794 cv
cp
235.753 501.794 mo
235.753 500.022 234.356 498.625 232.504 498.625 cv
230.732 498.625 229.335 500.022 229.335 501.794 cv
229.335 503.514 230.732 504.909 232.504 504.909 cv
234.356 504.909 235.753 503.514 235.753 501.794 cv
cp
226.569 501.794 mo
226.569 500.022 225.12 498.625 223.348 498.625 cv
221.63 498.625 220.152 500.022 220.152 501.794 cv
220.152 503.514 221.63 504.909 223.348 504.909 cv
225.12 504.909 226.569 503.514 226.569 501.794 cv
cp
217.844 545.456 mo
217.387 546.636 212.205 548.409 212.205 552.006 cv
212.258 555.766 216.903 555.659 216.903 555.659 cv
216.903 549.858 li
218.73 549.858 li
218.73 555.659 li
218.73 555.659 223.401 555.766 223.401 552.006 cv
223.455 548.409 218.326 546.636 217.844 545.616 cv
217.844 545.456 li
cp
233.444 545.508 mo
232.611 546.797 227.913 548.946 226.704 552.597 cv
225.55 556.302 229.39 555.766 229.39 555.766 cv
231.323 550.019 li
232.745 549.805 li
230.839 555.659 li
230.839 555.659 234.571 555.39 235.86 551.63 cv
237.042 548.033 233.444 546.636 233.444 545.616 cv
233.444 545.508 li
cp
245.097 545.616 mo
244.318 546.797 240.345 548.731 239.029 552.221 cv
237.767 555.927 240.882 555.659 240.882 555.659 cv
242.976 550.019 li
244.185 549.858 li
242.009 555.551 li
242.009 555.551 245.044 555.551 246.44 551.792 cv
247.729 548.247 244.989 546.797 245.044 545.669 cv
245.097 545.616 li
cp
255.167 545.669 mo
254.308 547.012 250.709 548.784 249.125 552.221 cv
247.407 555.819 249.983 555.39 249.983 555.39 cv
252.696 550.019 li
253.556 549.858 li
250.925 555.39 li
250.925 555.39 253.394 555.335 255.14 551.739 cv
256.831 548.247 254.845 546.85 255.14 545.831 cv
255.167 545.669 li
cp
202.242 567.848 mo
203.076 566.452 207.801 564.304 208.955 560.653 cv
210.164 556.947 206.298 557.538 206.298 557.538 cv
204.364 563.23 li
202.994 563.553 li
204.848 557.645 li
204.848 557.645 201.061 557.86 199.826 561.62 cv
198.564 565.271 202.297 566.56 202.242 567.634 cv
202.242 567.848 li
cp
190.589 567.741 mo
191.342 566.452 195.314 564.52 196.684 561.028 cv
197.974 557.269 194.805 557.7 194.805 557.7 cv
192.684 563.338 li
191.637 563.391 li
193.678 557.7 li
193.678 557.7 190.644 557.7 189.273 561.458 cv
187.932 565.002 190.751 566.452 190.644 567.581 cv
190.589 567.741 li
cp
180.547 567.581 mo
181.434 566.344 184.977 564.465 186.588 561.028 cv
188.254 557.43 185.676 557.806 185.676 557.806 cv
183.018 563.338 li
182.104 563.391 li
184.763 557.86 li
184.763 557.86 182.292 557.967 180.547 561.565 cv
178.882 565.002 180.815 566.344 180.547 567.473 cv
180.547 567.581 li
cp
217.844 567.848 mo
217.387 566.56 212.205 564.895 212.205 561.189 cv
212.258 557.538 216.903 557.645 216.903 557.645 cv
216.903 563.391 li
218.73 563.391 li
218.73 557.645 li
218.73 557.645 223.401 557.538 223.401 561.189 cv
223.455 564.895 218.326 566.56 217.844 567.741 cv
217.844 567.848 li
cp
233.444 567.848 mo
232.611 566.452 227.913 564.304 226.704 560.653 cv
225.55 556.947 229.39 557.538 229.39 557.538 cv
231.323 563.23 li
232.745 563.553 li
230.839 557.645 li
230.839 557.645 234.571 557.86 235.86 561.62 cv
237.042 565.271 233.444 566.56 233.444 567.634 cv
233.444 567.848 li
cp
245.097 567.741 mo
244.318 566.452 240.345 564.52 239.029 561.028 cv
237.767 557.269 240.882 557.7 240.882 557.7 cv
242.976 563.338 li
244.185 563.391 li
242.009 557.7 li
242.009 557.7 245.044 557.7 246.44 561.458 cv
247.729 565.002 244.989 566.452 245.044 567.581 cv
245.097 567.741 li
cp
255.167 567.581 mo
254.308 566.344 250.709 564.465 249.125 561.028 cv
247.407 557.43 249.983 557.806 249.983 557.806 cv
252.696 563.338 li
253.556 563.391 li
250.925 557.86 li
250.925 557.86 253.394 557.967 255.14 561.565 cv
256.831 565.002 254.845 566.344 255.14 567.473 cv
255.167 567.581 li
cp
172.063 541.374 mo
263.651 541.374 li
264.726 539.977 265.8 538.528 266.713 537.184 cv
168.947 537.184 li
169.914 538.528 170.961 539.977 172.063 541.374 cv
cp
160.14 514.684 mo
275.52 514.684 li
275.681 513.073 275.735 511.192 275.627 509.206 cv
160.086 509.206 li
159.952 511.192 160.006 513.073 160.14 514.684 cv
cp
219.965 470.057 mo
215.803 470.057 li
189.865 470.057 li
188.334 470.057 187.072 471.453 187.072 472.903 cv
187.072 474.568 188.334 475.857 189.865 475.857 cv
215.803 475.857 li
219.965 475.857 li
245.769 475.857 li
247.353 475.857 248.642 474.568 248.642 472.903 cv
248.642 471.453 247.353 470.057 245.769 470.057 cv
219.965 470.057 li
cp
219.965 478.273 mo
215.803 478.273 li
201.115 478.273 li
201.491 479.024 201.68 479.938 201.68 480.744 cv
201.68 481.549 201.491 482.409 201.168 483.213 cv
211.104 483.213 li
224.61 483.213 li
234.518 483.213 li
234.169 482.409 234.034 481.549 234.034 480.744 cv
234.034 479.938 234.222 479.024 234.571 478.273 cv
219.965 478.273 li
cp
165.484 494.383 mo
270.23 494.383 li
264.993 487.833 256.536 484.825 248.052 485.738 cv
224.61 485.738 li
211.104 485.738 li
187.609 485.738 li
179.205 484.825 170.72 487.833 165.484 494.383 cv
cp
167.282 534.661 mo
268.458 534.661 li
271.841 529.29 274.231 523.491 275.251 517.208 cv
160.436 517.208 li
161.429 523.491 163.818 529.29 167.282 534.661 cv
cp
265.53 570.266 mo
170.129 570.266 li
169.27 570.641 168.142 570.91 166.854 571.071 cv
166.854 579.878 li
164.355 579.878 li
164.355 568.815 li
164.355 568.815 166.263 568.762 167.282 568.493 cv
172.519 567.418 174.291 563.176 177.405 559.256 cv
178.318 558.182 180.225 557 181.676 556.196 cv
182.641 555.604 li
168.41 543.415 155.307 526.712 157.778 506.52 cv
159.845 490.517 172.572 481.818 187.717 483.213 cv
198.081 483.213 li
198.94 482.569 199.209 481.71 199.209 480.744 cv
199.209 479.831 198.779 479.024 197.974 478.649 cv
197.92 478.273 li
189.865 478.273 li
187.018 478.273 184.602 475.964 184.602 472.903 cv
184.602 470.002 187.018 467.64 189.865 467.64 cv
215.803 467.64 li
219.965 467.64 li
245.769 467.64 li
248.695 467.64 251.166 470.002 251.166 472.903 cv
251.166 475.964 248.695 478.273 245.769 478.273 cv
237.767 478.273 li
237.687 478.649 li
236.907 479.024 236.451 479.831 236.451 480.744 cv
236.451 481.71 236.774 482.569 237.659 483.213 cv
247.944 483.213 li
263.114 481.818 275.896 490.517 277.883 506.52 cv
280.326 526.712 267.33 543.415 253.019 555.604 cv
254.039 556.196 li
255.516 557 257.341 558.182 258.255 559.256 cv
261.315 563.176 263.142 567.418 268.458 568.493 cv
269.425 568.762 271.304 568.815 271.304 568.815 cv
271.304 579.878 li
268.833 579.878 li
268.833 571.071 li
267.571 570.91 266.444 570.641 265.53 570.266 cv
cp
0 0 0 1 cmyk
ef
127.946 448.415 mo
124.294 449.167 121.985 451.315 117.42 451.154 cv
110.681 450.939 109.203 447.395 106.143 447.018 cv
110.116 447.072 112.185 443.367 117.42 442.83 cv
118.064 442.83 118.708 442.83 119.354 442.991 cv
117.743 441.809 116.023 440.735 114.44 439.553 cv
110.681 440.09 107.7 441.702 103.135 441.272 cv
96.2075 440.735 93.8989 436.118 90.7031 435.633 cv
92.1797 433.915 96.7983 432.733 102.329 432.465 cv
103.538 432.412 104.907 432.626 106.357 433.163 cv
103.753 431.123 101.283 428.92 98.8657 426.666 cv
95.6709 427.364 93.7109 429.619 89.5757 428.975 cv
82.8896 427.846 81.1167 423.335 78.1899 422.53 cv
79.6401 421.081 84.3398 419.469 89.6289 419.792 cv
90.4351 419.792 91.3208 420.006 92.2334 420.221 cv
90.9722 419.092 89.8438 417.912 88.5552 416.516 cv
84.5542 416.086 81.0371 417.59 76.6338 416.194 cv
70.2158 414.26 69.8398 409.481 66.9131 408.299 cv
68.6313 407.01 73.2236 406.958 78.4854 407.87 cv
79.6938 408.084 81.0098 408.675 82.1909 409.319 cv
80.1772 407.064 78.2446 404.701 76.2837 402.231 cv
72.1221 401.318 68.0942 403.573 63.5562 401.425 cv
57.0049 398.149 56.5488 391.383 53.6484 389.611 cv
55.6895 388.59 61.731 388.913 67.1816 390.685 cv
67.6108 390.954 68.0942 391.115 68.5776 391.383 cv
67.3428 389.665 66.188 388 65.1411 386.227 cv
61.0864 384.885 57.8647 387.14 53.4067 384.241 cv
46.9092 380.213 47.0435 374.52 44.3047 372.264 cv
46.291 372.641 51.3657 371.352 56.8706 373.929 cv
57.4883 374.198 58.1064 374.574 58.7231 374.95 cv
57.8647 373.338 li
56.7095 371.782 55.3667 369.903 54.2129 367.969 cv
50.9634 366.518 47.8223 367.7 44.4658 364.8 cv
39.3906 360.29 39.7124 355.67 37.6724 353.307 cv
39.6587 352.879 44.7339 352.825 49.1108 355.778 cv
49.4331 356.047 49.7012 356.262 50.0776 356.53 cv
49.5942 355.402 49.1108 354.167 48.6807 352.932 cv
45.7539 352.019 42.9082 352.825 39.7661 350.085 cv
34.7451 345.628 35.1748 343.963 33.1338 341.655 cv
34.6377 341.333 37.5645 339.667 40.8672 340.096 cv
39.229 339.238 37.7798 338.271 36.3296 336.66 cv
32.4897 332.686 33.2422 327.746 32.6514 325.543 cv
34.5576 325.275 37.2427 325.49 41.1089 327.906 cv
40.8672 326.564 40.5723 325.33 40.2495 324.093 cv
37.9404 323.019 34.7993 323.502 32.6514 320.817 cv
30.2344 317.81 29.5093 316.252 26.7969 315.125 cv
27.9517 313.407 31.7383 311.366 36.1689 314.32 cv
37.2427 315.071 38.2358 316.252 39.1221 317.649 cv
38.7192 315.125 38.3706 312.655 38.0479 310.131 cv
36.6523 309.057 34.2622 311.043 31.5229 308.627 cv
26.4219 304.117 27.2002 303.15 25.0786 300.84 cv
26.2334 300.679 28.4351 299.336 30.9595 298.854 cv
27.8447 295.469 28.3281 289.939 28.7578 288.005 cv
30.7441 287.629 31.6309 289.348 35.9805 292.355 cv
36.3296 292.463 36.6523 292.731 36.894 293.108 cv
36.894 292.086 36.894 291.067 36.9736 290.045 cv
35.7119 287.2 32.5967 285.052 30.8521 281.615 cv
27.8447 276.245 30.1533 271.196 30.5835 269.264 cv
32.6514 268.78 35.1748 270.767 38.5313 274.956 cv
38.6387 275.224 38.854 275.547 38.9609 275.869 cv
39.2837 274.151 39.6587 272.54 40.0352 270.821 cv
37.7798 268.887 34.9331 268.458 33.1338 264.86 cv
30.2344 258.738 32.9731 254.709 31.9526 251.756 cv
32.7588 251.971 33.8862 252.561 34.9604 253.635 cv
34.7993 249.018 37.0811 246.17 38.1016 243.862 cv
40.0078 244.56 42.3438 248.266 44.3584 252.991 cv
44.7339 250.575 44.6001 249.178 44.8955 247.46 cv
43.3379 243.702 39.3906 242.25 38.6387 237.526 cv
37.4844 230.919 41.915 227 41.7808 223.831 cv
43.6597 224.852 46.8555 229.041 48.4126 234.034 cv
48.5737 234.463 48.6274 234.84 48.6807 235.377 cv
49.1108 234.357 49.6475 233.069 50.2383 231.672 cv
49.1108 228.45 46.3447 226.838 46.4258 222.596 cv
46.479 215.776 49.7549 213.251 50.1582 210.137 cv
51.8228 211.48 54.1318 215.883 54.7495 221.146 cv
55.0449 220.555 li
55.6895 218.784 56.3335 217.226 57.1929 215.4 cv
56.2261 212.553 53.4067 211.157 53.4067 207.292 cv
53.4878 200.524 55.7427 198.215 56.1729 195.1 cv
57.7837 196.389 61.8379 199.773 62.5361 205.036 cv
62.5903 205.519 li
63.0195 204.766 63.5029 203.961 63.9863 203.262 cv
64.7383 201.598 65.7578 199.773 66.8594 198.162 cv
65.6245 195.1 62.9121 193.596 63.1812 189.408 cv
63.3955 184.521 64.7383 183.34 66.3223 180.87 cv
67.9604 182.104 70.8335 184.79 71.5044 190.106 cv
71.666 190.858 71.6123 191.663 71.397 192.629 cv
72.1758 191.502 72.9546 190.643 73.7061 189.624 cv
73.5986 186.401 72.9546 184.307 73.3306 181.03 cv
74.0283 174.372 76.1768 171.149 79.3452 169.323 cv
80.5537 170.559 82.0835 174.372 82.3525 178.882 cv
82.8896 178.345 li
84.6616 176.197 li
84.5542 173.458 84.0435 171.525 84.3936 168.679 cv
85.0913 162.02 87.293 158.797 90.4351 156.918 cv
91.6162 158.207 94.2739 161.912 92.8511 166.745 cv
93.4692 166.208 94.0596 165.671 94.7573 165.242 cv
95.5635 164.329 96.4224 163.523 97.2817 162.665 cv
97.2007 162.665 97.0674 162.825 97.0674 162.825 cv
97.2817 162.449 li
97.2817 159.71 95.1338 159.066 95.4019 156.328 cv
96.2075 149.614 99.457 145.533 102.571 143.814 cv
104.102 145.158 107.109 150.849 103.941 156.166 cv
104.424 155.737 104.961 155.468 105.552 155.146 cv
106.572 154.34 107.592 153.427 108.666 152.515 cv
108.828 150.313 107.431 148.863 108.156 146.446 cv
110.037 140.109 113.473 137.531 116.883 136.35 cv
117.85 137.747 119.515 141.72 117.743 145.318 cv
118.011 145.318 li
118.978 144.621 119.971 143.868 120.991 143.117 cv
121.125 141.345 120.75 139.733 121.367 137.209 cv
122.388 132.752 124.375 131.356 127.73 130.067 cv
128.697 131.356 129.45 134.255 128.375 137.317 cv
128.805 137.209 129.288 136.994 129.825 136.994 cv
132.242 135.437 li
132.618 133.665 131.222 132.645 132.242 129.852 cv
133.397 126.737 135.33 125.019 138.74 123.73 cv
139.492 124.912 140.244 127.221 139.116 129.906 cv
140.941 127.918 142.606 125.824 144.781 124.213 cv
147.413 122.334 153.615 122.871 153.669 123.032 cv
153.669 123.193 149.695 128.134 146.876 128.832 cv
144.593 129.315 140.888 130.98 138.472 132 cv
143.143 129.906 145.479 132.107 146.661 133.719 cv
143.493 136.35 139.76 135.706 137.881 135.706 cv
135.545 135.759 136.699 134.846 134.336 135.437 cv
133.719 135.974 133.289 136.619 132.752 137.263 cv
135.92 137.747 138.552 138.713 138.552 138.713 cv
138.552 138.713 137.021 142.204 133.155 142.848 cv
129.396 143.654 129.288 142.311 127.167 142.473 cv
125.932 142.526 124.777 142.848 124.052 143.117 cv
123.354 143.654 li
122.764 144.137 122.227 144.621 121.744 145.05 cv
125.502 145.05 128.913 145.802 128.913 145.802 cv
128.913 145.802 127.597 149.883 121.233 150.796 cv
114.761 151.602 117.313 151.011 114.923 150.849 cv
114.386 150.849 113.795 150.849 113.338 151.011 cv
111.969 151.978 li
110.412 153.589 li
115.407 152.998 117.206 155.844 117.206 155.844 cv
117.206 155.844 113.903 159.871 110.277 161.537 cv
107.109 162.879 103.672 161.537 101.497 161 cv
100.853 161.537 100.262 162.235 99.5371 162.825 cv
103.484 162.181 106.68 164.49 106.68 164.49 cv
106.68 164.49 104.639 168.679 101.847 170.29 cv
99.0811 171.955 97.0674 170.666 92.8511 170.666 cv
92.5557 170.666 92.2334 170.666 91.8843 170.72 cv
90.9722 171.793 90.1123 172.814 89.1191 173.781 cv
88.6089 174.532 li
92.7441 173.351 97.8726 175.285 97.8726 175.285 cv
97.8726 175.285 95.9932 178.882 92.3677 180.493 cv
88.8232 181.997 88.1523 179.688 82.9434 181.083 cv
82.272 181.729 li
82.1372 182.749 81.6538 183.77 81.1167 184.628 cv
84.0435 184.36 87.6689 185.327 87.6689 185.327 cv
87.6689 185.327 86.7295 190.268 83.1851 192.092 cv
81.3584 193.114 75.9351 193.167 73.1689 193.221 cv
72.9009 193.329 li
71.9341 194.51 li
75.9351 194.026 80.1235 197.516 80.1235 197.516 cv
80.1235 197.516 76.0957 202.78 72.1221 205.036 cv
68.1479 207.344 65.0063 205.036 65.0063 205.036 cv
64.3623 205.68 li
63.7446 206.754 63.0728 207.881 62.4824 209.116 cv
65.3291 208.096 70.9673 210.567 70.9673 210.567 cv
70.9673 210.567 71.209 215.4 65.0063 217.226 cv
61.999 218.032 59.6362 216.473 59.6362 216.473 cv
58.7231 216.958 li
58.1597 218.407 57.623 219.965 57.0859 221.36 cv
56.8706 222.059 56.4409 222.596 56.1729 223.241 cv
56.2798 223.026 56.4409 222.864 56.5488 222.756 cv
60.4414 219.588 66.376 220.932 68.3896 221.039 cv
65.8389 222.489 66.8057 227.107 61.999 229.845 cv
58.5889 231.672 54.6963 230.598 51.8491 232.423 cv
50.8823 234.948 50.0776 237.526 49.2988 240.103 cv
52.6553 236.612 58.1064 237.096 60.0664 235.861 cv
58.9648 238.653 59.5293 244.453 55.0986 247.836 cv
52.0645 250.252 48.332 250.306 46.291 252.24 cv
46.0229 254.12 45.5933 256.106 45.1636 258.04 cv
44.8955 259.597 li
47.9023 256.59 52.7896 256.213 54.4546 255.837 cv
52.4399 257.987 54.8833 262.926 51.0444 266.9 cv
48.144 269.854 44.3047 270.767 41.8604 273.184 cv
40.8672 277.963 40.0078 282.795 39.5254 287.629 cv
39.8208 284.407 40.5186 279.144 42.3438 276.245 cv
45.0024 272.11 50.9907 271.518 52.9233 271.036 cv
52.9233 273.989 53.353 278.823 49.5942 282.85 cv
48.52 283.924 47.2314 284.784 46.0229 285.481 cv
46.291 288.274 47.7139 292.141 46.1841 296.114 cv
44.6001 300.196 41.0557 301.216 39.874 304.385 cv
40.0352 306.264 li
41.4854 303.525 48.7344 299.712 50.3457 298.532 cv
50.3457 301.055 51.9565 305.083 50.0776 310.292 cv
48.6274 313.89 43.0688 313.407 41.3506 316.844 cv
41.8604 319.958 42.3975 323.18 43.0688 326.134 cv
43.1226 325.758 43.1226 325.33 43.2573 324.953 cv
44.1431 320.173 47.1235 315.824 48.6807 314.588 cv
49.5942 316.628 52.0645 322.858 51.0444 327.584 cv
50.2383 331.183 47.1235 332.417 46.0229 335.103 cv
46.9092 338.164 47.3926 341.493 47.4722 342.997 cv
47.9556 344.178 li
47.9556 343.641 47.9556 343.159 48.0903 342.622 cv
48.9497 337.626 53.2725 333.759 54.8296 332.471 cv
56.3335 334.62 58.8579 339.882 56.8706 345.092 cv
55.4746 348.636 52.3062 349.71 50.7217 352.233 cv
51.2588 353.577 51.7422 354.866 52.3062 356.262 cv
52.9771 354.329 53.9712 352.717 54.2129 351.965 cv
54.3735 352.61 54.8833 353.577 55.4746 354.49 cv
57.4346 351.697 60.4961 349.924 61.5156 348.797 cv
60.9248 352.288 63.6099 355.348 62.375 361.631 cv
62.1069 362.867 61.8916 363.887 61.731 365.014 cv
61.999 365.981 62.3213 366.788 62.4824 367.7 cv
62.9121 370.815 61.2476 371.942 60.3877 373.5 cv
61.7847 376.131 63.1812 378.655 64.6577 381.018 cv
64.228 375.647 68.6313 369.418 69.9741 367.7 cv
70.5386 370.815 75.3716 375.647 74.7534 381.716 cv
74.2974 386.173 71.397 388.321 71.6123 391.92 cv
72.7935 393.692 73.9214 395.357 75.1563 396.968 cv
73.9214 391.92 78.1899 385.852 79.1035 384.026 cv
79.3452 387.086 83.9102 390.469 84.2852 396.001 cv
84.3936 400.137 83.8027 404.808 84.3398 408.675 cv
85.333 409.803 li
83.8564 405.292 86.8096 400.458 87.481 398.741 cv
88.1523 401.586 93.4692 403.305 94.5693 408.836 cv
95.3481 413.132 92.2876 415.442 94.0596 419.362 cv
95.4561 420.866 96.9058 422.208 98.3022 423.551 cv
96.2612 418.878 98.8657 413.455 99.457 411.467 cv
100.369 414.475 105.015 415.496 106.572 421.081 cv
107.808 425.483 107.217 429.082 108.613 432.626 cv
110.116 433.807 111.593 434.989 113.043 436.063 cv
112.453 435.472 111.916 434.881 111.593 434.129 cv
109.203 429.78 111.701 424.195 112.185 422.261 cv
113.097 425.108 119.112 426.666 120.75 431.982 cv
122.146 436.278 121.555 439.823 123.247 443.152 cv
124.777 444.226 126.308 445.139 127.946 446.105 cv
127.597 445.836 127.462 445.676 127.355 445.354 cv
124.32 441.434 126.012 435.633 126.2 433.54 cv
127.543 436.278 132.135 436.493 134.578 441.487 cv
136.404 445.354 136.404 448.737 138.23 451.852 cv
140.002 452.657 li
154.152 457.598 163.98 457.812 180.547 459.639 cv
189.328 459.209 198.295 467.317 198.295 467.317 cv
198.295 467.317 198.43 468.661 193.113 467.317 cv
191.637 464.204 180.977 462.11 178.936 462.807 cv
162.691 461.036 152.273 459.047 141.908 455.61 cv
138.9 457.007 137.639 459.799 133.397 460.283 cv
126.63 461.036 123.783 456.954 120.642 456.954 cv
121.744 455.182 125.932 453.301 131.141 452.121 cv
132.081 451.852 133.047 451.852 134.041 451.852 cv
132 450.778 129.933 449.596 127.946 448.415 cv
cp
0 0 1 .1 cmyk
f
1 lw
127.946 448.415 mo
124.294 449.167 121.985 451.315 117.42 451.154 cv
110.681 450.939 109.203 447.395 106.143 447.018 cv
110.116 447.072 112.185 443.367 117.42 442.83 cv
118.064 442.83 118.708 442.83 119.354 442.991 cv
117.743 441.809 116.023 440.735 114.44 439.553 cv
110.681 440.09 107.7 441.702 103.135 441.272 cv
96.2075 440.735 93.8989 436.118 90.7031 435.633 cv
92.1797 433.915 96.7983 432.733 102.329 432.465 cv
103.538 432.412 104.907 432.626 106.357 433.163 cv
103.753 431.123 101.283 428.92 98.8657 426.666 cv
95.6709 427.364 93.7109 429.619 89.5757 428.975 cv
82.8896 427.846 81.1167 423.335 78.1899 422.53 cv
79.6401 421.081 84.3398 419.469 89.6289 419.792 cv
90.4351 419.792 91.3208 420.006 92.2334 420.221 cv
90.9722 419.092 89.8438 417.912 88.5552 416.516 cv
84.5542 416.086 81.0371 417.59 76.6338 416.194 cv
70.2158 414.26 69.8398 409.481 66.9131 408.299 cv
68.6313 407.01 73.2236 406.958 78.4854 407.87 cv
79.6938 408.084 81.0098 408.675 82.1909 409.319 cv
80.1772 407.064 78.2446 404.701 76.2837 402.231 cv
72.1221 401.318 68.0942 403.573 63.5562 401.425 cv
57.0049 398.149 56.5488 391.383 53.6484 389.611 cv
55.6895 388.59 61.731 388.913 67.1816 390.685 cv
67.6108 390.954 68.0942 391.115 68.5776 391.383 cv
67.3428 389.665 66.188 388 65.1411 386.227 cv
61.0864 384.885 57.8647 387.14 53.4067 384.241 cv
46.9092 380.213 47.0435 374.52 44.3047 372.264 cv
46.291 372.641 51.3657 371.352 56.8706 373.929 cv
57.4883 374.198 58.1064 374.574 58.7231 374.95 cv
57.8647 373.338 li
56.7095 371.782 55.3667 369.903 54.2129 367.969 cv
50.9634 366.518 47.8223 367.7 44.4658 364.8 cv
39.3906 360.29 39.7124 355.67 37.6724 353.307 cv
39.6587 352.879 44.7339 352.825 49.1108 355.778 cv
49.4331 356.047 49.7012 356.262 50.0776 356.53 cv
49.5942 355.402 49.1108 354.167 48.6807 352.932 cv
45.7539 352.019 42.9082 352.825 39.7661 350.085 cv
34.7451 345.628 35.1748 343.963 33.1338 341.655 cv
34.6377 341.333 37.5645 339.667 40.8672 340.096 cv
39.229 339.238 37.7798 338.271 36.3296 336.66 cv
32.4897 332.686 33.2422 327.746 32.6514 325.543 cv
34.5576 325.275 37.2427 325.49 41.1089 327.906 cv
40.8672 326.564 40.5723 325.33 40.2495 324.093 cv
37.9404 323.019 34.7993 323.502 32.6514 320.817 cv
30.2344 317.81 29.5093 316.252 26.7969 315.125 cv
27.9517 313.407 31.7383 311.366 36.1689 314.32 cv
37.2427 315.071 38.2358 316.252 39.1221 317.649 cv
38.7192 315.125 38.3706 312.655 38.0479 310.131 cv
36.6523 309.057 34.2622 311.043 31.5229 308.627 cv
26.4219 304.117 27.2002 303.15 25.0786 300.84 cv
26.2334 300.679 28.4351 299.336 30.9595 298.854 cv
27.8447 295.469 28.3281 289.939 28.7578 288.005 cv
30.7441 287.629 31.6309 289.348 35.9805 292.355 cv
36.3296 292.463 36.6523 292.731 36.894 293.108 cv
36.894 292.086 36.894 291.067 36.9736 290.045 cv
35.7119 287.2 32.5967 285.052 30.8521 281.615 cv
27.8447 276.245 30.1533 271.196 30.5835 269.264 cv
32.6514 268.78 35.1748 270.767 38.5313 274.956 cv
38.6387 275.224 38.854 275.547 38.9609 275.869 cv
39.2837 274.151 39.6587 272.54 40.0352 270.821 cv
37.7798 268.887 34.9331 268.458 33.1338 264.86 cv
30.2344 258.738 32.9731 254.709 31.9526 251.756 cv
32.7588 251.971 33.8862 252.561 34.9604 253.635 cv
34.7993 249.018 37.0811 246.17 38.1016 243.862 cv
40.0078 244.56 42.3438 248.266 44.3584 252.991 cv
44.7339 250.575 44.6001 249.178 44.8955 247.46 cv
43.3379 243.702 39.3906 242.25 38.6387 237.526 cv
37.4844 230.919 41.915 227 41.7808 223.831 cv
43.6597 224.852 46.8555 229.041 48.4126 234.034 cv
48.5737 234.463 48.6274 234.84 48.6807 235.377 cv
49.1108 234.357 49.6475 233.069 50.2383 231.672 cv
49.1108 228.45 46.3447 226.838 46.4258 222.596 cv
46.479 215.776 49.7549 213.251 50.1582 210.137 cv
51.8228 211.48 54.1318 215.883 54.7495 221.146 cv
55.0449 220.555 li
55.6895 218.784 56.3335 217.226 57.1929 215.4 cv
56.2261 212.553 53.4067 211.157 53.4067 207.292 cv
53.4878 200.524 55.7427 198.215 56.1729 195.1 cv
57.7837 196.389 61.8379 199.773 62.5361 205.036 cv
62.5903 205.519 li
63.0195 204.766 63.5029 203.961 63.9863 203.262 cv
64.7383 201.598 65.7578 199.773 66.8594 198.162 cv
65.6245 195.1 62.9121 193.596 63.1812 189.408 cv
63.3955 184.521 64.7383 183.34 66.3223 180.87 cv
67.9604 182.104 70.8335 184.79 71.5044 190.106 cv
71.666 190.858 71.6123 191.663 71.397 192.629 cv
72.1758 191.502 72.9546 190.643 73.7061 189.624 cv
73.5986 186.401 72.9546 184.307 73.3306 181.03 cv
74.0283 174.372 76.1768 171.149 79.3452 169.323 cv
80.5537 170.559 82.0835 174.372 82.3525 178.882 cv
82.8896 178.345 li
84.6616 176.197 li
84.5542 173.458 84.0435 171.525 84.3936 168.679 cv
85.0913 162.02 87.293 158.797 90.4351 156.918 cv
91.6162 158.207 94.2739 161.912 92.8511 166.745 cv
93.4692 166.208 94.0596 165.671 94.7573 165.242 cv
95.5635 164.329 96.4224 163.523 97.2817 162.665 cv
97.2007 162.665 97.0674 162.825 97.0674 162.825 cv
97.2817 162.449 li
97.2817 159.71 95.1338 159.066 95.4019 156.328 cv
96.2075 149.614 99.457 145.533 102.571 143.814 cv
104.102 145.158 107.109 150.849 103.941 156.166 cv
104.424 155.737 104.961 155.468 105.552 155.146 cv
106.572 154.34 107.592 153.427 108.666 152.515 cv
108.828 150.313 107.431 148.863 108.156 146.446 cv
110.037 140.109 113.473 137.531 116.883 136.35 cv
117.85 137.747 119.515 141.72 117.743 145.318 cv
118.011 145.318 li
118.978 144.621 119.971 143.868 120.991 143.117 cv
121.125 141.345 120.75 139.733 121.367 137.209 cv
122.388 132.752 124.375 131.356 127.73 130.067 cv
128.697 131.356 129.45 134.255 128.375 137.317 cv
128.805 137.209 129.288 136.994 129.825 136.994 cv
132.242 135.437 li
132.618 133.665 131.222 132.645 132.242 129.852 cv
133.397 126.737 135.33 125.019 138.74 123.73 cv
139.492 124.912 140.244 127.221 139.116 129.906 cv
140.941 127.918 142.606 125.824 144.781 124.213 cv
147.413 122.334 153.615 122.871 153.669 123.032 cv
153.669 123.193 149.695 128.134 146.876 128.832 cv
144.593 129.315 140.888 130.98 138.472 132 cv
143.143 129.906 145.479 132.107 146.661 133.719 cv
143.493 136.35 139.76 135.706 137.881 135.706 cv
135.545 135.759 136.699 134.846 134.336 135.437 cv
133.719 135.974 133.289 136.619 132.752 137.263 cv
135.92 137.747 138.552 138.713 138.552 138.713 cv
138.552 138.713 137.021 142.204 133.155 142.848 cv
129.396 143.654 129.288 142.311 127.167 142.473 cv
125.932 142.526 124.777 142.848 124.052 143.117 cv
123.354 143.654 li
122.764 144.137 122.227 144.621 121.744 145.05 cv
125.502 145.05 128.913 145.802 128.913 145.802 cv
128.913 145.802 127.597 149.883 121.233 150.796 cv
114.761 151.602 117.313 151.011 114.923 150.849 cv
114.386 150.849 113.795 150.849 113.338 151.011 cv
111.969 151.978 li
110.412 153.589 li
115.407 152.998 117.206 155.844 117.206 155.844 cv
117.206 155.844 113.903 159.871 110.277 161.537 cv
107.109 162.879 103.672 161.537 101.497 161 cv
100.853 161.537 100.262 162.235 99.5371 162.825 cv
103.484 162.181 106.68 164.49 106.68 164.49 cv
106.68 164.49 104.639 168.679 101.847 170.29 cv
99.0811 171.955 97.0674 170.666 92.8511 170.666 cv
92.5557 170.666 92.2334 170.666 91.8843 170.72 cv
90.9722 171.793 90.1123 172.814 89.1191 173.781 cv
88.6089 174.532 li
92.7441 173.351 97.8726 175.285 97.8726 175.285 cv
97.8726 175.285 95.9932 178.882 92.3677 180.493 cv
88.8232 181.997 88.1523 179.688 82.9434 181.083 cv
82.272 181.729 li
82.1372 182.749 81.6538 183.77 81.1167 184.628 cv
84.0435 184.36 87.6689 185.327 87.6689 185.327 cv
87.6689 185.327 86.7295 190.268 83.1851 192.092 cv
81.3584 193.114 75.9351 193.167 73.1689 193.221 cv
72.9009 193.329 li
71.9341 194.51 li
75.9351 194.026 80.1235 197.516 80.1235 197.516 cv
80.1235 197.516 76.0957 202.78 72.1221 205.036 cv
68.1479 207.344 65.0063 205.036 65.0063 205.036 cv
64.3623 205.68 li
63.7446 206.754 63.0728 207.881 62.4824 209.116 cv
65.3291 208.096 70.9673 210.567 70.9673 210.567 cv
70.9673 210.567 71.209 215.4 65.0063 217.226 cv
61.999 218.032 59.6362 216.473 59.6362 216.473 cv
58.7231 216.958 li
58.1597 218.407 57.623 219.965 57.0859 221.36 cv
56.8706 222.059 56.4409 222.596 56.1729 223.241 cv
56.2798 223.026 56.4409 222.864 56.5488 222.756 cv
60.4414 219.588 66.376 220.932 68.3896 221.039 cv
65.8389 222.489 66.8057 227.107 61.999 229.845 cv
58.5889 231.672 54.6963 230.598 51.8491 232.423 cv
50.8823 234.948 50.0776 237.526 49.2988 240.103 cv
52.6553 236.612 58.1064 237.096 60.0664 235.861 cv
58.9648 238.653 59.5293 244.453 55.0986 247.836 cv
52.0645 250.252 48.332 250.306 46.291 252.24 cv
46.0229 254.12 45.5933 256.106 45.1636 258.04 cv
44.8955 259.597 li
47.9023 256.59 52.7896 256.213 54.4546 255.837 cv
52.4399 257.987 54.8833 262.926 51.0444 266.9 cv
48.144 269.854 44.3047 270.767 41.8604 273.184 cv
40.8672 277.963 40.0078 282.795 39.5254 287.629 cv
39.8208 284.407 40.5186 279.144 42.3438 276.245 cv
45.0024 272.11 50.9907 271.518 52.9233 271.036 cv
52.9233 273.989 53.353 278.823 49.5942 282.85 cv
48.52 283.924 47.2314 284.784 46.0229 285.481 cv
46.291 288.274 47.7139 292.141 46.1841 296.114 cv
44.6001 300.196 41.0557 301.216 39.874 304.385 cv
40.0352 306.264 li
41.4854 303.525 48.7344 299.712 50.3457 298.532 cv
50.3457 301.055 51.9565 305.083 50.0776 310.292 cv
48.6274 313.89 43.0688 313.407 41.3506 316.844 cv
41.8604 319.958 42.3975 323.18 43.0688 326.134 cv
43.1226 325.758 43.1226 325.33 43.2573 324.953 cv
44.1431 320.173 47.1235 315.824 48.6807 314.588 cv
49.5942 316.628 52.0645 322.858 51.0444 327.584 cv
50.2383 331.183 47.1235 332.417 46.0229 335.103 cv
46.9092 338.164 47.3926 341.493 47.4722 342.997 cv
47.9556 344.178 li
47.9556 343.641 47.9556 343.159 48.0903 342.622 cv
48.9497 337.626 53.2725 333.759 54.8296 332.471 cv
56.3335 334.62 58.8579 339.882 56.8706 345.092 cv
55.4746 348.636 52.3062 349.71 50.7217 352.233 cv
51.2588 353.577 51.7422 354.866 52.3062 356.262 cv
52.9771 354.329 53.9712 352.717 54.2129 351.965 cv
54.3735 352.61 54.8833 353.577 55.4746 354.49 cv
57.4346 351.697 60.4961 349.924 61.5156 348.797 cv
60.9248 352.288 63.6099 355.348 62.375 361.631 cv
62.1069 362.867 61.8916 363.887 61.731 365.014 cv
61.999 365.981 62.3213 366.788 62.4824 367.7 cv
62.9121 370.815 61.2476 371.942 60.3877 373.5 cv
61.7847 376.131 63.1812 378.655 64.6577 381.018 cv
64.228 375.647 68.6313 369.418 69.9741 367.7 cv
70.5386 370.815 75.3716 375.647 74.7534 381.716 cv
74.2974 386.173 71.397 388.321 71.6123 391.92 cv
72.7935 393.692 73.9214 395.357 75.1563 396.968 cv
73.9214 391.92 78.1899 385.852 79.1035 384.026 cv
79.3452 387.086 83.9102 390.469 84.2852 396.001 cv
84.3936 400.137 83.8027 404.808 84.3398 408.675 cv
85.333 409.803 li
83.8564 405.292 86.8096 400.458 87.481 398.741 cv
88.1523 401.586 93.4692 403.305 94.5693 408.836 cv
95.3481 413.132 92.2876 415.442 94.0596 419.362 cv
95.4561 420.866 96.9058 422.208 98.3022 423.551 cv
96.2612 418.878 98.8657 413.455 99.457 411.467 cv
100.369 414.475 105.015 415.496 106.572 421.081 cv
107.808 425.483 107.217 429.082 108.613 432.626 cv
110.116 433.807 111.593 434.989 113.043 436.063 cv
112.453 435.472 111.916 434.881 111.593 434.129 cv
109.203 429.78 111.701 424.195 112.185 422.261 cv
113.097 425.108 119.112 426.666 120.75 431.982 cv
122.146 436.278 121.555 439.823 123.247 443.152 cv
124.777 444.226 126.308 445.139 127.946 446.105 cv
127.597 445.836 127.462 445.676 127.355 445.354 cv
124.32 441.434 126.012 435.633 126.2 433.54 cv
127.543 436.278 132.135 436.493 134.578 441.487 cv
136.404 445.354 136.404 448.737 138.23 451.852 cv
140.002 452.657 li
154.152 457.598 163.98 457.812 180.547 459.639 cv
189.328 459.209 198.295 467.317 198.295 467.317 cv
198.295 467.317 198.43 468.661 193.113 467.317 cv
191.637 464.204 180.977 462.11 178.936 462.807 cv
162.691 461.036 152.273 459.047 141.908 455.61 cv
138.9 457.007 137.639 459.799 133.397 460.283 cv
126.63 461.036 123.783 456.954 120.642 456.954 cv
121.744 455.182 125.932 453.301 131.141 452.121 cv
132.081 451.852 133.047 451.852 134.041 451.852 cv
132 450.778 129.933 449.596 127.946 448.415 cv
cp
0 0 0 1 cmyk
@
206.619 468.607 mo
206.619 468.607 206.404 468.07 205.895 467.264 cv
198.188 454.161 179.098 459.209 166.396 455.127 cv
150.179 449.864 140.002 443.42 126.496 433.968 cv
117.581 427.793 110.895 419.684 105.283 410.448 cv
99.5371 401.586 li
108.828 408.299 li
108.828 408.299 110.277 410.715 112.613 413.938 cv
122.146 427.364 127.946 429.834 141.183 438.749 cv
150.179 444.817 164.41 451.745 175.74 452.764 cv
188.227 454.107 202.027 452.604 209.52 465.116 cv
210.164 466.297 210.916 468.177 210.916 468.177 cv
206.619 468.607 li
cp
0 0 1 .1 cmyk
f
206.619 468.607 mo
206.619 468.607 206.404 468.07 205.895 467.264 cv
198.188 454.161 179.098 459.209 166.396 455.127 cv
150.179 449.864 140.002 443.42 126.496 433.968 cv
117.581 427.793 110.895 419.684 105.283 410.448 cv
99.5371 401.586 li
108.828 408.299 li
108.828 408.299 110.277 410.715 112.613 413.938 cv
122.146 427.364 127.946 429.834 141.183 438.749 cv
150.179 444.817 164.41 451.745 175.74 452.764 cv
188.227 454.107 202.027 452.604 209.52 465.116 cv
210.164 466.297 210.916 468.177 210.916 468.177 cv
206.619 468.607 li
cp
0 0 0 1 cmyk
@
178.882 464.901 mo
171.096 468.607 147.654 470.862 137.881 469.895 cv
121.851 468.391 112.453 455.719 102.142 445.139 cv
96.5303 439.393 88.6357 436.225 81.2788 433.54 cv
76.3921 427.149 li
82.7554 429.565 li
82.7554 429.565 85.1987 430.532 88.5015 431.982 cv
100.906 437.298 102.276 438.963 110.734 448.362 cv
117.85 456.256 127.114 464.686 138.23 465.653 cv
146.661 466.566 169.377 464.741 177.029 461.143 cv
183.555 458.779 189.73 461.679 189.73 461.679 cv
178.882 464.901 li
cp
0 0 1 .1 cmyk
f
178.882 464.901 mo
171.096 468.607 147.654 470.862 137.881 469.895 cv
121.851 468.391 112.453 455.719 102.142 445.139 cv
96.5303 439.393 88.6357 436.225 81.2788 433.54 cv
76.3921 427.149 li
82.7554 429.565 li
82.7554 429.565 85.1987 430.532 88.5015 431.982 cv
100.906 437.298 102.276 438.963 110.734 448.362 cv
117.85 456.256 127.114 464.686 138.23 465.653 cv
146.661 466.566 169.377 464.741 177.029 461.143 cv
183.555 458.779 189.73 461.679 189.73 461.679 cv
178.882 464.901 li
cp
0 0 0 1 cmyk
@
307.795 448.415 mo
311.394 449.167 313.675 451.315 318.239 451.154 cv
324.979 450.939 326.403 447.395 329.518 447.018 cv
325.597 447.072 323.53 443.367 318.239 442.83 cv
317.649 442.83 317.031 442.83 316.36 442.991 cv
317.998 441.809 319.663 440.735 321.22 439.553 cv
324.979 440.09 328.04 441.702 332.605 441.272 cv
339.56 440.735 341.788 436.118 344.956 435.633 cv
343.562 433.915 338.942 432.733 333.356 432.465 cv
332.122 432.412 330.833 432.626 329.384 433.163 cv
331.907 431.123 334.431 428.92 336.874 426.666 cv
339.989 427.364 341.949 429.619 346.165 428.975 cv
352.823 427.846 354.623 423.335 357.523 422.53 cv
356.073 421.081 351.347 419.469 346.085 419.792 cv
345.226 419.792 344.313 420.006 343.562 420.221 cv
344.688 419.092 345.87 417.912 347.078 416.516 cv
351.133 416.086 354.623 417.59 359.054 416.194 cv
365.524 414.26 365.847 409.481 368.774 408.299 cv
367.028 407.01 362.437 406.958 357.228 407.87 cv
355.966 408.084 354.677 408.675 353.441 409.319 cv
355.536 407.064 357.47 404.701 359.376 402.231 cv
363.591 401.318 367.565 403.573 372.104 401.425 cv
378.683 398.149 379.165 391.383 382.038 389.611 cv
380.024 388.59 373.929 388.913 368.532 390.685 cv
368.049 390.954 367.619 391.115 367.136 391.383 cv
368.37 389.665 369.392 388 370.6 386.227 cv
374.574 384.885 377.822 387.14 382.307 384.241 cv
388.831 380.213 388.617 374.52 391.409 372.264 cv
389.315 372.641 384.32 371.352 378.789 373.929 cv
378.198 374.198 377.554 374.574 376.964 374.95 cv
377.876 373.338 li
379.004 371.782 380.347 369.903 381.447 367.969 cv
384.75 366.518 387.812 367.7 391.247 364.8 cv
396.323 360.29 395.947 355.67 398.067 353.307 cv
396.001 352.879 390.952 352.825 386.576 355.778 cv
386.227 356.047 385.878 356.262 385.609 356.53 cv
386.093 355.402 386.576 354.167 387.06 352.932 cv
389.96 352.019 392.833 352.825 395.894 350.085 cv
400.915 345.628 400.432 343.963 402.606 341.655 cv
401.075 341.333 398.149 339.667 394.899 340.096 cv
396.431 339.238 397.907 338.271 399.384 336.66 cv
403.116 332.686 402.472 327.746 403.036 325.543 cv
401.21 325.275 398.498 325.49 394.604 327.906 cv
394.899 326.564 395.169 325.33 395.464 324.093 cv
397.72 323.019 400.915 323.502 403.036 320.817 cv
405.425 317.81 406.204 316.252 408.835 315.125 cv
407.681 313.407 404.003 311.366 399.519 314.32 cv
398.444 315.071 397.424 316.252 396.564 317.649 cv
396.994 315.125 397.29 312.655 397.64 310.131 cv
399.034 309.057 401.452 311.043 404.217 308.627 cv
409.212 304.117 408.487 303.15 410.581 300.84 cv
409.454 300.679 407.198 299.336 404.646 298.854 cv
407.868 295.469 407.386 289.939 406.901 288.005 cv
404.862 287.629 404.03 289.348 399.679 292.355 cv
399.384 292.463 399.034 292.731 398.767 293.108 cv
398.767 292.086 398.767 291.067 398.714 290.045 cv
400.001 287.2 403.116 285.052 404.862 281.615 cv
407.868 276.245 405.507 271.196 405.13 269.264 cv
403.089 268.78 400.432 270.767 397.21 274.956 cv
397.048 275.224 396.86 275.547 396.726 275.869 cv
396.323 274.151 396.001 272.54 395.679 270.821 cv
397.907 268.887 400.753 268.458 402.552 264.86 cv
405.425 258.738 402.687 254.709 403.707 251.756 cv
402.929 251.971 401.827 252.561 400.7 253.635 cv
400.915 249.018 398.552 246.17 397.585 243.862 cv
395.731 244.56 393.37 248.266 391.302 252.991 cv
390.952 250.575 391.061 249.178 390.819 247.46 cv
392.403 243.702 396.296 242.25 397.048 237.526 cv
398.149 230.919 393.745 227 393.906 223.831 cv
392.081 224.852 388.886 229.041 387.327 234.034 cv
387.14 234.463 387.06 234.84 387.06 235.377 cv
386.576 234.357 386.093 233.069 385.476 231.672 cv
386.576 228.45 389.315 226.838 389.261 222.596 cv
389.261 215.776 385.878 213.251 385.528 210.137 cv
383.944 211.48 381.556 215.883 380.91 221.146 cv
380.669 220.555 li
380.024 218.784 379.299 217.226 378.413 215.4 cv
379.487 212.553 382.307 211.157 382.253 207.292 cv
382.199 200.524 379.944 198.215 379.54 195.1 cv
377.93 196.389 373.849 199.773 373.204 205.036 cv
373.124 205.519 li
372.587 204.766 372.157 203.961 371.674 203.262 cv
370.923 201.598 369.956 199.773 368.854 198.162 cv
370.063 195.1 372.694 193.596 372.533 189.408 cv
372.265 184.521 370.976 183.34 369.284 180.87 cv
367.673 182.104 364.773 184.79 364.128 190.106 cv
364.021 190.858 364.075 191.663 364.263 192.629 cv
363.458 191.502 362.679 190.643 361.979 189.624 cv
362.114 186.401 362.732 184.307 362.41 181.03 cv
361.577 174.372 359.536 171.149 356.368 169.323 cv
354.999 170.559 353.603 174.372 353.388 178.882 cv
352.823 178.345 li
350.917 176.197 li
351.133 173.458 351.643 171.525 351.347 168.679 cv
350.568 162.02 348.421 158.797 345.279 156.918 cv
344.044 158.207 341.386 161.912 342.728 166.745 cv
342.218 166.208 341.573 165.671 340.956 165.242 cv
340.097 164.329 339.237 163.523 338.378 162.665 cv
338.54 162.665 338.647 162.825 338.647 162.825 cv
338.324 162.449 li
338.378 159.71 340.526 159.066 340.284 156.328 cv
339.532 149.614 336.229 145.533 333.089 143.814 cv
331.585 145.158 328.604 150.849 331.745 156.166 cv
331.263 155.737 330.726 155.468 330.135 155.146 cv
329.088 154.34 328.094 153.427 326.993 152.515 cv
326.886 150.313 328.282 148.863 327.558 146.446 cv
325.704 140.109 322.187 137.531 318.857 136.35 cv
317.757 137.747 316.173 141.72 317.998 145.318 cv
317.649 145.318 li
316.683 144.621 315.716 143.868 314.749 143.117 cv
314.48 141.345 314.964 139.733 314.347 137.209 cv
313.353 132.752 311.366 131.356 307.901 130.067 cv
306.989 131.356 306.211 134.255 307.364 137.317 cv
306.802 137.209 306.397 136.994 305.835 136.994 cv
303.418 135.437 li
303.042 133.665 304.491 132.645 303.418 129.852 cv
302.236 126.737 300.357 125.019 297.055 123.73 cv
296.194 124.912 295.497 127.221 296.544 129.906 cv
294.718 127.918 293 125.824 290.905 124.213 cv
288.247 122.334 282.099 122.871 282.044 123.032 cv
282.044 123.193 286.046 128.134 288.837 128.832 cv
291.066 129.315 294.825 130.98 297.216 132 cv
292.463 129.906 290.261 132.107 289.079 133.719 cv
292.247 136.35 295.927 135.706 297.859 135.706 cv
300.089 135.759 299.042 134.846 301.377 135.437 cv
301.941 135.974 302.344 136.619 302.935 137.263 cv
299.739 137.747 297.161 138.713 297.161 138.713 cv
297.161 138.713 298.72 142.204 302.532 142.848 cv
306.318 143.654 306.452 142.311 308.546 142.473 cv
309.729 142.526 310.909 142.848 311.661 143.117 cv
312.333 143.654 li
312.87 144.137 313.487 144.621 313.997 145.05 cv
310.212 145.05 306.721 145.802 306.721 145.802 cv
306.721 145.802 308.117 149.883 314.427 150.796 cv
320.845 151.602 318.428 151.011 320.737 150.849 cv
321.328 150.849 321.919 150.849 322.348 151.011 cv
323.69 151.978 li
325.275 153.589 li
320.254 152.998 318.509 155.844 318.509 155.844 cv
318.509 155.844 321.757 159.871 325.355 161.537 cv
328.604 162.879 332.015 161.537 334.163 161 cv
334.835 161.537 335.451 162.235 336.229 162.825 cv
332.176 162.181 329.034 164.49 329.034 164.49 cv
329.034 164.49 331.102 168.679 333.868 170.29 cv
336.659 171.955 338.647 170.666 342.862 170.666 cv
343.132 170.666 343.507 170.666 343.775 170.72 cv
344.635 171.793 345.548 172.814 346.567 173.781 cv
347.078 174.532 li
342.862 173.351 337.788 175.285 337.788 175.285 cv
337.788 175.285 339.667 178.882 343.292 180.493 cv
346.89 181.997 347.427 179.688 352.798 181.083 cv
353.388 181.729 li
353.549 182.749 353.979 183.77 354.623 184.628 cv
351.643 184.36 347.991 185.327 347.991 185.327 cv
347.991 185.327 348.958 190.268 352.502 192.092 cv
354.354 193.114 359.698 193.167 362.544 193.221 cv
362.84 193.329 li
363.753 194.51 li
359.806 194.026 355.536 197.516 355.536 197.516 cv
355.536 197.516 359.591 202.78 363.511 205.036 cv
367.513 207.344 370.681 205.036 370.681 205.036 cv
371.298 205.68 li
372.022 206.754 372.587 207.881 373.204 209.116 cv
370.386 208.096 364.719 210.567 364.719 210.567 cv
364.719 210.567 364.397 215.4 370.681 217.226 cv
373.661 218.032 376.051 216.473 376.051 216.473 cv
376.964 216.958 li
377.501 218.407 378.038 219.965 378.521 221.36 cv
378.896 222.059 379.245 222.596 379.54 223.241 cv
379.434 223.026 379.245 222.864 379.058 222.756 cv
375.245 219.588 369.284 220.932 367.378 221.039 cv
369.956 222.489 368.854 227.107 373.661 229.845 cv
377.018 231.672 380.964 230.598 383.811 232.423 cv
384.804 234.948 385.663 237.526 386.388 240.103 cv
383.06 236.612 377.661 237.096 375.62 235.861 cv
376.694 238.653 376.185 244.453 380.642 247.836 cv
383.649 250.252 387.382 250.306 389.315 252.24 cv
389.691 254.12 390.094 256.106 390.496 258.04 cv
390.819 259.597 li
387.812 256.59 382.95 256.213 381.26 255.837 cv
383.273 257.987 380.83 262.926 384.616 266.9 cv
387.542 269.854 391.356 270.767 393.853 273.184 cv
394.899 277.963 395.731 282.795 396.188 287.629 cv
395.894 284.407 395.169 279.144 393.37 276.245 cv
390.737 272.11 384.67 271.518 382.79 271.036 cv
382.79 273.989 382.36 278.823 386.093 282.85 cv
387.193 283.924 388.429 284.784 389.637 285.481 cv
389.315 288.274 387.972 292.141 389.423 296.114 cv
391.061 300.196 394.604 301.216 395.84 304.385 cv
395.679 306.264 li
394.121 303.525 386.952 299.712 385.368 298.532 cv
385.368 301.055 383.703 305.083 385.663 310.292 cv
387.113 313.89 392.645 313.407 394.337 316.844 cv
393.853 319.958 393.315 323.18 392.645 326.134 cv
392.645 325.758 392.563 325.33 392.456 324.953 cv
391.544 320.173 388.563 315.824 387.005 314.588 cv
386.093 316.628 383.649 322.858 384.616 327.584 cv
385.476 331.183 388.563 332.417 389.691 335.103 cv
388.831 338.164 388.294 341.493 388.188 342.997 cv
387.758 344.178 li
387.758 343.641 387.704 343.159 387.597 342.622 cv
386.684 337.626 382.495 333.759 380.83 332.471 cv
379.299 334.62 376.802 339.882 378.789 345.092 cv
380.239 348.636 383.381 349.71 384.938 352.233 cv
384.454 353.577 383.944 354.866 383.381 356.262 cv
382.736 354.329 381.77 352.717 381.447 351.965 cv
381.313 352.61 380.83 353.577 380.212 354.49 cv
378.198 351.697 375.19 349.924 374.171 348.797 cv
374.761 352.288 372.104 355.348 373.366 361.631 cv
373.607 362.867 373.849 363.887 373.982 365.014 cv
373.661 365.981 373.419 366.788 373.259 367.7 cv
372.747 370.815 374.466 371.942 375.272 373.5 cv
373.929 376.131 372.506 378.655 370.976 381.018 cv
371.459 375.647 367.028 369.418 365.739 367.7 cv
365.095 370.815 360.208 375.647 360.934 381.716 cv
361.443 386.173 364.263 388.321 364.128 391.92 cv
362.921 393.692 361.792 395.357 360.503 396.968 cv
361.792 391.92 357.523 385.852 356.503 384.026 cv
356.422 387.086 351.831 390.469 351.429 396.001 cv
351.239 400.137 351.911 404.808 351.401 408.675 cv
350.354 409.803 li
351.831 405.292 348.903 400.458 348.152 398.741 cv
347.615 401.586 342.218 403.305 341.091 408.836 cv
340.284 413.132 343.399 415.442 341.573 419.362 cv
340.204 420.866 338.808 422.208 337.357 423.551 cv
339.479 418.878 336.794 413.455 336.229 411.467 cv
335.345 414.475 330.672 415.496 329.088 421.081 cv
327.853 425.483 328.47 429.082 327.048 432.626 cv
325.597 433.807 324.147 434.989 322.616 436.063 cv
323.207 435.472 323.771 434.881 324.067 434.129 cv
326.403 429.78 324.013 424.195 323.53 422.261 cv
322.563 425.108 316.603 426.666 314.964 431.982 cv
313.487 436.278 314.104 439.823 312.467 443.152 cv
310.909 444.226 309.46 445.139 307.795 446.105 cv
308.117 445.836 308.171 445.676 308.386 445.354 cv
311.394 441.434 309.729 435.633 309.513 433.54 cv
308.117 436.278 303.579 436.493 301.136 441.487 cv
299.31 445.354 299.257 448.737 297.43 451.852 cv
295.685 452.657 li
281.507 457.598 271.761 457.812 255.14 459.639 cv
246.333 459.209 237.391 467.317 237.391 467.317 cv
237.391 467.317 237.312 468.661 242.601 467.317 cv
244.13 464.204 254.845 462.11 256.724 462.807 cv
272.995 461.036 283.333 459.047 293.751 455.61 cv
296.786 457.007 298.021 459.799 302.344 460.283 cv
309.03 461.036 311.956 456.954 315.018 456.954 cv
313.917 455.182 309.729 453.301 304.546 452.121 cv
303.634 451.852 302.72 451.852 301.673 451.852 cv
303.687 450.778 305.728 449.596 307.795 448.415 cv
cp
0 0 1 .1 cmyk
f
307.795 448.415 mo
311.394 449.167 313.675 451.315 318.239 451.154 cv
324.979 450.939 326.403 447.395 329.518 447.018 cv
325.597 447.072 323.53 443.367 318.239 442.83 cv
317.649 442.83 317.031 442.83 316.36 442.991 cv
317.998 441.809 319.663 440.735 321.22 439.553 cv
324.979 440.09 328.04 441.702 332.605 441.272 cv
339.56 440.735 341.788 436.118 344.956 435.633 cv
343.562 433.915 338.942 432.733 333.356 432.465 cv
332.122 432.412 330.833 432.626 329.384 433.163 cv
331.907 431.123 334.431 428.92 336.874 426.666 cv
339.989 427.364 341.949 429.619 346.165 428.975 cv
352.823 427.846 354.623 423.335 357.523 422.53 cv
356.073 421.081 351.347 419.469 346.085 419.792 cv
345.226 419.792 344.313 420.006 343.562 420.221 cv
344.688 419.092 345.87 417.912 347.078 416.516 cv
351.133 416.086 354.623 417.59 359.054 416.194 cv
365.524 414.26 365.847 409.481 368.774 408.299 cv
367.028 407.01 362.437 406.958 357.228 407.87 cv
355.966 408.084 354.677 408.675 353.441 409.319 cv
355.536 407.064 357.47 404.701 359.376 402.231 cv
363.591 401.318 367.565 403.573 372.104 401.425 cv
378.683 398.149 379.165 391.383 382.038 389.611 cv
380.024 388.59 373.929 388.913 368.532 390.685 cv
368.049 390.954 367.619 391.115 367.136 391.383 cv
368.37 389.665 369.392 388 370.6 386.227 cv
374.574 384.885 377.822 387.14 382.307 384.241 cv
388.831 380.213 388.617 374.52 391.409 372.264 cv
389.315 372.641 384.32 371.352 378.789 373.929 cv
378.198 374.198 377.554 374.574 376.964 374.95 cv
377.876 373.338 li
379.004 371.782 380.347 369.903 381.447 367.969 cv
384.75 366.518 387.812 367.7 391.247 364.8 cv
396.323 360.29 395.947 355.67 398.067 353.307 cv
396.001 352.879 390.952 352.825 386.576 355.778 cv
386.227 356.047 385.878 356.262 385.609 356.53 cv
386.093 355.402 386.576 354.167 387.06 352.932 cv
389.96 352.019 392.833 352.825 395.894 350.085 cv
400.915 345.628 400.432 343.963 402.606 341.655 cv
401.075 341.333 398.149 339.667 394.899 340.096 cv
396.431 339.238 397.907 338.271 399.384 336.66 cv
403.116 332.686 402.472 327.746 403.036 325.543 cv
401.21 325.275 398.498 325.49 394.604 327.906 cv
394.899 326.564 395.169 325.33 395.464 324.093 cv
397.72 323.019 400.915 323.502 403.036 320.817 cv
405.425 317.81 406.204 316.252 408.835 315.125 cv
407.681 313.407 404.003 311.366 399.519 314.32 cv
398.444 315.071 397.424 316.252 396.564 317.649 cv
396.994 315.125 397.29 312.655 397.64 310.131 cv
399.034 309.057 401.452 311.043 404.217 308.627 cv
409.212 304.117 408.487 303.15 410.581 300.84 cv
409.454 300.679 407.198 299.336 404.646 298.854 cv
407.868 295.469 407.386 289.939 406.901 288.005 cv
404.862 287.629 404.03 289.348 399.679 292.355 cv
399.384 292.463 399.034 292.731 398.767 293.108 cv
398.767 292.086 398.767 291.067 398.714 290.045 cv
400.001 287.2 403.116 285.052 404.862 281.615 cv
407.868 276.245 405.507 271.196 405.13 269.264 cv
403.089 268.78 400.432 270.767 397.21 274.956 cv
397.048 275.224 396.86 275.547 396.726 275.869 cv
396.323 274.151 396.001 272.54 395.679 270.821 cv
397.907 268.887 400.753 268.458 402.552 264.86 cv
405.425 258.738 402.687 254.709 403.707 251.756 cv
402.929 251.971 401.827 252.561 400.7 253.635 cv
400.915 249.018 398.552 246.17 397.585 243.862 cv
395.731 244.56 393.37 248.266 391.302 252.991 cv
390.952 250.575 391.061 249.178 390.819 247.46 cv
392.403 243.702 396.296 242.25 397.048 237.526 cv
398.149 230.919 393.745 227 393.906 223.831 cv
392.081 224.852 388.886 229.041 387.327 234.034 cv
387.14 234.463 387.06 234.84 387.06 235.377 cv
386.576 234.357 386.093 233.069 385.476 231.672 cv
386.576 228.45 389.315 226.838 389.261 222.596 cv
389.261 215.776 385.878 213.251 385.528 210.137 cv
383.944 211.48 381.556 215.883 380.91 221.146 cv
380.669 220.555 li
380.024 218.784 379.299 217.226 378.413 215.4 cv
379.487 212.553 382.307 211.157 382.253 207.292 cv
382.199 200.524 379.944 198.215 379.54 195.1 cv
377.93 196.389 373.849 199.773 373.204 205.036 cv
373.124 205.519 li
372.587 204.766 372.157 203.961 371.674 203.262 cv
370.923 201.598 369.956 199.773 368.854 198.162 cv
370.063 195.1 372.694 193.596 372.533 189.408 cv
372.265 184.521 370.976 183.34 369.284 180.87 cv
367.673 182.104 364.773 184.79 364.128 190.106 cv
364.021 190.858 364.075 191.663 364.263 192.629 cv
363.458 191.502 362.679 190.643 361.979 189.624 cv
362.114 186.401 362.732 184.307 362.41 181.03 cv
361.577 174.372 359.536 171.149 356.368 169.323 cv
354.999 170.559 353.603 174.372 353.388 178.882 cv
352.823 178.345 li
350.917 176.197 li
351.133 173.458 351.643 171.525 351.347 168.679 cv
350.568 162.02 348.421 158.797 345.279 156.918 cv
344.044 158.207 341.386 161.912 342.728 166.745 cv
342.218 166.208 341.573 165.671 340.956 165.242 cv
340.097 164.329 339.237 163.523 338.378 162.665 cv
338.54 162.665 338.647 162.825 338.647 162.825 cv
338.324 162.449 li
338.378 159.71 340.526 159.066 340.284 156.328 cv
339.532 149.614 336.229 145.533 333.089 143.814 cv
331.585 145.158 328.604 150.849 331.745 156.166 cv
331.263 155.737 330.726 155.468 330.135 155.146 cv
329.088 154.34 328.094 153.427 326.993 152.515 cv
326.886 150.313 328.282 148.863 327.558 146.446 cv
325.704 140.109 322.187 137.531 318.857 136.35 cv
317.757 137.747 316.173 141.72 317.998 145.318 cv
317.649 145.318 li
316.683 144.621 315.716 143.868 314.749 143.117 cv
314.48 141.345 314.964 139.733 314.347 137.209 cv
313.353 132.752 311.366 131.356 307.901 130.067 cv
306.989 131.356 306.211 134.255 307.364 137.317 cv
306.802 137.209 306.397 136.994 305.835 136.994 cv
303.418 135.437 li
303.042 133.665 304.491 132.645 303.418 129.852 cv
302.236 126.737 300.357 125.019 297.055 123.73 cv
296.194 124.912 295.497 127.221 296.544 129.906 cv
294.718 127.918 293 125.824 290.905 124.213 cv
288.247 122.334 282.099 122.871 282.044 123.032 cv
282.044 123.193 286.046 128.134 288.837 128.832 cv
291.066 129.315 294.825 130.98 297.216 132 cv
292.463 129.906 290.261 132.107 289.079 133.719 cv
292.247 136.35 295.927 135.706 297.859 135.706 cv
300.089 135.759 299.042 134.846 301.377 135.437 cv
301.941 135.974 302.344 136.619 302.935 137.263 cv
299.739 137.747 297.161 138.713 297.161 138.713 cv
297.161 138.713 298.72 142.204 302.532 142.848 cv
306.318 143.654 306.452 142.311 308.546 142.473 cv
309.729 142.526 310.909 142.848 311.661 143.117 cv
312.333 143.654 li
312.87 144.137 313.487 144.621 313.997 145.05 cv
310.212 145.05 306.721 145.802 306.721 145.802 cv
306.721 145.802 308.117 149.883 314.427 150.796 cv
320.845 151.602 318.428 151.011 320.737 150.849 cv
321.328 150.849 321.919 150.849 322.348 151.011 cv
323.69 151.978 li
325.275 153.589 li
320.254 152.998 318.509 155.844 318.509 155.844 cv
318.509 155.844 321.757 159.871 325.355 161.537 cv
328.604 162.879 332.015 161.537 334.163 161 cv
334.835 161.537 335.451 162.235 336.229 162.825 cv
332.176 162.181 329.034 164.49 329.034 164.49 cv
329.034 164.49 331.102 168.679 333.868 170.29 cv
336.659 171.955 338.647 170.666 342.862 170.666 cv
343.132 170.666 343.507 170.666 343.775 170.72 cv
344.635 171.793 345.548 172.814 346.567 173.781 cv
347.078 174.532 li
342.862 173.351 337.788 175.285 337.788 175.285 cv
337.788 175.285 339.667 178.882 343.292 180.493 cv
346.89 181.997 347.427 179.688 352.798 181.083 cv
353.388 181.729 li
353.549 182.749 353.979 183.77 354.623 184.628 cv
351.643 184.36 347.991 185.327 347.991 185.327 cv
347.991 185.327 348.958 190.268 352.502 192.092 cv
354.354 193.114 359.698 193.167 362.544 193.221 cv
362.84 193.329 li
363.753 194.51 li
359.806 194.026 355.536 197.516 355.536 197.516 cv
355.536 197.516 359.591 202.78 363.511 205.036 cv
367.513 207.344 370.681 205.036 370.681 205.036 cv
371.298 205.68 li
372.022 206.754 372.587 207.881 373.204 209.116 cv
370.386 208.096 364.719 210.567 364.719 210.567 cv
364.719 210.567 364.397 215.4 370.681 217.226 cv
373.661 218.032 376.051 216.473 376.051 216.473 cv
376.964 216.958 li
377.501 218.407 378.038 219.965 378.521 221.36 cv
378.896 222.059 379.245 222.596 379.54 223.241 cv
379.434 223.026 379.245 222.864 379.058 222.756 cv
375.245 219.588 369.284 220.932 367.378 221.039 cv
369.956 222.489 368.854 227.107 373.661 229.845 cv
377.018 231.672 380.964 230.598 383.811 232.423 cv
384.804 234.948 385.663 237.526 386.388 240.103 cv
383.06 236.612 377.661 237.096 375.62 235.861 cv
376.694 238.653 376.185 244.453 380.642 247.836 cv
383.649 250.252 387.382 250.306 389.315 252.24 cv
389.691 254.12 390.094 256.106 390.496 258.04 cv
390.819 259.597 li
387.812 256.59 382.95 256.213 381.26 255.837 cv
383.273 257.987 380.83 262.926 384.616 266.9 cv
387.542 269.854 391.356 270.767 393.853 273.184 cv
394.899 277.963 395.731 282.795 396.188 287.629 cv
395.894 284.407 395.169 279.144 393.37 276.245 cv
390.737 272.11 384.67 271.518 382.79 271.036 cv
382.79 273.989 382.36 278.823 386.093 282.85 cv
387.193 283.924 388.429 284.784 389.637 285.481 cv
389.315 288.274 387.972 292.141 389.423 296.114 cv
391.061 300.196 394.604 301.216 395.84 304.385 cv
395.679 306.264 li
394.121 303.525 386.952 299.712 385.368 298.532 cv
385.368 301.055 383.703 305.083 385.663 310.292 cv
387.113 313.89 392.645 313.407 394.337 316.844 cv
393.853 319.958 393.315 323.18 392.645 326.134 cv
392.645 325.758 392.563 325.33 392.456 324.953 cv
391.544 320.173 388.563 315.824 387.005 314.588 cv
386.093 316.628 383.649 322.858 384.616 327.584 cv
385.476 331.183 388.563 332.417 389.691 335.103 cv
388.831 338.164 388.294 341.493 388.188 342.997 cv
387.758 344.178 li
387.758 343.641 387.704 343.159 387.597 342.622 cv
386.684 337.626 382.495 333.759 380.83 332.471 cv
379.299 334.62 376.802 339.882 378.789 345.092 cv
380.239 348.636 383.381 349.71 384.938 352.233 cv
384.454 353.577 383.944 354.866 383.381 356.262 cv
382.736 354.329 381.77 352.717 381.447 351.965 cv
381.313 352.61 380.83 353.577 380.212 354.49 cv
378.198 351.697 375.19 349.924 374.171 348.797 cv
374.761 352.288 372.104 355.348 373.366 361.631 cv
373.607 362.867 373.849 363.887 373.982 365.014 cv
373.661 365.981 373.419 366.788 373.259 367.7 cv
372.747 370.815 374.466 371.942 375.272 373.5 cv
373.929 376.131 372.506 378.655 370.976 381.018 cv
371.459 375.647 367.028 369.418 365.739 367.7 cv
365.095 370.815 360.208 375.647 360.934 381.716 cv
361.443 386.173 364.263 388.321 364.128 391.92 cv
362.921 393.692 361.792 395.357 360.503 396.968 cv
361.792 391.92 357.523 385.852 356.503 384.026 cv
356.422 387.086 351.831 390.469 351.429 396.001 cv
351.239 400.137 351.911 404.808 351.401 408.675 cv
350.354 409.803 li
351.831 405.292 348.903 400.458 348.152 398.741 cv
347.615 401.586 342.218 403.305 341.091 408.836 cv
340.284 413.132 343.399 415.442 341.573 419.362 cv
340.204 420.866 338.808 422.208 337.357 423.551 cv
339.479 418.878 336.794 413.455 336.229 411.467 cv
335.345 414.475 330.672 415.496 329.088 421.081 cv
327.853 425.483 328.47 429.082 327.048 432.626 cv
325.597 433.807 324.147 434.989 322.616 436.063 cv
323.207 435.472 323.771 434.881 324.067 434.129 cv
326.403 429.78 324.013 424.195 323.53 422.261 cv
322.563 425.108 316.603 426.666 314.964 431.982 cv
313.487 436.278 314.104 439.823 312.467 443.152 cv
310.909 444.226 309.46 445.139 307.795 446.105 cv
308.117 445.836 308.171 445.676 308.386 445.354 cv
311.394 441.434 309.729 435.633 309.513 433.54 cv
308.117 436.278 303.579 436.493 301.136 441.487 cv
299.31 445.354 299.257 448.737 297.43 451.852 cv
295.685 452.657 li
281.507 457.598 271.761 457.812 255.14 459.639 cv
246.333 459.209 237.391 467.317 237.391 467.317 cv
237.391 467.317 237.312 468.661 242.601 467.317 cv
244.13 464.204 254.845 462.11 256.724 462.807 cv
272.995 461.036 283.333 459.047 293.751 455.61 cv
296.786 457.007 298.021 459.799 302.344 460.283 cv
309.03 461.036 311.956 456.954 315.018 456.954 cv
313.917 455.182 309.729 453.301 304.546 452.121 cv
303.634 451.852 302.72 451.852 301.673 451.852 cv
303.687 450.778 305.728 449.596 307.795 448.415 cv
cp
0 0 0 1 cmyk
@
229.121 468.607 mo
229.121 468.607 229.335 468.07 229.819 467.264 cv
237.525 454.161 256.59 459.209 269.264 455.127 cv
285.536 449.864 295.632 443.42 309.191 433.968 cv
318.025 427.793 324.738 419.684 330.431 410.448 cv
336.177 401.586 li
326.832 408.299 li
326.832 408.299 325.355 410.715 323.101 413.938 cv
313.487 427.364 307.795 429.834 294.53 438.749 cv
285.536 444.817 271.197 451.745 259.919 452.764 cv
247.433 454.107 233.659 452.604 226.194 465.116 cv
225.47 466.297 224.798 468.177 224.798 468.177 cv
229.121 468.607 li
cp
0 0 1 .1 cmyk
f
229.121 468.607 mo
229.121 468.607 229.335 468.07 229.819 467.264 cv
237.525 454.161 256.59 459.209 269.264 455.127 cv
285.536 449.864 295.632 443.42 309.191 433.968 cv
318.025 427.793 324.738 419.684 330.431 410.448 cv
336.177 401.586 li
326.832 408.299 li
326.832 408.299 325.355 410.715 323.101 413.938 cv
313.487 427.364 307.795 429.834 294.53 438.749 cv
285.536 444.817 271.197 451.745 259.919 452.764 cv
247.433 454.107 233.659 452.604 226.194 465.116 cv
225.47 466.297 224.798 468.177 224.798 468.177 cv
229.121 468.607 li
cp
0 0 0 1 cmyk
@
256.831 464.901 mo
264.563 468.607 288.032 470.862 297.806 469.895 cv
313.89 468.391 323.314 455.719 333.572 445.139 cv
339.185 439.393 347.078 436.225 354.408 433.54 cv
359.241 427.149 li
352.958 429.565 li
352.958 429.565 350.488 430.532 347.132 431.982 cv
334.753 437.298 333.491 438.963 324.952 448.362 cv
317.757 456.256 308.546 464.686 297.376 465.653 cv
289.079 466.566 266.337 464.741 258.55 461.143 cv
252.105 458.779 245.876 461.679 245.876 461.679 cv
256.831 464.901 li
cp
0 0 1 .1 cmyk
f
256.831 464.901 mo
264.563 468.607 288.032 470.862 297.806 469.895 cv
313.89 468.391 323.314 455.719 333.572 445.139 cv
339.185 439.393 347.078 436.225 354.408 433.54 cv
359.241 427.149 li
352.958 429.565 li
352.958 429.565 350.488 430.532 347.132 431.982 cv
334.753 437.298 333.491 438.963 324.952 448.362 cv
317.757 456.256 308.546 464.686 297.376 465.653 cv
289.079 466.566 266.337 464.741 258.55 461.143 cv
252.105 458.779 245.876 461.679 245.876 461.679 cv
256.831 464.901 li
cp
0 0 0 1 cmyk
@
75.3179 293.161 mo
75.3179 213.95 139.546 149.722 218.703 149.722 cv
297.887 149.722 362.114 213.95 362.114 293.161 cv
362.114 372.319 297.887 436.6 218.703 436.6 cv
139.546 436.6 75.3179 372.319 75.3179 293.161 cv
cp
118.817 293.161 mo
118.817 237.956 163.496 193.221 218.703 193.221 cv
273.909 193.221 318.616 237.956 318.616 293.161 cv
318.616 348.313 273.909 393.101 218.703 393.101 cv
163.496 393.101 118.817 348.313 118.817 293.161 cv
cp
ef
262.362 103.968 mo
263.114 102.894 263.974 101.712 264.618 100.531 cv
269.882 92.0459 272.862 82.1646 272.862 71.585 cv
272.862 41.2437 248.266 16.6475 218.005 16.6475 cv
187.609 16.6475 163.014 41.2437 163.014 71.585 cv
163.014 82.3789 166.074 92.4214 171.445 100.799 cv
172.196 102.034 172.922 103.108 173.754 104.29 cv
183.796 117.769 199.853 126.523 218.005 126.523 cv
236.183 126.523 252.374 117.662 262.362 103.968 cv
cp
160.705 71.585 mo
160.705 40.0615 186.374 14.3384 218.005 14.3384 cv
249.635 14.3384 275.198 40.0615 275.198 71.585 cv
275.198 82.3789 272.19 92.4214 266.981 101.014 cv
353.012 122.656 416.729 200.417 416.729 293.161 cv
416.729 386.173 352.743 464.096 266.444 485.524 cv
265.8 484.18 264.993 483.053 264.001 482.032 cv
349.388 461.573 412.782 384.67 412.782 293.161 cv
412.782 201.813 349.71 125.126 264.726 104.451 cv
254.36 119.219 237.257 128.832 218.005 128.832 cv
198.725 128.832 181.809 119.434 171.391 104.827 cv
87.105 125.986 24.5415 202.295 24.5415 293.161 cv
24.5415 384.187 87.3467 460.712 171.955 481.549 cv
171.016 482.73 170.129 483.805 169.432 485.04 cv
83.8564 463.183 20.6753 385.53 20.6753 293.161 cv
20.6753 200.901 83.8027 123.462 169.189 101.443 cv
163.818 92.7441 160.705 82.5405 160.705 71.585 cv
cp
0 0 1 .1 cmyk
f
262.362 103.968 mo
263.114 102.894 263.974 101.712 264.618 100.531 cv
269.882 92.0459 272.862 82.1646 272.862 71.585 cv
272.862 41.2437 248.266 16.6475 218.005 16.6475 cv
187.609 16.6475 163.014 41.2437 163.014 71.585 cv
163.014 82.3789 166.074 92.4214 171.445 100.799 cv
172.196 102.034 172.922 103.108 173.754 104.29 cv
183.796 117.769 199.853 126.523 218.005 126.523 cv
236.183 126.523 252.374 117.662 262.362 103.968 cv
cp
160.705 71.585 mo
160.705 40.0615 186.374 14.3384 218.005 14.3384 cv
249.635 14.3384 275.198 40.0615 275.198 71.585 cv
275.198 82.3789 272.19 92.4214 266.981 101.014 cv
353.012 122.656 416.729 200.417 416.729 293.161 cv
416.729 386.173 352.743 464.096 266.444 485.524 cv
265.8 484.18 264.993 483.053 264.001 482.032 cv
349.388 461.573 412.782 384.67 412.782 293.161 cv
412.782 201.813 349.71 125.126 264.726 104.451 cv
254.36 119.219 237.257 128.832 218.005 128.832 cv
198.725 128.832 181.809 119.434 171.391 104.827 cv
87.105 125.986 24.5415 202.295 24.5415 293.161 cv
24.5415 384.187 87.3467 460.712 171.955 481.549 cv
171.016 482.73 170.129 483.805 169.432 485.04 cv
83.8564 463.183 20.6753 385.53 20.6753 293.161 cv
20.6753 200.901 83.8027 123.462 169.189 101.443 cv
163.818 92.7441 160.705 82.5405 160.705 71.585 cv
cp
0 0 0 1 cmyk
@
218.703 455.657 mo
304.446 455.657 381.146 378.933 381.146 293.161 cv
381.146 207.389 304.446 130.666 218.703 130.666 cv
132.959 130.666 56.2593 207.389 56.2593 293.161 cv
56.2593 378.933 132.959 455.657 218.703 455.657 cv
cp
67.0889 293.161 mo
67.0889 209.532 135.103 141.495 218.703 141.495 cv
302.304 141.495 370.317 209.532 370.317 293.161 cv
370.317 376.79 302.304 444.827 218.703 444.827 cv
135.103 444.827 67.0889 376.79 67.0889 293.161 cv
cp
0 0 1 .1 cmyk
ef
218.703 455.657 mo
304.446 455.657 381.146 378.933 381.146 293.161 cv
381.146 207.389 304.446 130.666 218.703 130.666 cv
132.959 130.666 56.2593 207.389 56.2593 293.161 cv
56.2593 378.933 132.959 455.657 218.703 455.657 cv
cp
67.0889 293.161 mo
67.0889 209.532 135.103 141.495 218.703 141.495 cv
302.304 141.495 370.317 209.532 370.317 293.161 cv
370.317 376.79 302.304 444.827 218.703 444.827 cv
135.103 444.827 67.0889 376.79 67.0889 293.161 cv
cp
0 0 0 1 cmyk
@
128.063 293.161 mo
128.063 243.122 168.69 202.601 218.703 202.601 cv
268.716 202.601 309.316 243.122 309.316 293.161 cv
309.316 343.2 268.716 383.774 218.703 383.774 cv
168.69 383.774 128.063 343.2 128.063 293.161 cv
cp
122.487 293.161 mo
122.487 241.686 167.149 196.865 218.703 196.865 cv
270.15 196.865 314.972 238.986 314.972 293.161 cv
314.972 348.263 270.15 389.404 218.703 389.404 cv
167.149 389.404 122.487 346.849 122.487 293.161 cv
cp
1 .9 .1 0 cmyk
ef
247.299 195.852 mo
246.87 197.088 243.083 196.067 243.325 195.1 cv
243.325 195.369 246.87 179.742 246.87 179.742 cv
247.003 179.097 246.87 178.453 246.521 178.398 cv
246.091 178.345 245.769 178.775 245.581 179.473 cv
242.063 194.67 li
241.795 195.637 238.169 195.1 238.438 194.133 cv
241.365 178.775 li
241.526 178.13 241.365 177.54 240.989 177.54 cv
240.64 177.433 240.291 177.862 240.185 178.561 cv
237.149 193.811 li
237.042 194.618 233.364 194.348 233.444 193.329 cv
235.619 177.754 li
235.808 177.057 235.538 176.466 235.136 176.412 cv
234.841 176.304 234.518 176.896 234.411 177.594 cv
232.209 193.114 li
232.128 194.133 228.476 193.704 228.53 192.684 cv
230.544 173.405 li
231.431 165.618 238.733 171.525 242.332 172.116 cv
246.386 172.975 255.516 169.43 252.267 179.581 cv
247.299 195.852 li
cp
262.362 171.203 mo
253.126 196.335 li
252.696 197.409 251.729 198 250.925 197.678 cv
250.092 197.302 li
248.399 196.873 248.909 195.852 249.339 194.778 cv
255.757 173.781 li
257.395 165.51 249.635 167.927 243.352 166.854 cv
238.572 166.047 231.699 160.624 229.335 167.175 cv
226.892 191.288 li
226.865 192.416 226.032 193.329 225.281 193.221 cv
224.314 193.167 li
223.401 193.059 222.784 192.04 222.918 190.858 cv
224.61 163.577 li
225.979 149.507 237.391 154.126 246.011 156.059 cv
254.36 157.938 266.874 156.918 262.362 170.88 cv
262.362 170.934 262.362 171.096 262.362 171.203 cv
cp
216.77 152.944 mo
220.958 152.944 li
222.032 152.944 223.026 153.803 223.026 154.931 cv
221.495 190.804 li
221.495 191.932 220.582 192.845 219.454 192.845 cv
218.219 192.845 li
217.145 192.845 216.178 191.932 216.178 190.804 cv
214.701 154.931 li
214.701 153.803 215.615 152.944 216.77 152.944 cv
cp
207.855 192.416 mo
207.908 193.704 204.016 194.133 203.935 193.167 cv
203.988 193.329 201.33 177.647 201.33 177.647 cv
201.195 177.003 200.819 176.412 200.444 176.466 cv
200.148 176.627 199.961 177.217 200.041 177.862 cv
202.592 193.221 li
202.779 194.133 199.154 195.1 198.94 194.133 cv
195.933 178.882 li
195.719 178.184 195.314 177.647 194.993 177.754 cv
194.645 177.808 194.51 178.398 194.645 179.097 cv
197.705 194.403 li
197.866 195.1 194.402 196.282 194.134 195.261 cv
190.214 180.064 li
189.998 179.419 189.623 178.882 189.273 178.99 cv
188.898 179.097 188.764 179.688 188.951 180.332 cv
192.926 195.477 li
193.167 196.604 189.623 197.516 189.328 196.658 cv
183.85 177.97 li
181.676 170.343 190.644 173.082 194.215 172.331 cv
198.242 171.525 205.331 164.813 206.189 175.338 cv
207.855 192.416 li
cp
212.338 163.738 mo
213.359 190.588 li
213.467 191.663 212.822 192.684 211.963 192.684 cv
210.969 192.684 li
209.305 192.737 209.439 191.663 209.357 190.643 cv
207.21 168.732 li
205.6 160.408 199.289 165.618 193.167 167.014 cv
188.414 168.142 179.902 165.726 180.279 172.814 cv
187.287 195.959 li
187.717 197.088 187.287 198.162 186.535 198.43 cv
185.623 198.645 li
184.79 198.806 183.796 198.162 183.394 197.088 cv
174.667 171.149 li
170.479 157.616 182.829 157.616 191.449 156.059 cv
199.907 154.501 211.104 148.863 212.205 163.523 cv
212.205 163.577 212.258 163.738 212.338 163.738 cv
cp
163.229 164.329 mo
167.121 162.718 li
168.142 162.396 169.323 162.825 169.753 163.899 cv
182.158 197.516 li
182.533 198.483 182.051 199.773 180.977 200.256 cv
179.849 200.685 li
178.803 201.061 177.513 200.578 177.137 199.557 cv
162.1 167.014 li
161.617 165.994 162.154 164.813 163.229 164.329 cv
cp
170.102 204.176 mo
170.666 205.358 167.282 207.292 166.8 206.431 cv
166.88 206.539 158.476 193.114 158.476 193.114 cv
158.073 192.416 157.509 192.2 157.186 192.416 cv
156.891 192.629 156.972 193.167 157.294 193.757 cv
165.592 207.077 li
166.074 207.829 163.066 209.976 162.637 209.225 cv
153.884 196.335 li
153.508 195.745 152.917 195.422 152.648 195.637 cv
152.273 195.745 152.434 196.389 152.864 196.979 cv
161.483 209.869 li
161.886 210.567 159.173 212.983 158.476 212.071 cv
149.078 199.557 li
148.647 199.02 148.138 198.752 147.789 199.02 cv
147.547 199.182 147.601 199.773 148.031 200.364 cv
157.455 212.822 li
158.18 213.627 155.253 215.991 154.636 215.131 cv
142.392 200.094 li
137.505 194.026 146.822 192.899 149.856 190.912 cv
153.293 188.602 157.186 179.688 162.1 189.086 cv
170.102 204.176 li
cp
163.229 176.09 mo
174.452 200.364 li
175.069 201.491 174.721 202.511 173.969 202.834 cv
173.109 203.209 li
171.579 204.069 171.338 202.995 170.854 202.028 cv
160.436 182.587 li
155.791 175.499 151.897 182.749 146.876 186.401 cv
142.821 189.301 134.148 190.268 137.075 196.658 cv
152.434 215.346 li
153.293 216.152 153.347 217.333 152.648 217.87 cv
151.897 218.407 li
151.253 219.051 150.098 218.729 149.373 217.87 cv
131.222 197.249 li
122.227 186.401 133.665 181.675 141.049 177.003 cv
148.272 172.331 156.408 162.718 163.066 175.822 cv
163.148 175.875 163.229 176.036 163.229 176.09 cv
cp
118.171 195.422 mo
121.125 192.416 li
121.904 191.61 123.193 191.61 124.052 192.416 cv
148.272 218.729 li
149.078 219.481 149.078 220.932 148.272 221.683 cv
147.413 222.596 li
146.607 223.456 145.265 223.456 144.486 222.596 cv
118.171 198.323 li
117.313 197.516 117.313 196.174 118.171 195.422 cv
cp
139.76 229.684 mo
140.781 230.437 138.284 233.497 137.612 232.907 cv
137.693 233.069 124.777 223.723 124.777 223.723 cv
124.106 223.456 123.515 223.241 123.301 223.563 cv
123.085 223.831 123.381 224.422 123.999 224.797 cv
136.699 233.874 li
137.451 234.463 135.491 237.632 134.739 237.096 cv
121.797 228.45 li
121.125 228.074 120.562 228.02 120.266 228.29 cv
120.132 228.665 120.428 229.202 120.991 229.631 cv
133.96 238.116 li
134.632 238.545 132.967 241.768 132.081 241.284 cv
118.548 233.444 li
117.93 233.069 117.313 232.907 117.206 233.336 cv
117.018 233.606 117.313 234.143 117.93 234.463 cv
131.382 242.358 li
132.376 242.895 130.47 246.118 129.664 245.634 cv
112.506 236.344 li
105.66 232.639 113.903 228.074 115.917 225.066 cv
118.225 221.683 118.494 211.856 126.549 218.729 cv
139.76 229.684 li
cp
122.709 206.325 mo
142.338 224.368 li
143.143 225.066 143.493 226.249 142.768 226.838 cv
142.124 227.483 li
141.103 228.826 140.351 228.02 139.546 227.323 cv
122.602 213.251 li
115.54 208.633 114.761 216.743 111.432 222.113 cv
108.881 226.249 101.122 230.491 106.411 235.216 cv
127.73 246.655 li
128.805 247.084 129.288 248.104 128.859 248.91 cv
128.429 249.663 li
127.946 250.414 126.818 250.737 125.771 250.145 cv
101.283 237.956 li
88.6357 231.403 97.4424 222.756 102.518 215.561 cv
107.378 208.472 111.271 196.604 122.388 206.056 cv
122.548 206.163 122.656 206.27 122.709 206.325 cv
cp
88.4478 241.284 mo
89.9243 237.471 li
90.4351 236.397 91.5625 235.915 92.6631 236.344 cv
125.207 251.327 li
126.2 251.81 126.737 252.991 126.308 254.12 cv
125.824 255.247 li
125.395 256.321 124.187 256.75 123.085 256.321 cv
89.4946 244.023 li
88.4478 243.647 87.9644 242.305 88.4478 241.284 cv
cp
121.475 264.698 mo
122.709 265.021 121.555 268.78 120.642 268.62 cv
120.856 268.62 105.283 265.021 105.283 265.021 cv
104.639 264.914 104.048 265.021 103.941 265.397 cv
103.86 265.772 104.29 266.095 105.015 266.256 cv
120.212 269.8 li
121.125 270.069 120.562 273.72 119.675 273.506 cv
104.29 270.445 li
103.672 270.337 103.082 270.606 103.001 270.875 cv
102.894 271.196 103.484 271.68 104.102 271.733 cv
119.407 274.741 li
120.132 274.956 119.836 278.5 118.817 278.393 cv
103.323 276.191 li
102.625 276.191 102.034 276.405 101.98 276.782 cv
101.98 277.049 102.356 277.426 103.135 277.534 cv
118.548 279.736 li
119.675 279.79 119.219 283.387 118.225 283.333 cv
98.8657 281.293 li
91.1328 280.434 97.0127 273.237 97.7114 269.584 cv
98.4902 265.558 94.9727 256.375 105.015 259.597 cv
121.475 264.698 li
cp
96.6909 249.608 mo
121.851 258.738 li
122.897 259.221 123.515 260.134 123.193 260.993 cv
122.817 261.852 li
122.388 263.463 121.475 262.926 120.266 262.55 cv
99.3228 256.16 li
91.0259 254.442 93.4692 262.336 92.3677 268.511 cv
91.5625 273.291 86.0845 280.272 92.7441 282.528 cv
116.883 284.891 li
118.011 285.052 118.817 285.858 118.762 286.77 cv
118.602 287.629 li
118.548 288.435 117.527 289.133 116.4 288.918 cv
89.0649 287.2 li
74.9419 285.858 79.6938 274.526 81.6538 265.934 cv
83.4268 257.502 82.4063 245.043 96.4224 249.501 cv
96.5303 249.501 96.6909 249.501 96.6909 249.608 cv
cp
78.4854 295.148 mo
78.4854 291.012 li
78.4854 289.832 79.3721 288.918 80.5 288.918 cv
116.346 290.369 li
117.42 290.369 118.333 291.281 118.333 292.409 cv
118.333 293.59 li
118.333 294.718 117.42 295.739 116.346 295.739 cv
80.5 297.243 li
79.3721 297.243 78.4854 296.276 78.4854 295.148 cv
cp
117.93 304.062 mo
119.219 303.955 119.675 307.875 118.762 308.037 cv
118.924 307.929 103.243 310.561 103.243 310.561 cv
102.518 310.668 101.98 311.098 102.088 311.473 cv
102.142 311.795 102.759 311.903 103.377 311.849 cv
118.817 309.217 li
119.729 309.165 120.562 312.762 119.675 312.816 cv
104.37 315.93 li
103.672 316.092 103.243 316.522 103.323 316.897 cv
103.377 317.219 103.941 317.273 104.639 317.219 cv
119.971 314.159 li
120.615 313.944 121.797 317.434 120.75 317.756 cv
105.606 321.677 li
104.907 321.838 104.478 322.213 104.585 322.589 cv
104.639 323.019 105.283 323.18 105.928 323.019 cv
121.045 319.045 li
122.039 318.777 123.085 322.213 122.146 322.482 cv
103.484 328.175 li
95.9932 330.323 98.5977 321.301 97.8726 317.649 cv
97.0674 313.622 90.3271 306.533 100.853 305.62 cv
117.93 304.062 li
cp
89.3066 299.659 mo
116.023 298.532 li
117.206 298.424 118.171 299.122 118.171 299.928 cv
118.171 300.84 li
118.333 302.559 117.206 302.559 116.104 302.559 cv
94.1943 304.708 li
85.8965 306.264 91.1865 312.602 92.5557 318.777 cv
93.6572 323.449 91.2676 331.88 98.3022 331.612 cv
121.528 324.577 li
122.602 324.2 123.676 324.577 123.892 325.436 cv
124.052 326.295 li
124.375 327.101 123.676 328.175 122.656 328.389 cv
96.6909 337.25 li
83.104 341.493 83.104 329.142 81.6538 320.442 cv
80.1235 312.01 74.4048 300.84 88.9849 299.712 cv
89.1191 299.659 89.2529 299.659 89.3066 299.659 cv
cp
89.8438 348.744 mo
88.2598 344.769 li
87.8574 343.802 88.394 342.622 89.4146 342.03 cv
122.951 329.839 li
124.052 329.356 125.287 329.947 125.717 330.914 cv
126.2 332.095 li
126.63 333.062 126.147 334.243 125.099 334.726 cv
92.5557 349.764 li
91.5093 350.193 90.3271 349.71 89.8438 348.744 cv
cp
129.718 341.816 mo
130.899 341.17 132.86 344.715 132.054 345.092 cv
132.135 345.092 118.548 353.469 118.548 353.469 cv
118.011 353.844 117.743 354.435 117.93 354.651 cv
118.171 355.027 118.708 354.972 119.246 354.49 cv
132.51 346.327 li
133.397 345.897 135.545 348.797 134.739 349.334 cv
121.851 358.034 li
121.233 358.356 120.991 359 121.125 359.215 cv
121.287 359.538 121.985 359.43 122.548 359.053 cv
135.491 350.354 li
136.028 349.979 138.418 352.717 137.639 353.307 cv
125.154 362.867 li
124.589 363.189 124.32 363.833 124.536 364.049 cv
124.777 364.424 125.341 364.317 125.878 363.833 cv
138.364 354.49 li
139.169 353.684 141.532 356.584 140.781 357.229 cv
125.636 369.526 li
119.515 374.466 118.548 365.123 116.453 361.954 cv
114.145 358.624 105.149 354.651 114.574 349.764 cv
129.718 341.816 li
cp
101.605 348.636 mo
125.878 337.412 li
126.925 336.875 128.081 337.143 128.429 337.841 cv
128.697 338.754 li
129.557 340.258 128.59 340.581 127.543 341.063 cv
108.156 351.428 li
101.068 356.1 108.291 359.914 111.969 365.123 cv
114.761 369.042 115.809 377.85 122.227 374.79 cv
140.941 359.376 li
141.801 358.624 142.821 358.517 143.493 359.215 cv
144.002 359.967 li
144.567 360.557 144.298 361.792 143.493 362.545 cv
122.817 380.588 li
111.916 389.665 107.217 378.28 102.518 370.815 cv
97.8726 363.565 88.2598 355.509 101.417 348.797 cv
101.497 348.744 101.551 348.744 101.605 348.636 cv
cp
120.856 393.692 mo
117.93 390.792 li
117.206 390.041 117.206 388.644 117.93 387.838 cv
144.352 363.565 li
145.077 362.867 146.393 362.867 147.225 363.565 cv
148.138 364.586 li
148.943 365.284 148.943 366.573 148.138 367.377 cv
123.811 393.692 li
123.005 394.605 121.744 394.605 120.856 393.692 cv
cp
155.119 372.158 mo
155.925 371.137 159.093 373.554 158.476 374.413 cv
158.529 374.198 149.373 387.194 149.373 387.194 cv
148.943 387.731 148.782 388.321 149.078 388.59 cv
149.373 388.805 149.963 388.537 150.393 388 cv
159.442 375.219 li
160.006 374.52 163.174 376.4 162.637 377.206 cv
154.018 390.148 li
153.669 390.685 153.562 391.329 153.857 391.598 cv
154.152 391.706 154.716 391.543 155.119 390.846 cv
163.711 377.904 li
164.141 377.313 167.363 378.924 166.854 379.836 cv
158.852 393.317 li
158.476 393.854 158.476 394.605 158.744 394.659 cv
159.093 394.874 159.657 394.605 160.006 393.907 cv
167.928 380.536 li
168.41 379.514 171.713 381.394 171.149 382.253 cv
161.886 399.384 li
158.18 406.151 153.669 397.989 150.608 396.001 cv
147.225 393.638 137.451 393.423 144.217 385.315 cv
155.119 372.158 li
cp
131.759 389.181 mo
149.91 369.58 li
150.716 368.667 151.736 368.452 152.434 369.042 cv
153.024 369.793 li
154.368 370.815 153.562 371.513 152.864 372.319 cv
138.847 389.342 li
134.148 396.377 142.231 397.075 147.601 400.458 cv
151.683 402.983 156.032 410.715 160.705 405.561 cv
172.196 384.079 li
172.68 383.167 173.7 382.577 174.452 383.004 cv
175.258 383.489 li
176.009 383.865 176.17 384.993 175.688 386.173 cv
163.551 410.715 li
156.972 423.228 148.272 414.475 141.103 409.319 cv
133.96 404.54 122.039 400.674 131.598 389.503 cv
131.651 389.342 131.705 389.288 131.759 389.181 cv
cp
166.854 423.551 mo
163.014 421.94 li
161.886 421.563 161.483 420.275 161.832 419.254 cv
176.922 386.764 li
177.405 385.69 178.613 385.208 179.58 385.583 cv
180.762 386.173 li
181.809 386.442 182.346 387.731 181.89 388.805 cv
169.539 422.477 li
169.189 423.444 167.847 423.926 166.854 423.551 cv
cp
190.214 390.469 mo
190.589 389.288 194.375 390.254 194.134 391.168 cv
194.134 391.061 190.589 406.528 190.589 406.528 cv
190.428 407.225 190.589 407.87 190.965 407.922 cv
191.287 407.977 191.663 407.547 191.824 406.903 cv
195.289 391.652 li
195.664 390.792 199.209 391.329 198.94 392.243 cv
195.986 407.547 li
195.933 408.192 196.04 408.836 196.47 408.944 cv
196.793 408.944 197.221 408.459 197.33 407.815 cv
200.283 392.51 li
200.444 391.866 204.016 392.027 203.988 393.047 cv
201.68 408.675 li
201.68 409.266 201.867 409.803 202.242 409.911 cv
202.592 410.071 202.888 409.481 203.076 408.782 cv
205.277 393.262 li
205.331 392.243 208.955 392.618 208.875 393.638 cv
206.808 412.971 li
206.029 420.704 198.672 414.85 195.073 414.26 cv
191.072 413.401 181.89 416.891 185.139 406.742 cv
190.214 390.469 li
cp
175.15 415.227 mo
184.387 390.041 li
184.763 388.913 185.623 388.43 186.428 388.644 cv
187.341 389.074 li
189.006 389.503 188.469 390.469 188.092 391.598 cv
181.729 412.542 li
180.011 420.919 187.851 418.395 194.08 419.469 cv
198.859 420.275 205.814 425.806 208.123 419.147 cv
210.486 394.981 li
210.54 393.854 211.346 393.047 212.205 393.101 cv
213.117 393.262 li
213.95 393.317 214.514 394.336 214.514 395.464 cv
212.688 422.798 li
211.398 436.976 200.041 432.196 191.449 430.317 cv
183.018 428.383 170.585 429.405 175.15 415.496 cv
175.15 415.334 175.15 415.227 175.15 415.227 cv
cp
220.689 433.431 mo
216.474 433.431 li
215.427 433.431 214.434 432.465 214.434 431.338 cv
215.91 395.572 li
215.91 394.444 216.822 393.477 218.005 393.477 cv
219.24 393.477 li
220.421 393.477 221.28 394.444 221.28 395.572 cv
222.73 431.338 li
222.73 432.465 221.817 433.431 220.689 433.431 cv
cp
229.604 393.907 mo
229.497 392.725 233.364 392.188 233.497 393.209 cv
233.444 392.94 236.129 408.729 236.129 408.729 cv
236.237 409.319 236.559 409.803 236.988 409.803 cv
237.312 409.749 237.525 409.159 237.391 408.459 cv
234.841 393.101 li
234.706 392.188 238.251 391.329 238.438 392.243 cv
241.526 407.495 li
241.634 408.192 242.063 408.675 242.386 408.675 cv
242.842 408.568 242.976 407.922 242.842 407.225 cv
239.7 391.92 li
239.539 391.276 243.03 390.148 243.325 391.115 cv
247.245 406.258 li
247.407 406.958 247.836 407.495 248.104 407.385 cv
248.534 407.225 248.642 406.581 248.534 406.043 cv
244.56 390.792 li
244.211 389.825 247.782 388.805 248.052 389.772 cv
253.609 408.352 li
255.757 415.871 246.816 413.348 243.138 413.992 cv
239.218 414.85 232.128 421.563 231.216 411.038 cv
229.604 393.907 li
cp
225.12 422.53 mo
224.046 395.786 li
223.991 394.659 224.61 393.692 225.47 393.692 cv
226.355 393.692 li
228.154 393.531 228.101 394.659 228.101 395.786 cv
230.195 417.59 li
231.86 425.967 238.116 420.704 244.265 419.308 cv
248.909 418.235 257.503 420.651 257.1 413.562 cv
250.092 390.417 li
249.743 389.342 250.092 388.321 250.925 388.053 cv
251.892 387.731 li
252.696 387.57 253.609 388.214 253.985 389.288 cv
262.846 415.227 li
266.981 428.76 254.656 428.76 246.011 430.317 cv
237.525 431.821 226.355 437.459 225.281 422.959 cv
225.228 422.798 225.12 422.745 225.12 422.53 cv
cp
274.231 421.993 mo
270.364 423.604 li
269.264 424.088 268.056 423.604 267.571 422.53 cv
255.274 388.913 li
254.897 387.731 255.382 386.603 256.401 386.173 cv
257.529 385.69 li
258.55 385.261 259.839 385.798 260.321 386.819 cv
275.358 419.308 li
275.735 420.382 275.251 421.563 274.231 421.993 cv
cp
267.33 382.092 mo
266.713 381.018 270.177 379.032 270.605 379.836 cv
270.605 379.729 278.983 393.262 278.983 393.262 cv
279.359 393.854 279.978 394.122 280.22 393.907 cv
280.54 393.799 280.406 393.209 280.11 392.564 cv
271.841 379.408 li
271.411 378.495 274.284 376.4 274.821 377.206 cv
283.575 390.041 li
283.87 390.631 284.542 390.954 284.729 390.685 cv
285.052 390.469 285.024 389.987 284.622 389.342 cv
275.896 376.4 li
275.52 375.863 278.259 373.5 278.876 374.305 cv
288.354 386.819 li
288.73 387.356 289.321 387.57 289.644 387.356 cv
289.886 387.194 289.804 386.603 289.401 385.959 cv
279.978 373.5 li
279.306 372.641 282.151 370.44 282.742 371.137 cv
295.014 386.334 li
300.008 392.403 290.69 393.423 287.603 395.464 cv
284.14 397.774 280.22 406.742 275.358 397.29 cv
267.33 382.092 li
cp
274.177 410.393 mo
262.953 385.959 li
262.47 384.993 262.657 383.811 263.437 383.489 cv
264.296 383.167 li
265.854 382.253 266.122 383.328 266.632 384.348 cv
276.97 403.734 li
281.669 410.877 285.509 403.52 290.69 399.921 cv
294.53 397.075 303.338 396.055 300.276 389.772 cv
284.917 370.976 li
284.14 370.117 284.112 368.989 284.729 368.452 cv
285.509 367.862 li
286.26 367.377 287.334 367.646 288.086 368.452 cv
306.156 389.074 li
315.206 399.921 303.767 404.701 296.41 409.319 cv
289.106 414.099 281.024 423.604 274.392 410.608 cv
274.231 410.448 274.231 410.393 274.177 410.393 cv
cp
319.287 390.954 mo
316.308 393.854 li
315.555 394.659 314.212 394.659 313.353 393.854 cv
289.079 367.646 li
288.354 366.788 288.354 365.444 289.079 364.693 cv
289.993 363.833 li
290.853 362.975 292.141 362.975 292.946 363.833 cv
319.287 388.053 li
320.093 388.913 320.093 390.202 319.287 390.954 cv
cp
297.646 356.692 mo
296.679 356.047 299.042 352.825 299.9 353.416 cv
299.739 353.307 312.763 362.545 312.763 362.545 cv
313.245 362.975 313.89 363.028 314.159 362.759 cv
314.347 362.491 314.104 361.901 313.487 361.524 cv
300.706 352.449 li
300.008 351.965 301.941 348.744 302.72 349.334 cv
315.716 357.873 li
316.253 358.302 316.844 358.302 317.085 358.034 cv
317.272 357.711 317.031 357.174 316.44 356.745 cv
303.418 348.26 li
302.827 347.777 304.491 344.5 305.352 345.092 cv
318.857 352.932 li
319.421 353.307 320.038 353.416 320.254 353.093 cv
320.469 352.717 320.093 352.288 319.502 351.965 cv
306.103 343.963 li
305.083 343.426 306.882 340.258 307.795 340.688 cv
324.872 349.979 li
331.692 353.684 323.53 358.249 321.489 361.309 cv
319.181 364.8 318.938 374.52 310.856 367.7 cv
297.646 356.692 li
cp
314.749 380.159 mo
295.121 361.901 li
294.208 361.202 293.966 360.235 294.584 359.43 cv
295.202 358.839 li
296.302 357.604 297.055 358.302 297.887 359.053 cv
314.856 373.071 li
321.919 377.85 322.616 369.633 325.974 364.317 cv
328.551 360.235 336.229 355.885 331.048 351.106 cv
309.701 339.721 li
308.654 339.184 308.117 338.164 308.546 337.412 cv
309.03 336.66 li
309.46 335.854 310.533 335.693 311.607 336.176 cv
336.229 348.313 li
348.689 354.866 339.963 363.565 334.914 370.815 cv
330.135 377.904 326.241 389.825 315.018 380.266 cv
314.964 380.213 314.749 380.159 314.749 380.159 cv
cp
348.958 345.092 mo
347.427 348.85 li
347.078 349.924 345.87 350.569 344.742 349.979 cv
312.333 334.942 li
311.178 334.458 310.695 333.277 311.124 332.31 cv
311.607 331.129 li
312.091 330.054 313.192 329.572 314.347 330 cv
347.937 342.353 li
348.958 342.836 349.495 344.018 348.958 345.092 cv
cp
315.984 321.677 mo
314.749 321.301 315.823 317.489 316.735 317.756 cv
316.549 317.756 332.122 321.301 332.122 321.301 cv
332.874 321.515 333.491 321.301 333.491 320.979 cv
333.491 320.71 333.089 320.227 332.39 320.012 cv
317.165 316.522 li
316.308 316.252 316.844 312.655 317.757 312.816 cv
333.089 315.824 li
333.733 315.93 334.351 315.824 334.431 315.448 cv
334.484 315.125 334.001 314.696 333.249 314.588 cv
317.998 311.635 li
317.407 311.473 317.542 307.875 318.616 308.037 cv
334.109 310.131 li
334.835 310.292 335.345 309.97 335.397 309.594 cv
335.505 309.325 334.968 309.057 334.351 308.896 cv
318.857 306.639 li
317.757 306.639 318.239 302.881 319.181 302.988 cv
338.54 305.083 li
346.326 305.888 340.446 313.139 339.722 316.736 cv
338.942 320.817 342.485 330 332.39 326.725 cv
315.984 321.677 li
cp
340.768 336.713 mo
315.608 327.531 li
314.48 327.208 313.89 326.242 314.212 325.436 cv
314.534 324.577 li
315.018 322.858 316.038 323.449 317.085 323.772 cv
338.056 330.163 li
346.407 331.827 344.017 324.093 345.011 317.81 cv
345.87 312.977 351.347 306.157 344.635 303.741 cv
320.522 301.43 li
319.395 301.323 318.562 300.518 318.616 299.712 cv
318.804 298.799 li
318.857 297.94 319.824 297.243 321.06 297.403 cv
348.366 299.175 li
362.437 300.465 357.685 311.849 355.806 320.442 cv
354.086 328.926 354.945 341.333 341.091 336.821 cv
340.875 336.821 340.768 336.713 340.768 336.713 cv
cp
359 291.174 mo
359 295.363 li
359 296.491 358.033 297.403 356.879 297.403 cv
321.112 296.061 li
319.932 296.061 319.071 295.148 319.071 293.913 cv
319.071 292.678 li
319.071 291.549 319.932 290.53 321.112 290.53 cv
356.879 289.133 li
358.033 289.133 359 290.1 359 291.174 cv
cp
319.502 282.368 mo
318.239 282.42 317.757 278.5 318.696 278.393 cv
318.509 278.393 334.243 275.869 334.243 275.869 cv
334.888 275.654 335.397 275.278 335.345 274.956 cv
335.317 274.633 334.726 274.473 334.056 274.526 cv
318.616 277.158 li
317.757 277.211 316.844 273.614 317.757 273.506 cv
333.089 270.337 li
333.733 270.176 334.243 269.8 334.109 269.424 cv
334.109 269.102 333.491 268.887 332.874 269.102 cv
317.515 272.217 li
316.735 272.325 315.688 268.887 316.628 268.62 cv
331.8 264.698 li
332.498 264.538 332.927 264.054 332.874 263.786 cv
332.874 263.356 332.122 263.195 331.478 263.463 cv
316.36 267.383 li
315.341 267.706 314.347 264.054 315.286 263.84 cv
333.975 258.308 li
341.466 256.16 338.808 265.075 339.532 268.727 cv
340.393 272.753 347.132 279.79 336.553 280.648 cv
319.502 282.368 li
cp
348.099 286.77 mo
321.382 287.792 li
320.2 287.844 319.287 287.254 319.287 286.394 cv
319.287 285.481 li
319.126 283.817 320.2 283.817 321.328 283.817 cv
343.132 281.615 li
351.429 280.057 346.326 273.72 344.796 267.598 cv
343.775 262.926 346.165 254.388 339.05 254.763 cv
315.931 261.852 li
314.856 262.174 313.782 261.799 313.541 260.993 cv
313.3 260.026 li
313.058 259.221 313.729 258.308 314.856 257.932 cv
340.768 249.071 li
354.354 244.829 354.247 257.18 355.806 265.934 cv
357.362 274.365 363.054 285.589 348.421 286.77 cv
348.313 286.77 348.152 286.77 348.099 286.77 cv
cp
347.507 237.686 mo
349.173 241.553 li
349.602 242.573 349.064 243.754 347.991 244.239 cv
314.427 256.59 li
313.353 257.02 312.145 256.536 311.661 255.461 cv
311.231 254.334 li
310.802 253.314 311.366 252.131 312.386 251.649 cv
344.796 236.504 li
345.87 236.022 347.132 236.612 347.507 237.686 cv
cp
307.606 244.56 mo
306.56 245.151 304.626 241.661 305.352 241.284 cv
318.857 232.907 li
319.395 232.477 319.718 231.94 319.502 231.725 cv
319.341 231.349 318.696 231.403 318.025 231.779 cv
304.814 240.103 li
304.063 240.479 301.86 237.526 302.72 237.096 cv
315.608 228.342 li
316.173 227.966 316.468 227.483 316.253 227.107 cv
316.038 226.786 315.447 226.838 314.91 227.323 cv
301.995 235.967 li
301.323 236.344 298.987 233.659 299.793 232.907 cv
312.333 223.563 li
312.87 223.08 313.139 222.596 312.923 222.274 cv
312.682 222.059 312.091 222.113 311.554 222.489 cv
299.042 231.94 li
298.235 232.639 295.98 229.684 296.679 229.094 cv
311.823 216.958 li
317.944 211.963 318.938 221.307 321.005 224.368 cv
323.288 227.698 332.202 231.725 322.777 236.504 cv
307.606 244.56 li
cp
335.8 237.793 mo
311.474 248.91 li
310.427 249.447 309.46 249.233 309.03 248.427 cv
308.708 247.514 li
307.849 246.118 308.923 245.634 309.89 245.313 cv
329.276 234.84 li
336.391 230.221 329.088 226.516 325.437 221.307 cv
322.616 217.333 321.624 208.633 315.286 211.586 cv
296.544 226.946 li
295.685 227.698 294.53 227.805 293.966 227.107 cv
293.483 226.516 li
292.892 225.711 293.161 224.583 293.966 223.831 cv
314.534 205.733 li
325.437 196.711 330.188 208.151 334.914 215.561 cv
339.56 222.756 349.173 230.919 336.122 237.526 cv
335.881 237.632 335.881 237.686 335.8 237.793 cv
cp
316.468 192.684 mo
319.421 195.477 li
320.254 196.335 320.254 197.678 319.421 198.483 cv
293.107 222.756 li
292.382 223.563 290.985 223.563 290.261 222.756 cv
289.321 221.844 li
288.462 221.039 288.462 219.803 289.321 218.891 cv
313.541 192.684 li
314.427 191.825 315.716 191.825 316.468 192.684 cv
cp
282.286 214.165 mo
281.507 215.131 278.446 212.822 278.93 212.071 cv
278.876 212.124 288.086 199.182 288.086 199.182 cv
288.462 198.645 288.596 198 288.301 197.786 cv
288.032 197.516 287.495 197.893 287.065 198.483 cv
278.017 211.157 li
277.453 211.856 274.231 209.976 274.821 209.225 cv
283.388 196.174 li
283.844 195.637 283.87 195.1 283.575 194.778 cv
283.279 194.618 282.742 194.94 282.313 195.422 cv
273.72 208.526 li
273.372 209.116 270.068 207.398 270.605 206.485 cv
278.554 193.059 li
278.876 192.416 278.876 191.825 278.581 191.61 cv
278.259 191.449 277.774 191.825 277.399 192.416 cv
269.452 205.895 li
269.022 206.754 265.8 205.036 266.229 204.123 cv
275.52 187.045 li
279.253 180.171 283.763 188.387 286.851 190.428 cv
290.315 192.684 300.008 192.899 293.241 200.954 cv
282.286 214.165 li
cp
305.674 197.088 mo
287.55 216.903 li
286.797 217.709 285.616 217.87 285.024 217.333 cv
284.381 216.581 li
283.011 215.561 283.87 214.755 284.622 213.95 cv
298.665 197.088 li
303.338 189.999 295.147 189.301 289.804 185.864 cv
285.723 183.34 281.4 175.66 276.728 180.87 cv
265.263 202.243 li
264.726 203.262 263.705 203.747 263.007 203.262 cv
262.147 202.834 li
261.45 202.458 261.235 201.276 261.692 200.256 cv
273.909 175.713 li
280.406 163.148 289.106 171.955 296.41 177.003 cv
303.418 181.836 315.394 185.756 305.835 196.873 cv
305.728 196.979 305.728 197.088 305.674 197.088 cv
cp
270.605 162.825 mo
274.445 164.49 li
275.439 164.92 276.003 166.047 275.52 167.122 cv
260.456 199.611 li
260.081 200.685 258.792 201.168 257.825 200.74 cv
256.671 200.256 li
255.569 199.879 255.14 198.645 255.516 197.516 cv
267.921 164.006 li
268.351 162.879 269.505 162.396 270.605 162.825 cv
cp
0 0 1 .1 cmyk
ef
63.7051 293.161 mo
63.7051 210.889 136.404 138.191 218.703 138.191 cv
301.001 138.191 373.673 210.889 373.673 293.161 cv
373.673 375.379 301.001 448.239 218.703 448.239 cv
136.404 448.239 63.7051 375.379 63.7051 293.161 cv
cp
72.4175 293.161 mo
72.4175 212.393 137.935 146.822 218.703 146.822 cv
299.552 146.822 365.042 212.393 365.042 293.161 cv
365.042 373.983 299.552 439.5 218.703 439.5 cv
137.935 439.5 72.4175 373.983 72.4175 293.161 cv
cp
1 .9 .1 0 cmyk
ef
63.7051 293.161 mo
63.7051 210.889 136.404 138.191 218.703 138.191 cv
301.001 138.191 373.673 210.889 373.673 293.161 cv
373.673 375.379 301.001 448.239 218.703 448.239 cv
136.404 448.239 63.7051 375.379 63.7051 293.161 cv
cp
72.4175 293.161 mo
72.4175 212.393 137.935 146.822 218.703 146.822 cv
299.552 146.822 365.042 212.393 365.042 293.161 cv
365.042 373.983 299.552 439.5 218.703 439.5 cv
137.935 439.5 72.4175 373.983 72.4175 293.161 cv
cp
0 0 0 1 cmyk
@
412.272 610.616 mo
412.272 588.524 li
408.245 588.631 403.788 588.631 403.788 588.364 cv
404.03 582.832 398.767 574.4 390.496 574.668 cv
390.39 572.627 li
365.095 572.627 li
382.36 564.465 394.282 546.85 394.282 526.551 cv
394.282 503.674 379.165 484.234 358.463 477.843 cv
353.12 475.857 345.548 472.634 344.259 463.291 cv
342.862 454.107 351.643 447.877 352.448 447.288 cv
395.464 409.803 422.664 354.704 422.664 293.161 cv
422.664 203.262 364.505 126.898 283.763 99.8325 cv
279.146 98.2212 274.58 96.8794 269.882 95.6436 cv
271.896 91.2939 273.425 86.5679 274.231 81.7349 cv
274.876 78.4053 275.198 75.0215 275.198 71.585 cv
275.198 40.0615 249.635 14.3384 218.005 14.3384 cv
186.374 14.3384 160.705 40.0615 160.705 71.585 cv
160.705 75.1836 161 78.6201 161.725 81.9492 cv
162.637 86.8906 164.141 91.5625 166.182 96.0195 cv
161.483 97.2007 156.837 98.7046 152.273 100.208 cv
72.1758 127.65 14.6875 203.747 14.6875 293.161 cv
14.6875 355.081 42.2104 410.448 85.6284 447.877 cv
89.1191 451.476 91.0791 456.684 90.7031 462 cv
90.166 470.217 83.0503 475.964 77.1968 477.843 cv
56.4409 484.234 41.377 503.674 41.377 526.551 cv
41.377 546.85 53.353 564.465 70.6455 572.627 cv
45.2705 572.627 li
45.1636 574.668 li
36.894 574.4 31.6309 582.832 31.8726 588.364 cv
31.8726 588.631 27.3613 588.631 23.4951 588.524 cv
23.4951 610.616 li
215.99 610.616 li
219.723 610.616 li
412.272 610.616 li
cp
363.403 457.221 mo
362.599 458.028 362.114 459.799 362.249 460.551 cv
362.437 462.485 364.397 464.096 366.76 464.848 cv
391.544 474.299 409.212 498.358 409.212 526.551 cv
409.212 539.762 405.345 552.006 398.659 562.424 cv
406.526 562.424 li
406.526 569.513 li
411.87 570.426 417.751 578.159 417.751 583.154 cv
428.276 583.154 li
428.276 627.372 li
219.723 627.372 li
215.99 627.372 li
7.38379 627.372 li
7.38379 583.154 li
17.9629 583.154 li
17.9629 578.159 23.79 570.426 29.0796 569.513 cv
29.0796 562.424 li
37.001 562.424 li
30.395 552.006 26.4219 539.762 26.4219 526.551 cv
26.4219 498.358 44.1431 474.299 68.9536 464.848 cv
71.209 464.096 72.6865 462.377 72.9546 459.799 cv
73.1689 458.404 72.5249 456.147 70.9673 454.752 cv
27.2539 414.529 0 357.122 0 293.268 cv
0 197.249 61.7847 115.621 147.896 86.1919 cv
146.876 81.4668 146.339 76.6328 146.339 71.585 cv
146.339 32.0601 178.426 0 218.005 0 cv
257.503 0 289.59 32.0601 289.59 71.585 cv
289.59 76.3647 289.079 81.144 288.086 85.7627 cv
374.843 114.815 437.405 196.711 437.405 293.268 cv
437.405 358.463 408.782 417.161 363.403 457.221 cv
cp
1 .9 .1 0 cmyk
f
31.8726 600.641 mo
31.8726 594.485 li
209.251 594.485 li
226.462 594.485 li
403.842 594.485 li
403.842 600.63 li
31.8726 600.641 li
cp
39.229 591.854 mo
39.229 585.946 43.875 581.436 49.6475 581.436 cv
208.875 581.436 li
226.865 581.436 li
386.04 581.436 li
391.784 581.436 396.431 585.946 396.431 591.854 cv
396.431 592.659 li
226.462 592.659 li
209.251 592.659 li
39.229 592.659 li
39.229 591.854 li
cp
398.714 592.659 mo
398.714 591.692 li
398.714 584.765 393.074 579.125 386.093 579.125 cv
222.542 579.125 li
213.117 579.125 li
49.5942 579.125 li
42.6392 579.125 37.001 584.765 37.001 591.692 cv
37.001 592.659 li
29.4282 592.659 li
29.4282 602.702 li
406.339 602.702 li
406.339 592.659 li
398.714 592.659 li
cp
0 0 0 1 cmyk
f
223.696 266.793 mo
223.348 268.028 222.918 269.102 222.649 269.8 cv
223.134 270.659 223.455 271.68 223.696 272.7 cv
226.437 273.72 li
237.149 274.956 239.485 275.869 250.064 273.399 cv
262.604 270.606 262.47 268.887 274.714 274.902 cv
274.929 274.473 li
276.647 270.122 273.613 266.095 268.968 265.772 cv
267.571 265.665 262.47 267.116 260.939 267.383 cv
250.655 269.854 246.091 268.941 235.914 265.772 cv
232.45 264.591 229.819 263.625 229.013 263.195 cv
226.248 264.377 228.101 267.383 228.691 268.887 cv
228.691 268.887 225.55 267.867 225.065 267.545 cv
224.61 267.383 224.046 267.116 223.696 266.793 cv
cp
203.316 254.709 mo
202.592 257.45 200.39 258.04 198.027 257.18 cv
196.899 256.804 193.248 255.409 192.093 256.106 cv
192.146 256.321 192.361 256.428 192.416 256.59 cv
192.416 256.59 193.704 258.04 193.167 258.738 cv
192.63 259.543 190.912 258.684 190.912 258.684 cv
190.912 258.684 190.67 258.524 190.482 258.308 cv
188.092 255.409 190.482 252.991 193.785 253.314 cv
195.879 253.528 197.598 254.602 199.584 254.979 cv
201.115 254.709 200.873 253.314 200.74 252.293 cv
203.639 251.649 205.331 252.293 207.479 254.012 cv
207.963 253.368 208.338 252.67 208.338 251.704 cv
208.338 250.36 li
209.627 250.36 li
211.587 250.36 213.467 251.594 214.891 252.67 cv
215.186 252.186 li
217.387 248.535 218.542 249.984 221.334 252.293 cv
222.354 253.098 li
222.085 251.434 222.085 249.447 222.649 247.352 cv
221.817 247.674 li
221.79 247.514 221.012 245.634 220.207 244.239 cv
218.863 245.85 216.77 246.923 214.891 247.836 cv
213.521 246.01 211.694 243.647 209.814 242.358 cv
209.305 245.313 207.426 247.137 205.331 249.018 cv
204.283 247.084 203.263 245.097 201.491 243.702 cv
200.873 246.815 198.94 248.535 196.309 249.876 cv
195.073 248.319 193.489 246.547 191.879 245.527 cv
191.663 247.299 190.644 249.018 189.623 250.36 cv
187.771 251.971 180.977 252.67 178.882 252.884 cv
178.318 251.704 176.546 248.535 174.881 248.91 cv
171.338 249.608 171.016 253.368 173.861 255.946 cv
175.902 257.717 177.137 258.844 177.459 260.563 cv
179.044 260.563 li
179.044 260.563 185.702 261.53 188.521 262.282 cv
188.951 262.336 li
188.951 262.121 li
191.986 262.121 li
194.993 263.141 li
195.933 261.583 196.523 261.262 197.92 260.456 cv
198.725 261.422 199.531 262.174 200.578 262.766 cv
201.195 260.993 202.297 260.134 203.639 259.006 cv
204.66 260.456 205.09 260.993 206.727 261.959 cv
207.156 260.993 207.747 259.597 208.955 258.738 cv
210.916 259.866 li
211.131 260.134 212.5 260.563 213.037 260.671 cv
213.117 260.456 li
213.95 258.469 214.997 257.987 216.662 256.913 cv
217.252 259.436 217.279 259.758 219.965 260.295 cv
221.012 255.409 li
219.723 254.334 li
219.025 253.744 218.326 253.207 217.844 252.884 cv
216.903 254.12 216.367 255.624 215.723 256.913 cv
215.723 256.913 213.654 254.924 212.688 254.226 cv
211.963 253.744 211.346 253.475 210.781 253.207 cv
210.245 255.3 209.037 256.321 207.371 257.45 cv
207.371 257.45 206.459 256.59 206.189 256.321 cv
205.331 255.676 204.364 254.924 203.316 254.709 cv
cp
223.294 276.191 mo
222.085 277.641 222.032 277.749 222.167 279.305 cv
222.649 278.5 223.563 278.553 224.046 278.662 cv
223.294 276.191 li
cp
221.495 280.057 mo
219.563 280.272 218.326 279.897 216.903 278.016 cv
216.715 277.641 li
215.91 278.553 215.186 279.467 214.514 280.434 cv
212.635 280.272 211.963 279.736 210.916 278.125 cv
210.164 278.93 209.439 279.79 208.606 280.594 cv
208.123 280.594 li
206.996 280.594 205.895 279.305 205.277 278.553 cv
204.498 277.909 li
202.888 278.875 202.592 279.038 202.109 280.809 cv
200.203 280.594 199.584 280.434 198.188 278.93 cv
197.758 278.5 li
197.437 278.823 li
196.793 279.305 196.201 279.897 195.664 280.434 cv
195.719 280.434 195.744 281.293 195.664 282.42 cv
198.081 281.293 li
200.336 283.387 li
204.553 281.507 li
207.104 283.387 li
210.781 281.561 li
214.219 282.958 li
218.219 279.79 li
219.723 281.507 li
220.421 280.971 li
220.77 280.755 221.119 280.434 221.495 280.057 cv
cp
243.138 252.401 mo
242.224 250.36 240.882 248.91 238.813 248.266 cv
238.681 249.447 238.251 251.704 238.251 253.098 cv
238.251 253.368 238.251 253.744 238.251 254.12 cv
240.506 250.252 li
240.506 250.252 241.661 252.884 241.902 253.098 cv
246.091 259.275 254.897 258.147 261.235 257.502 cv
263.974 257.288 266.632 256.965 268.78 256.75 cv
266.82 255.946 265.103 254.872 263.437 253.528 cv
262.953 254.12 262.524 254.709 262.147 255.3 cv
259.06 255.676 256.375 252.131 254.71 249.93 cv
254.415 250.79 li
253.286 253.744 252.696 254.979 249.339 255.676 cv
249.125 253.098 247.944 250.414 246.279 248.427 cv
246.011 250.951 245.526 251.649 243.138 252.401 cv
cp
238.304 248.051 mo
237.901 248.051 237.525 247.889 237.042 247.836 cv
235.995 247.836 235.001 248.051 234.411 248.803 cv
234.841 248.641 li
235.619 248.373 237.312 248.104 238.251 248.051 cv
238.304 248.051 li
cp
183.394 320.012 mo
177.809 316.252 174.452 309.97 173.969 302.934 cv
170.854 302.452 167.363 298.263 165.833 296.222 cv
164.813 295.363 li
164.248 296.061 163.551 296.491 162.637 296.92 cv
162.799 297.243 li
163.174 297.995 163.658 299.336 163.496 300.518 cv
163.336 301.915 162.637 302.934 161.429 303.741 cv
162.342 305.297 162.744 307.016 162.1 308.466 cv
165.484 309.808 167.175 313.567 165.107 316.252 cv
167.363 316.36 168.195 315.233 169.539 313.944 cv
171.579 317.971 174.398 321.086 177.942 323.825 cv
179.742 323.18 181.862 321.624 183.394 320.012 cv
cp
159.281 310.829 mo
157.778 311.312 155.871 311.528 153.401 311.528 cv
152.434 311.528 151.414 311.473 150.608 311.366 cv
146.258 311.795 145.346 317.219 155.521 316.897 cv
156.757 316.897 157.697 316.736 158.69 316.628 cv
158.852 316.415 159.093 316.415 159.281 316.415 cv
165.322 315.125 163.174 311.043 159.281 310.829 cv
cp
159.898 297.995 mo
158.073 298.424 155.925 298.638 153.347 298.532 cv
151.253 298.532 149.48 298.424 148.084 298.155 cv
145.426 301.7 150.232 302.29 153.186 302.397 cv
155.737 302.397 163.066 302.237 159.898 297.995 cv
cp
158.26 288.542 mo
157.832 288.649 li
157.079 284.891 160.328 249.876 164.839 235.915 cv
150.608 247.352 149.373 284.299 149.695 288.542 cv
148.943 288.649 li
149.856 292.571 157.186 291.067 158.207 289.026 cv
158.207 288.865 158.26 288.758 158.26 288.542 cv
cp
146.741 288.274 mo
145.694 288.758 144.298 289.402 144.11 291.012 cv
143.922 293.698 144.486 296.276 153.401 296.491 cv
162.342 296.706 164.248 293.322 164.248 291.872 cv
164.248 289.348 161.886 288.649 160.436 288.435 cv
160.14 294.075 147.306 295.469 146.741 288.274 cv
cp
158.69 304.76 mo
157.186 305.136 155.307 305.297 153.186 305.297 cv
151.683 305.297 150.232 305.083 148.81 304.708 cv
147.682 307.016 148.782 308.037 150.716 308.413 cv
150.93 308.413 151.146 308.413 151.414 308.413 cv
152.004 308.627 152.648 308.627 153.401 308.627 cv
155.012 308.627 157.455 308.52 158.69 307.875 cv
159.657 307.286 159.898 306.319 158.69 304.76 cv
cp
157.186 328.389 mo
156.649 328.389 156.167 328.389 155.521 328.389 cv
154.931 328.389 154.368 328.389 153.857 328.389 cv
152.756 329.463 152.192 332.417 155.737 332.417 cv
159.71 332.417 158.26 329.572 157.186 328.389 cv
cp
150.876 319.529 mo
146.07 319.744 142.284 325.436 155.521 325.49 cv
168.303 325.705 164.813 320.334 160.489 319.099 cv
159.173 319.529 157.509 319.744 155.549 319.905 cv
153.777 319.958 152.111 319.744 150.876 319.529 cv
cp
260.456 316.252 mo
259.731 318.883 256.831 320.979 256.187 323.288 cv
256.482 324.2 258.2 325.006 259.784 325.006 cv
260.939 325.006 li
261.477 330 258.926 331.129 256.804 334.458 cv
256.724 335.263 256.831 336.016 257.449 336.5 cv
257.69 336.713 li
258.926 336.284 260.269 335.854 262.147 335.693 cv
263.651 335.639 266.579 337.197 266.713 336.66 cv
267.356 334.029 263.974 331.88 266.874 325.758 cv
267.115 325.275 267.25 324.846 267.33 324.416 cv
266.874 323.019 262.524 319.045 261.262 316.252 cv
260.939 316.252 260.751 316.252 260.456 316.252 cv
cp
238.788 313.622 mo
237.659 321.624 239.78 323.449 243.567 329.356 cv
245.151 331.827 245.097 335.639 243.997 338.271 cv
242.493 341.816 237.202 338.647 234.947 339.614 cv
233.176 340.096 229.497 347.669 232.343 348.313 cv
232.343 347.669 234.411 343.802 236.237 343.802 cv
236.397 344.5 236.451 347.508 237.821 347.991 cv
238.868 346.703 239.728 344.5 241.902 343.802 cv
242.116 346.703 241.634 347.079 243.406 347.508 cv
244.185 346.273 245.85 343.641 247.515 343.641 cv
248.909 343.641 249.446 344.876 249.635 345.95 cv
249.662 346.649 li
249.662 346.917 li
251.462 346.595 252.911 345.252 253.985 343.641 cv
254.28 342.674 254.656 341.762 254.951 341.01 cv
255.382 340.151 255.757 339.614 256.134 339.023 cv
255.757 338.647 li
253.609 336.983 253.556 334.351 255.14 332.417 cv
256.241 330.914 257.69 329.302 258.255 327.584 cv
254.845 326.886 252.429 324.577 254.28 321.301 cv
254.951 319.958 258.2 316.252 257.932 313.997 cv
251.892 306.264 246.091 309.325 238.788 313.622 cv
cp
177.459 263.356 mo
177.405 264.268 li
177.405 264.268 174.452 264.268 172.787 264 cv
171.713 263.625 170.961 263.087 170.29 262.444 cv
170.102 265.558 172.412 266.256 175.15 266.256 cv
177.942 266.256 180.332 265.451 183.259 266.202 cv
184.924 266.631 188.227 267.383 190.482 268.028 cv
189.811 266.631 188.898 265.182 187.904 264.914 cv
185.354 264.268 179.849 263.463 178.882 263.249 cv
177.459 263.356 li
cp
215.695 244.399 mo
216.285 244.077 218.542 242.573 218.542 241.768 cv
218.542 239.297 li
221.334 241.177 222.542 242.305 223.563 244.776 cv
225.389 241.284 229.335 238.331 237.312 237.793 cv
250.44 236.612 260.618 240.64 270.874 248.051 cv
271.197 248.319 273.613 250.038 274.177 250.145 cv
274.58 249.77 li
276.379 243.486 285.239 247.299 284.246 253.69 cv
283.87 256.321 281.562 257.717 278.876 258.308 cv
282.528 260.295 285.239 263.84 286.152 267.168 cv
287.495 272.11 285.616 276.621 284.058 281.024 cv
284.246 281.401 li
291.55 291.174 287.334 297.671 283.575 307.338 cv
281.507 312.655 280.272 317.059 281.239 319.42 cv
282.206 321.731 285.777 323.986 288.247 324.416 cv
288.677 327.531 287.656 328.605 285.348 330.43 cv
284.246 331.343 li
281.185 334.029 282.528 333.975 283.011 337.143 cv
283.226 338.647 283.87 343.481 282.716 345.092 cv
280.81 347.293 277.399 350.569 275.306 347.079 cv
274.929 346.487 li
273.962 345.092 273.237 345.628 272.512 346.649 cv
271.948 347.293 li
270.552 349.173 266.444 351.428 265.585 347.991 cv
263.142 349.764 261.128 349.387 260.269 347.777 cv
258.523 349.173 256.241 349.817 254.656 348.153 cv
254.36 347.991 254.28 347.669 254.093 347.401 cv
251.407 349.602 247.407 351.266 247.003 346.864 cv
246.333 347.669 245.526 349.173 245.231 349.924 cv
243.325 350.569 241.795 350.193 240.56 348.744 cv
240.075 349.442 239.539 350.085 238.788 350.623 cv
237.042 350.946 235.808 350.193 234.841 348.797 cv
233.444 350.946 li
233.444 350.946 232.504 351.106 232.128 350.946 cv
225.389 350.193 229.927 338.378 234.034 337.143 cv
236.451 336.176 239.108 337.626 241.526 337.25 cv
242.332 335.372 242.493 332.471 241.258 330.86 cv
237.202 324.362 234.626 323.019 235.538 315.448 cv
225.12 321.515 220.421 323.502 206.619 325.006 cv
206.566 324.737 li
203.881 331.183 209.869 328.605 212.875 327.423 cv
212.875 329.463 li
212.875 335.372 207.908 335.962 205.895 338.164 cv
205.52 341.333 210.432 347.831 205.277 349.924 cv
203.531 350.623 202.297 349.387 201.195 348.313 cv
200.631 347.669 li
198.376 345.36 196.523 348.636 193.704 349.764 cv
193.408 349.764 li
190.912 349.764 189.328 348.636 188.629 347.293 cv
187.771 348.153 187.662 348.313 187.287 349.548 cv
184.924 349.764 184.172 347.669 183.394 346.864 cv
181.299 349.442 li
172.063 346.971 178.882 337.841 182.454 336.821 cv
185.998 335.747 188.817 338.54 190.67 337.25 cv
191.449 335.479 191.879 330.163 191.879 328.389 cv
191.879 326.94 190.857 325.275 189.623 323.18 cv
189.006 322.858 187.555 322.268 186.374 321.731 cv
185.702 321.461 li
183.259 324.2 180.762 325.758 177.459 326.886 cv
177.459 326.886 175.311 325.275 173.432 323.502 cv
171.928 322.106 170.129 320.227 168.786 318.132 cv
167.847 318.616 166.504 319.045 165.322 319.045 cv
168.625 322.052 168.679 326.94 160.436 328.229 cv
162.1 330.967 161.483 335.263 155.737 335.263 cv
150.286 335.263 149.293 330.914 150.716 328.175 cv
141.103 326.51 142.284 320.442 147.037 318.026 cv
143.573 315.662 144.056 311.795 146.876 309.702 cv
145.426 308.466 144.916 306.425 146.07 303.741 cv
144.433 302.29 143.626 300.356 145.077 297.403 cv
145.265 297.081 li
142.526 295.739 141.748 293.538 141.962 290.69 cv
142.284 288.112 144.567 286.663 146.876 286.073 cv
147.037 285.911 147.306 285.858 147.601 285.858 cv
147.789 275.385 150.474 240.694 166.504 232.316 cv
169.377 230.919 li
167.928 233.766 li
163.443 243.056 159.898 277.211 159.845 286.288 cv
160.328 286.288 li
163.336 286.555 166.396 288.167 166.396 291.872 cv
166.396 292.194 166.316 292.571 166.263 293 cv
167.82 294.342 li
168.41 295.202 172.008 299.659 174.022 300.196 cv
174.452 295.309 177.029 288.542 179.66 285.858 cv
181.566 283.87 183.796 282.258 186.105 280.917 cv
185.514 280.272 185.192 279.467 185.031 278.823 cv
184.172 279.467 183.394 280.218 182.641 280.971 cv
181.139 280.755 180.011 280.272 179.58 278.553 cv
176.814 280.327 174.452 281.561 172.25 278.393 cv
174.398 276.191 173.377 276.191 174.022 273.399 cv
174.236 272.7 171.955 270.606 172.143 268.672 cv
168.706 267.706 166.88 265.021 167.712 260.993 cv
167.928 259.758 169.27 256.913 169.27 256.913 cv
169.27 256.913 171.096 259.275 171.713 259.973 cv
172.303 260.563 172.84 260.993 173.217 261.37 cv
173.861 261.422 174.398 261.422 174.881 261.422 cv
174.291 258.415 169.618 257.932 169.189 252.884 cv
168.679 248.051 175.472 242.358 180.439 249.93 cv
182.641 249.608 185.192 249.447 187.341 248.427 cv
187.662 248.373 li
187.932 248.051 li
189.569 245.795 189.569 245.313 188.414 242.788 cv
192.576 242.144 194.322 243.486 196.953 246.333 cv
199.209 244.453 198.94 242.735 198.672 240.049 cv
202.297 240.694 203.8 241.661 205.895 244.56 cv
206.189 244.13 li
207.479 242.25 207.264 241.284 206.889 239.244 cv
208.445 239.244 li
211.131 239.244 214.111 242.358 215.695 244.399 cv
cp
223.696 262.658 mo
222.354 259.866 226.248 257.395 225.389 254.763 cv
224.422 251.434 222.918 241.553 237.525 240.372 cv
249.983 239.405 259.597 243.217 269.264 250.038 cv
271.466 251.704 275.681 255.409 277.13 250.575 cv
278.07 247.299 282.044 250.36 281.614 253.314 cv
281.319 254.924 278.554 256.375 274.284 255.676 cv
270.929 255.139 267.571 253.528 264.993 251.327 cv
264.511 250.951 263.383 249.77 263.383 249.77 cv
262.524 250.575 261.61 251.434 260.751 252.401 cv
257.583 250.038 255.569 246.494 253.716 243.217 cv
253.126 245.903 252.429 248.91 251.166 251.594 cv
250.709 250.414 250.064 249.233 249.339 248.266 cv
247.675 245.634 246.654 244.077 243.513 244.776 cv
243.62 246.01 243.701 246.977 243.62 248.104 cv
241.902 246.494 239.485 245.366 237.202 245.313 cv
230.142 244.776 231.001 251.649 231.269 256.16 cv
232.827 253.528 232.88 251.971 235.619 251.167 cv
235.271 254.602 235.001 257.18 238.492 258.899 cv
240.452 255.624 li
248.052 264.377 262.147 259.543 271.948 259.221 cv
277.667 259.06 282.421 263.625 283.575 267.92 cv
284.811 272.54 282.528 276.459 281.293 280.648 cv
280.702 282.795 286.099 285.858 285.536 293 cv
284.972 300.679 275.788 313.407 278.688 320.442 cv
279.843 323.019 283.146 325.436 285.509 326.403 cv
285.348 326.725 li
284.972 327.316 284.381 327.799 283.628 328.389 cv
282.528 329.356 li
281.4 330.376 280.22 331.343 279.789 332.901 cv
279.146 335.372 281.454 340.096 280.595 343.32 cv
279.978 344.018 278.581 345.36 277.667 345.897 cv
277.212 345.092 li
275.198 341.923 272.325 342.514 270.364 344.985 cv
269.882 345.628 li
269.21 346.434 268.833 346.864 268.108 346.971 cv
268.056 346.649 li
268.297 342.299 li
267.437 343.265 262.416 350.193 263.007 342.997 cv
259.489 342.299 257.932 346.971 256.59 346.327 cv
256.482 345.79 256.401 345.252 256.482 344.769 cv
257.153 343.534 258.255 341.762 258.55 339.99 cv
259.919 338.432 261.799 337.788 264.511 339.023 cv
267.437 340.312 269.882 339.023 269.425 335.425 cv
268.833 331.397 267.33 331.021 269.264 326.886 cv
271.304 322.589 267.787 320.764 265.316 317.649 cv
264.242 316.252 263.222 312.816 260.993 313.407 cv
260.321 312.493 li
252.749 302.934 245.526 306.533 236.451 311.849 cv
225.389 318.293 221.334 320.603 207.747 322.213 cv
211.398 315.824 216.555 312.655 218.326 303.311 cv
216.903 301.27 li
215.695 302.881 li
213.95 312.065 207.908 315.448 204.391 322.805 cv
202.082 327.746 203.586 332.901 209.681 331.397 cv
208.66 333.759 206.189 334.458 204.364 335.962 cv
200.873 338.754 206.996 346.273 204.176 347.401 cv
203.8 347.132 203.504 346.756 203.209 346.487 cv
198.511 341.493 197.33 345.145 193.167 347.079 cv
191.824 346.971 190.965 346.487 190.857 345.252 cv
190.644 343.211 li
188.414 343.211 186.696 344.985 185.407 346.917 cv
184.414 346.917 184.87 344.393 185.192 343.211 cv
183.555 342.728 181.434 344.985 180.627 346.059 cv
179.205 344.5 181.566 339.882 183.259 339.399 cv
186.588 338.432 188.361 342.192 192.361 339.399 cv
194.268 338.11 194.591 330.163 194.591 328.389 cv
194.591 322.698 186.588 318.883 190.214 306.425 cv
189.461 304.278 li
187.555 305.62 li
187.555 305.62 187.072 307.606 186.804 310.399 cv
186.428 314.159 187.072 317.166 187.984 319.529 cv
181.246 316.736 176.922 309.702 176.707 302.237 cv
176.492 297.94 179.205 290.208 181.621 287.737 cv
183.018 286.288 184.602 285.106 185.783 284.299 cv
186.938 283.495 188.146 282.85 188.146 282.85 cv
189.193 280.755 li
191.718 278.875 li
192.093 279.79 192.416 280.434 193.006 280.809 cv
193.006 281.507 192.926 283.333 192.2 284.032 cv
193.678 286.288 li
197.598 284.46 li
199.826 286.663 li
204.229 284.676 li
206.808 286.663 li
210.861 284.569 li
214.648 286.073 li
217.844 283.387 li
219.293 285.052 li
220.958 283.924 222.73 282.85 224.126 281.561 cv
224.852 281.938 226.704 283.065 229.013 282.689 cv
226.141 280.434 226.141 276.405 226.141 276.405 cv
227.671 276.621 232.987 277.211 238.009 277.641 cv
244.989 278.286 254.415 274.741 261.315 273.399 cv
264.511 272.807 272.62 276.782 275.627 278.393 cv
275.627 278.393 276.486 277.211 276.728 276.942 cv
280.22 270.821 276.728 263.625 269.156 263.087 cv
268.189 262.926 266.767 263.249 265.37 263.625 cv
252.105 266.525 250.843 267.76 236.774 263.141 cv
235.538 262.711 231.001 260.993 229.121 260.456 cv
227.134 260.725 225.389 262.444 224.905 264.323 cv
224.368 263.84 224.046 263.356 223.696 262.711 cv
223.696 262.658 li
cp
221.119 265.397 mo
221.012 266.364 220.689 267.383 220.26 268.028 cv
219.454 268.028 218.73 268.511 218.326 269.209 cv
217.575 268.62 li
214.434 265.934 213.547 266.095 211.131 269.371 cv
210.728 270.069 li
206.298 267.168 li
204.364 270.015 li
203.988 269.584 li
201.975 267.867 200.686 267.383 198.994 270.122 cv
198.725 270.659 198.564 271.143 198.564 271.143 cv
200.954 272.217 li
201.008 272.11 201.33 271.412 201.545 271.036 cv
201.732 271.143 201.975 271.358 202.109 271.518 cv
202.888 272.217 204.66 274.151 204.66 274.151 cv
206.996 270.767 li
211.48 273.614 li
212.447 272.217 213.305 270.659 214.434 269.424 cv
214.997 269.8 215.427 270.176 215.91 270.606 cv
216.85 271.412 219.347 274.096 219.347 274.096 cv
219.615 273.184 219.777 271.841 220.26 271.036 cv
220.421 271.196 220.582 271.573 220.77 271.841 cv
222.354 275.869 220.421 273.936 219.67 277.211 cv
218.542 276.191 218.059 274.526 217.682 273.237 cv
216.205 274.526 214.701 275.869 213.547 277.372 cv
212.688 276.191 212.258 274.848 211.694 273.506 cv
211.694 273.506 209.251 276.191 207.855 277.587 cv
207.64 277.372 207.371 277.158 207.156 276.942 cv
206.459 276.191 205.277 274.633 205.277 274.633 cv
203.693 275.385 202.082 276.191 200.873 277.372 cv
200.686 277.641 li
199.773 276.942 198.94 275.869 198.242 274.956 cv
196.846 275.975 195.449 276.997 194.215 278.125 cv
193.785 276.942 193.678 275.869 193.408 274.526 cv
193.408 274.526 189.273 277.426 187.771 278.553 cv
187.072 277.909 188.334 274.526 188.629 273.291 cv
186.374 274.633 184.119 276.191 182.104 277.909 cv
181.862 276.621 183.259 272.54 183.259 272.54 cv
181.139 274.151 178.613 276.459 175.982 277.641 cv
176.412 276.459 176.225 275.224 176.546 274.096 cv
177.217 271.412 174.667 270.176 174.881 268.941 cv
175.15 268.941 li
177.594 268.941 180.011 268.135 182.48 268.727 cv
185.3 269.532 194.805 271.733 194.805 271.733 cv
194.215 269.8 193.248 266.9 191.771 264.86 cv
196.309 266.417 li
196.738 265.612 197.061 264.698 197.598 264 cv
198.188 264.377 198.779 264.86 199.343 265.182 cv
200.203 265.665 202.727 266.793 202.727 266.793 cv
202.779 265.397 202.592 264.108 203.504 262.926 cv
204.016 263.463 204.74 263.893 205.277 264.268 cv
206.189 264.752 208.445 265.772 208.445 265.772 cv
208.714 264.484 208.955 263.141 209.573 261.959 cv
210.11 262.336 210.728 262.658 211.346 262.926 cv
212.447 263.356 214.891 263.893 214.891 263.893 cv
215.024 262.926 215.238 261.959 215.695 261.208 cv
216.42 261.907 217.468 262.336 218.219 262.55 cv
219.025 262.711 219.991 262.926 220.878 262.926 cv
221.012 263.463 221.119 263.84 221.334 264.108 cv
221.334 264.108 221.334 264.698 221.119 265.397 cv
cp
ef
62.8857 526.551 mo
62.8857 510.334 76.0957 496.908 92.3677 496.908 cv
108.666 496.908 121.904 510.334 121.904 526.551 cv
121.904 542.77 108.666 556.088 92.3677 556.088 cv
76.0957 556.088 62.8857 542.77 62.8857 526.551 cv
cp
64.8994 526.551 mo
64.8994 511.354 77.1968 499.002 92.3677 499.002 cv
107.539 499.002 119.836 511.354 119.836 526.551 cv
119.836 541.642 107.539 553.94 92.3677 553.94 cv
77.1968 553.94 64.8994 541.642 64.8994 526.551 cv
cp
ef
79.4521 514.792 mo
79.6401 515.114 81.7349 512.427 85.3594 513.125 cv
88.9312 513.663 89.9243 514.629 90.2197 514.2 cv
90.9722 513.125 87.6689 510.978 85.252 511.192 cv
82.7554 511.192 78.7271 514.092 79.4521 514.792 cv
cp
ef
78.5664 520.751 mo
78.3521 519.893 82.272 516.133 85.5747 515.972 cv
88.4478 515.918 90.4077 519.731 89.9243 520.43 cv
89.6289 520.967 87.1587 522.524 85.0376 522.685 cv
81.8955 522.685 78.7817 521.772 78.5664 520.751 cv
cp
82.6206 518.282 mo
81.3584 518.711 79.9629 520.483 79.9629 520.483 cv
81.7349 521.826 85.333 521.289 85.333 521.289 cv
85.333 521.289 82.0835 521.075 82.6206 518.282 cv
cp
87.6689 518.335 mo
88.4478 518.711 88.8774 519.893 88.8774 519.893 cv
88.1523 520.859 86.2725 520.967 86.2725 520.967 cv
86.2725 520.967 88.4478 520.108 87.6689 518.335 cv
cp
ef
68.6313 526.551 mo
68.6313 513.448 79.2642 502.815 92.3677 502.815 cv
105.552 502.815 116.077 513.448 116.077 526.551 cv
116.077 539.655 105.552 550.288 92.3677 550.288 cv
79.2642 550.288 68.6313 539.655 68.6313 526.551 cv
cp
70.2969 526.551 mo
70.2969 537.775 78.7817 547.12 89.7363 548.409 cv
90.2197 547.924 90.3271 547.334 90.5957 546.475 cv
90.5957 545.831 90.6494 545.508 90.6494 544.918 cv
90.4888 542.287 89.4683 543.844 87.8574 542.555 cv
86.917 541.803 86.8096 541.75 85.7354 541.212 cv
85.0376 540.783 83.8027 540.353 83.8027 539.495 cv
83.8027 538.473 84.9307 538.258 85.8164 537.614 cv
87.7764 536.165 89.2529 535.896 91.751 535.466 cv
91.5625 534.338 90.9175 533.694 90.9175 533.157 cv
90.9175 533.157 88.2598 532.888 86.917 533.157 cv
85.333 532.674 85.0913 531.815 85.252 530.418 cv
85.4141 528.86 87.4004 527.411 88.1523 527.518 cv
88.5015 527.518 85.7354 529.076 86.3262 530.848 cv
86.5415 531.438 87.3467 531.438 87.9106 531.438 cv
89.1191 531.438 89.4946 531.063 90.7568 531.063 cv
92.0459 531.063 93.1465 531.546 94.3276 531.546 cv
95.0801 531.546 95.5635 530.848 95.4561 530.15 cv
95.0801 528.055 93.6299 522.792 93.6299 522.363 cv
93.6299 521.772 91.5093 519.516 91.5093 517.1 cv
91.5093 514.792 93.4692 513.717 93.4692 511.354 cv
93.4692 508.615 92.1797 507.111 92.126 504.426 cv
80.0166 504.587 70.2969 514.415 70.2969 526.551 cv
cp
92.9321 548.57 mo
104.907 548.247 114.44 538.528 114.44 526.551 cv
114.44 515.114 105.66 505.608 94.5693 504.587 cv
94.6504 505.823 94.436 506.52 94.436 507.756 cv
94.436 509.85 94.9185 510.441 94.9185 512.427 cv
94.9185 514.629 92.8511 515.596 92.8511 517.69 cv
92.8511 519.141 93.6299 519.893 94.1406 521.289 cv
95.0264 523.115 95.0264 524.296 95.4019 526.391 cv
95.8853 528.216 97.2544 530.042 96.6909 531.921 cv
96.4224 532.888 95.3481 533.479 94.3276 533.479 cv
93.6572 533.479 92.7168 533.319 92.0459 533.157 cv
92.019 533.211 92.6631 534.875 92.6631 534.983 cv
92.6631 536.326 93.2275 535.413 93.2808 536.594 cv
93.4692 538.528 92.126 539.172 92.126 539.172 cv
92.126 539.172 93.1465 540.246 93.1465 541.212 cv
93.1465 542.287 91.6162 543.253 91.6162 543.253 cv
92.2876 543.737 92.3677 547.979 92.3677 547.979 cv
92.9321 548.57 li
cp
85.4141 539.87 mo
85.4141 539.87 87.1587 541.212 87.6421 541.481 cv
88.0718 541.75 90.2197 542.5 90.2197 542.5 cv
90.2197 542.5 92.2876 541.212 90.4888 540.246 cv
89.7363 539.816 85.4141 539.87 85.4141 539.87 cv
cp
85.1987 539.172 mo
85.1987 539.172 89.1191 539.495 90.4077 539.065 cv
92.2876 538.258 91.2676 536.594 91.2676 536.594 cv
91.2676 536.594 88.6089 536.754 87.6689 537.4 cv
86.8096 538.258 85.1987 539.172 85.1987 539.172 cv
cp
f
218.108 57.8716 mo
225.524 57.8716 231.54 63.9404 231.54 71.5845 cv
231.54 79.1172 225.524 85.2988 218.108 85.2988 cv
210.519 85.2988 204.28 79.1172 204.28 71.5845 cv
204.28 63.9404 210.519 57.8716 218.108 57.8716 cv
cp
0 0 0 0 cmyk
f
204.498 71.585 mo
204.498 64.228 210.486 58.0518 218.005 58.0518 cv
225.389 58.0518 231.431 64.228 231.431 71.585 cv
231.431 78.9424 225.389 85.0103 218.005 85.0103 cv
210.486 85.0103 204.498 78.9424 204.498 71.585 cv
cp
198.672 71.585 mo
198.672 70.8872 198.672 70.2959 198.725 69.5981 cv
186.374 64.9795 li
185.998 67.0737 185.702 69.3301 185.702 71.585 cv
185.702 73.626 185.998 75.7202 186.32 77.5459 cv
198.672 73.0889 li
198.672 72.6592 198.672 72.1758 198.672 71.585 cv
cp
199.826 98.1675 mo
205.385 86.2998 li
204.498 85.4937 203.693 84.6353 202.888 83.7754 cv
190.965 89.0923 li
193.248 92.6367 196.229 95.7515 199.826 98.1675 cv
cp
223.991 103.216 mo
219.454 90.8105 li
219.025 90.9712 218.488 90.9712 218.005 90.9712 cv
217.252 90.9712 216.608 90.8105 215.91 90.7568 cv
211.131 103.054 li
213.359 103.484 215.695 103.753 218.005 103.753 cv
219.991 103.753 222.032 103.591 223.991 103.216 cv
cp
244.56 89.6289 mo
232.665 84.0981 li
231.913 85.0103 231.001 85.8701 230.087 86.5679 cv
235.431 98.7046 li
239.108 96.2886 242.224 93.2808 244.56 89.6289 cv
cp
249.635 65.4092 mo
237.202 69.9741 li
237.202 70.4575 237.257 70.9409 237.257 71.585 cv
237.257 72.2295 237.202 72.8735 237.149 73.5186 cv
249.446 78.2437 li
249.931 76.0957 250.172 73.894 250.172 71.585 cv
250.172 69.4907 249.931 67.3965 249.635 65.4092 cv
cp
235.86 44.8408 mo
230.356 56.7095 li
231.269 57.5146 232.128 58.4814 232.827 59.3945 cv
244.855 53.8628 li
242.546 50.3193 239.485 47.2578 235.86 44.8408 cv
cp
211.694 40.0615 mo
216.285 52.4136 li
216.822 52.252 217.387 52.1982 218.005 52.1982 cv
218.542 52.1982 219.186 52.252 219.777 52.4136 cv
224.528 40.0615 li
222.354 39.5791 220.152 39.3638 218.005 39.3638 cv
215.857 39.3638 213.789 39.5791 211.694 40.0615 cv
cp
191.234 53.541 mo
203.209 59.0723 li
203.988 58.2134 204.794 57.4077 205.652 56.6563 cv
200.336 44.6802 li
196.738 47.0435 193.704 50.104 191.234 53.541 cv
cp
178.882 62.0796 mo
178.184 61.7036 li
172.412 59.3945 177.459 47.4189 183.259 49.7285 cv
183.877 50.1582 li
187.287 44.8955 191.771 40.5449 197.007 37.269 cv
196.738 36.5176 li
194.375 30.8252 206.459 25.9385 208.821 31.6846 cv
209.037 32.3823 li
211.883 31.6846 214.891 31.2549 218.005 31.2549 cv
221.119 31.2549 224.368 31.792 227.376 32.5435 cv
227.671 31.8452 li
230.087 26.0454 242.009 31.1475 239.593 36.9473 cv
239.298 37.5381 li
244.56 40.8672 248.964 45.3779 252.267 50.6953 cv
252.749 50.4263 li
258.55 48.0093 263.489 60.146 257.663 62.4023 cv
257.1 62.6704 li
257.825 65.5161 258.2 68.5239 258.2 71.585 cv
258.2 74.9146 257.771 78.0293 256.966 81.144 cv
257.503 81.3052 li
263.275 83.7754 258.2 95.7515 252.429 93.2808 cv
251.944 93.0654 li
248.642 98.2749 244.05 102.786 238.788 106.008 cv
238.976 106.492 li
241.258 112.292 229.282 117.232 226.892 111.378 cv
226.812 110.788 li
223.885 111.378 221.012 111.701 218.005 111.701 cv
214.648 111.701 211.398 111.378 208.338 110.627 cv
208.07 111.218 li
205.6 116.964 193.704 111.916 196.04 106.116 cv
196.416 105.579 li
191.153 102.25 186.696 97.6841 183.555 92.4214 cv
182.829 92.6367 li
177.029 95.0527 172.25 82.9697 177.996 80.5537 cv
178.721 80.3384 li
178.077 77.5459 177.754 74.5381 177.754 71.585 cv
177.754 68.3633 178.184 65.1411 178.882 62.0796 cv
cp
1 .9 .1 0 cmyk
ef
341.358 519.785 mo
341.358 519.785 341.573 520.859 341.628 521.826 cv
341.949 526.605 339.185 524.458 337.733 527.25 cv
336.982 528.807 339.237 528.86 340.151 528.86 cv
341.358 528.86 342.809 530.58 343.562 530.58 cv
343.775 530.58 li
344.501 530.58 345.87 528.86 347.132 528.86 cv
347.991 528.86 350.247 528.807 349.575 527.25 cv
347.991 524.135 344.526 527.088 345.87 519.785 cv
346.085 518.873 347.267 519.194 347.132 520 cv
347.132 520 347.024 520.967 346.89 521.879 cv
346.89 522.524 346.837 523.276 347.078 523.759 cv
348.421 524.726 349.817 524.94 350.622 526.712 cv
351.589 528.539 350.059 529.827 348.421 530.042 cv
348.099 530.15 347.669 530.15 347.132 530.15 cv
346.567 530.15 345.011 531.921 343.775 531.815 cv
343.562 531.815 li
342.271 531.921 340.768 530.15 340.151 530.15 cv
339.185 530.15 338.324 530.15 337.52 529.559 cv
335.13 528.109 336.874 525.799 338.485 524.726 cv
339.05 524.458 339.667 524.243 340.284 523.92 cv
340.606 523.006 340.284 520.859 340.151 520 cv
339.963 519.194 341.198 518.873 341.358 519.785 cv
cp
0 0 0 1 cmyk
f
345.011 542.77 mo
344.501 542.77 344.151 542.77 344.017 542.77 cv
343.292 542.77 li
343.292 542.77 342.862 542.77 342.271 542.77 cv
339.237 542.5 336.659 540.997 336.257 537.668 cv
336.229 535.52 339.855 531.063 342.54 533.855 cv
342.809 534.07 li
343.077 534.338 343.346 534.446 343.722 534.446 cv
344.044 534.446 344.313 534.338 344.526 534.07 cv
344.796 533.855 li
347.239 531.063 351.133 535.466 350.972 537.668 cv
350.622 540.997 347.937 542.5 345.011 542.77 cv
cp
349.71 537.077 mo
349.28 535.735 347.078 533.157 345.682 534.661 cv
345.493 534.983 li
344.956 535.466 344.394 535.68 343.722 535.68 cv
343.077 535.68 342.379 535.466 341.949 534.983 cv
341.628 534.661 li
340.097 533.157 338.003 535.735 337.626 537.077 cv
338.324 537.239 340.688 537.614 343.562 537.668 cv
343.775 537.668 li
346.567 537.614 348.903 537.239 349.71 537.077 cv
cp
337.653 538.42 mo
338.647 541.75 343.077 541.588 343.292 541.588 cv
344.044 541.588 li
344.205 541.588 348.636 541.75 349.602 538.42 cv
348.581 538.528 346.353 538.795 343.775 538.903 cv
343.562 538.903 li
340.902 538.795 338.647 538.528 337.653 538.42 cv
cp
f
329.946 517.1 mo
330.672 517.69 331.478 518.012 332.39 518.012 cv
331.745 517.69 331.478 516.993 331.478 516.348 cv
331.478 515.972 331.478 515.596 331.639 515.274 cv
330.888 515.596 330.351 516.188 329.946 517.1 cv
cp
334.753 517.852 mo
335.345 517.69 335.962 517.476 336.499 517.208 cv
336.874 516.993 337.169 516.939 337.466 516.778 cv
337.036 515.596 336.016 515.114 334.888 515.005 cv
335.21 515.274 335.397 515.865 335.397 516.348 cv
335.397 516.939 335.13 517.476 334.753 517.852 cv
cp
328.792 516.509 mo
330.672 512.266 338.647 513.073 338.7 516.993 cv
338.808 518.12 334.646 519.194 333.975 519.194 cv
332.202 519.516 329.946 519.194 328.792 517.798 cv
328.712 517.53 li
328.551 517.315 328.712 516.939 328.792 516.509 cv
cp
f
358.463 516.509 mo
358.569 516.939 358.759 517.315 358.569 517.53 cv
358.463 517.798 li
355.858 520.967 348.581 518.335 348.581 516.993 cv
348.581 516.993 348.581 516.832 348.636 516.456 cv
349.87 512.589 356.771 512.696 358.463 516.509 cv
cp
357.362 517.1 mo
356.879 516.133 356.208 515.596 355.269 515.114 cv
355.536 515.596 355.696 515.972 355.696 516.456 cv
355.696 517.1 355.429 517.69 354.945 518.012 cv
355.536 518.012 356.208 517.852 356.718 517.53 cv
356.986 517.369 357.228 517.208 357.362 517.1 cv
cp
352.261 515.005 mo
351.239 515.114 350.193 515.596 349.87 516.778 cv
350.568 517.153 351.347 517.53 352.153 517.798 cv
351.884 517.369 351.643 516.939 351.643 516.456 cv
351.643 515.865 351.911 515.381 352.261 515.005 cv
cp
f
338.808 511.354 mo
338.808 511.354 335.8 509.958 333.491 509.958 cv
332.202 509.958 330.055 510.119 328.847 510.495 cv
328.604 510.602 328.39 510.495 328.229 510.441 cv
323.96 514.415 321.273 520.108 321.273 526.551 cv
321.273 538.742 331.102 548.57 343.292 548.57 cv
355.536 548.57 365.417 538.742 365.417 526.551 cv
365.417 520.214 362.84 514.629 358.569 510.495 cv
358.382 510.495 358.033 510.441 357.362 510.334 cv
356.503 510.119 355.429 509.958 353.817 509.958 cv
352.261 509.958 349.978 510.709 348.581 511.354 cv
347.776 511.729 347.239 510.495 347.991 510.334 cv
347.991 510.334 348.796 509.85 349.925 509.528 cv
350.972 509.098 352.502 508.668 353.817 508.668 cv
354.945 508.668 355.806 508.776 356.557 508.883 cv
352.878 506.091 348.313 504.426 343.292 504.426 cv
338.271 504.426 333.626 506.091 329.921 508.938 cv
330.726 508.776 331.907 508.668 333.491 508.668 cv
335.21 508.668 337.653 509.42 339.237 510.334 cv
340.042 510.495 339.532 511.729 338.808 511.354 cv
cp
367.028 526.551 mo
367.028 539.655 356.449 550.288 343.292 550.288 cv
330.188 550.288 319.556 539.655 319.556 526.551 cv
319.556 513.448 330.188 502.815 343.292 502.815 cv
356.449 502.815 367.028 513.448 367.028 526.551 cv
cp
f
218.049 61.9644 mo
223.252 61.9644 227.473 66.2222 227.473 71.585 cv
227.473 76.8696 223.252 81.2061 218.049 81.2061 cv
212.725 81.2061 208.348 76.8696 208.348 71.585 cv
208.348 66.2222 212.725 61.9644 218.049 61.9644 cv
cp
0 0 1 .1 cmyk
f
2 lw
218.049 61.9644 mo
223.252 61.9644 227.473 66.2222 227.473 71.585 cv
227.473 76.8696 223.252 81.2061 218.049 81.2061 cv
212.725 81.2061 208.348 76.8696 208.348 71.585 cv
208.348 66.2222 212.725 61.9644 218.049 61.9644 cv
cp
0 0 0 1 cmyk
@
178.882 478.273 mo
178.721 478.704 li
178.561 481.012 180.762 482.032 180.225 485.899 cv
179.419 490.84 174.184 493.256 171.928 494.062 cv
173.754 491.698 173.163 489.013 173.002 484.664 cv
172.68 484.987 172.303 485.308 171.875 485.524 cv
167.121 488.477 161.483 485.093 161.483 485.093 cv
161.483 485.093 164.41 481.12 168.465 477.468 cv
170.344 475.857 172.787 475.857 174.936 476.233 cv
175.069 476.125 175.15 475.857 175.311 475.641 cv
176.117 474.299 176.117 472.043 176.814 470.217 cv
178.077 467.426 178.077 466.297 179.742 465.063 cv
184.977 460.874 190.214 464.526 190.214 464.526 cv
190.214 464.526 185.139 463.504 183.018 465.653 cv
181.487 467.426 180.439 469.627 180.011 470.54 cv
182.104 471.023 185.086 472.043 186.051 474.944 cv
187.662 479.67 184.763 481.281 190.965 484.234 cv
189.677 483.75 182.158 484.664 179.742 480.1 cv
179.419 479.455 179.098 478.81 178.882 478.273 cv
cp
178.426 476.823 mo
0 0 1 .1 cmyk
f
1 lw
178.882 478.273 mo
178.721 478.704 li
178.561 481.012 180.762 482.032 180.225 485.899 cv
179.419 490.84 174.184 493.256 171.928 494.062 cv
173.754 491.698 173.163 489.013 173.002 484.664 cv
172.68 484.987 172.303 485.308 171.875 485.524 cv
167.121 488.477 161.483 485.093 161.483 485.093 cv
161.483 485.093 164.41 481.12 168.465 477.468 cv
170.344 475.857 172.787 475.857 174.936 476.233 cv
175.069 476.125 175.15 475.857 175.311 475.641 cv
176.117 474.299 176.117 472.043 176.814 470.217 cv
178.077 467.426 178.077 466.297 179.742 465.063 cv
184.977 460.874 190.214 464.526 190.214 464.526 cv
190.214 464.526 185.139 463.504 183.018 465.653 cv
181.487 467.426 180.439 469.627 180.011 470.54 cv
182.104 471.023 185.086 472.043 186.051 474.944 cv
187.662 479.67 184.763 481.281 190.965 484.234 cv
189.677 483.75 182.158 484.664 179.742 480.1 cv
179.419 479.455 179.098 478.81 178.882 478.273 cv
cp
178.426 476.823 mo
0 0 0 1 cmyk
@
256.804 478.273 mo
256.966 478.704 li
257.1 481.012 254.951 482.032 255.516 485.899 cv
256.241 490.84 261.558 493.256 263.759 494.062 cv
261.987 491.698 262.524 489.013 262.657 484.664 cv
263.007 484.987 263.437 485.308 263.759 485.524 cv
268.619 488.477 274.177 485.093 274.177 485.093 cv
274.177 485.093 271.197 481.12 267.25 477.468 cv
265.316 475.857 262.899 475.857 260.778 476.233 cv
260.618 476.125 260.456 475.857 260.321 475.641 cv
259.597 474.299 259.597 472.043 258.792 470.217 cv
257.663 467.426 257.583 466.297 255.918 465.063 cv
250.709 460.874 245.526 464.526 245.526 464.526 cv
245.526 464.526 250.495 463.504 252.696 465.653 cv
254.28 467.426 255.22 469.627 255.704 470.54 cv
253.556 471.023 250.602 472.043 249.635 474.944 cv
248.052 479.67 250.925 481.281 244.694 484.234 cv
246.011 483.75 253.556 484.664 255.999 480.1 cv
256.294 479.455 256.59 478.81 256.804 478.273 cv
cp
257.233 476.823 mo
0 0 1 .1 cmyk
f
256.804 478.273 mo
256.966 478.704 li
257.1 481.012 254.951 482.032 255.516 485.899 cv
256.241 490.84 261.558 493.256 263.759 494.062 cv
261.987 491.698 262.524 489.013 262.657 484.664 cv
263.007 484.987 263.437 485.308 263.759 485.524 cv
268.619 488.477 274.177 485.093 274.177 485.093 cv
274.177 485.093 271.197 481.12 267.25 477.468 cv
265.316 475.857 262.899 475.857 260.778 476.233 cv
260.618 476.125 260.456 475.857 260.321 475.641 cv
259.597 474.299 259.597 472.043 258.792 470.217 cv
257.663 467.426 257.583 466.297 255.918 465.063 cv
250.709 460.874 245.526 464.526 245.526 464.526 cv
245.526 464.526 250.495 463.504 252.696 465.653 cv
254.28 467.426 255.22 469.627 255.704 470.54 cv
253.556 471.023 250.602 472.043 249.635 474.944 cv
248.052 479.67 250.925 481.281 244.694 484.234 cv
246.011 483.75 253.556 484.664 255.999 480.1 cv
256.294 479.455 256.59 478.81 256.804 478.273 cv
cp
257.233 476.823 mo
0 0 0 1 cmyk
@
134.792 575.69 mo
133.879 576.227 132.86 576.657 131.705 577.084 cv
127.597 578.213 124.32 575.098 124.32 575.098 cv
124.32 575.098 127.114 572.897 130.738 571.231 cv
132.672 570.319 134.792 570.91 136.296 571.661 cv
136.968 570.91 137.639 570.319 138.418 569.889 cv
136.511 569.513 135.222 568.6 135.222 568.6 cv
135.222 568.6 137.881 565.271 141.532 562.209 cv
143.922 560.223 147.306 561.028 149.373 561.834 cv
149.91 559.954 151.333 558.397 152.434 557.43 cv
149.48 559.74 144.593 559.686 144.593 559.686 cv
144.593 559.686 145.318 555.927 147.118 552.006 cv
148.031 550.074 150.554 549.053 152.648 548.57 cv
152.702 548.194 li
151.521 545.777 152.434 542.77 153.186 540.997 cv
153.186 540.407 li
152.998 537.775 li
152.702 539.279 152.22 540.89 151.521 542.555 cv
149.426 546.85 143.922 547.12 143.922 547.12 cv
143.922 547.12 144.298 542.93 145.479 538.528 cv
146.553 534.983 151.199 534.07 152.702 533.855 cv
152.702 533.157 li
150.716 530.58 151.091 526.551 151.306 524.94 cv
151.091 524.243 li
150.958 524.833 150.823 525.477 150.608 526.122 cv
149.078 531.063 143.036 532.297 143.036 532.297 cv
143.036 532.297 142.606 527.786 143.251 522.954 cv
143.626 519.893 146.553 518.067 148.647 517.153 cv
148.514 516.456 148.164 515.114 147.896 513.61 cv
145.855 510.709 146.661 505.983 146.661 505.983 cv
146.876 505.983 li
146.741 504.856 146.661 503.782 146.661 502.922 cv
144.056 506.36 139.116 506.199 139.116 506.199 cv
139.116 506.199 139.707 502.063 141.317 497.661 cv
142.526 494.223 146.661 493.417 148.594 493.256 cv
148.943 492.182 149.373 491.323 149.856 490.571 cv
150.044 489.819 150.339 489.175 150.554 488.477 cv
146.929 491.162 142.177 490.141 142.177 490.141 cv
142.177 490.141 143.761 485.524 146.339 480.583 cv
148.647 476.555 154.528 476.985 156.274 477.092 cv
156.649 477.252 li
156.649 477.468 li
156.757 477.843 156.891 478.38 157.133 478.917 cv
157.455 478.542 li
158.18 474.729 162.799 472.043 162.799 472.043 cv
171.149 465.438 186.643 455.719 195.986 465.545 cv
196.523 466.03 196.953 466.566 197.275 467.103 cv
195.073 468.338 li
194.887 468.07 li
191.153 462.967 184.064 463.291 178.613 465.438 cv
172.412 467.854 165.779 473.064 164.195 474.299 cv
163.927 474.568 li
164.543 476.233 165.269 478.756 165.269 481.495 cv
165.322 486.811 159.952 489.766 159.952 489.766 cv
159.952 489.766 158.959 487.081 158.18 483.59 cv
158.18 484.02 158.18 484.45 158.18 484.825 cv
158.18 489.175 154.206 491.377 154.206 491.377 cv
154.206 491.377 153.857 490.196 153.401 488.422 cv
153.132 488.907 152.864 489.604 152.434 490.411 cv
153.669 491.807 155.253 493.846 156.274 496.532 cv
157.992 501.204 154.152 505.5 154.152 505.5 cv
154.152 505.5 151.951 502.977 149.856 499.647 cv
149.48 500.775 149.373 501.633 149.293 502.118 cv
149.131 502.922 149.293 504.749 149.48 506.842 cv
151.091 507.379 153.186 508.401 155.119 509.958 cv
158.959 513.18 157.697 518.711 157.697 518.711 cv
157.697 518.711 154.475 517.69 150.93 515.811 cv
150.958 516.133 151.038 516.402 151.091 516.509 cv
151.951 519.41 153.132 522.255 153.964 525.209 cv
155.683 525.961 157.885 527.142 159.952 529.076 cv
163.765 532.674 162.262 538.742 162.262 538.742 cv
162.262 538.742 158.959 537.4 155.307 535.143 cv
155.441 536.917 155.683 538.903 155.737 540.783 cv
156.837 542.018 158.476 543.952 159.522 546.475 cv
161.483 550.932 158.315 555.551 158.315 555.551 cv
158.315 555.551 157.025 554.262 155.441 552.221 cv
155.307 552.758 155.119 553.133 154.877 553.778 cv
154.931 554.37 155.012 554.907 155.119 555.659 cv
155.253 556.678 155.253 557.592 154.636 558.719 cv
155.253 560.277 155.791 562.532 155.925 565.002 cv
156.032 569.782 151.414 572.414 151.414 572.414 cv
151.414 572.414 150.179 569.03 149.373 564.95 cv
148.219 566.292 146.607 567.848 144.405 569.083 cv
144.056 569.352 143.626 569.567 143.331 569.674 cv
143.143 571.178 142.714 574.239 141.183 577.194 cv
138.847 581.22 133.665 580.952 133.665 580.952 cv
133.665 580.952 133.96 578.75 134.792 575.69 cv
cp
0 0 1 .1 cmyk
f
134.792 575.69 mo
133.879 576.227 132.86 576.657 131.705 577.084 cv
127.597 578.213 124.32 575.098 124.32 575.098 cv
124.32 575.098 127.114 572.897 130.738 571.231 cv
132.672 570.319 134.792 570.91 136.296 571.661 cv
136.968 570.91 137.639 570.319 138.418 569.889 cv
136.511 569.513 135.222 568.6 135.222 568.6 cv
135.222 568.6 137.881 565.271 141.532 562.209 cv
143.922 560.223 147.306 561.028 149.373 561.834 cv
149.91 559.954 151.333 558.397 152.434 557.43 cv
149.48 559.74 144.593 559.686 144.593 559.686 cv
144.593 559.686 145.318 555.927 147.118 552.006 cv
148.031 550.074 150.554 549.053 152.648 548.57 cv
152.702 548.194 li
151.521 545.777 152.434 542.77 153.186 540.997 cv
153.186 540.407 li
152.998 537.775 li
152.702 539.279 152.22 540.89 151.521 542.555 cv
149.426 546.85 143.922 547.12 143.922 547.12 cv
143.922 547.12 144.298 542.93 145.479 538.528 cv
146.553 534.983 151.199 534.07 152.702 533.855 cv
152.702 533.157 li
150.716 530.58 151.091 526.551 151.306 524.94 cv
151.091 524.243 li
150.958 524.833 150.823 525.477 150.608 526.122 cv
149.078 531.063 143.036 532.297 143.036 532.297 cv
143.036 532.297 142.606 527.786 143.251 522.954 cv
143.626 519.893 146.553 518.067 148.647 517.153 cv
148.514 516.456 148.164 515.114 147.896 513.61 cv
145.855 510.709 146.661 505.983 146.661 505.983 cv
146.876 505.983 li
146.741 504.856 146.661 503.782 146.661 502.922 cv
144.056 506.36 139.116 506.199 139.116 506.199 cv
139.116 506.199 139.707 502.063 141.317 497.661 cv
142.526 494.223 146.661 493.417 148.594 493.256 cv
148.943 492.182 149.373 491.323 149.856 490.571 cv
150.044 489.819 150.339 489.175 150.554 488.477 cv
146.929 491.162 142.177 490.141 142.177 490.141 cv
142.177 490.141 143.761 485.524 146.339 480.583 cv
148.647 476.555 154.528 476.985 156.274 477.092 cv
156.649 477.252 li
156.649 477.468 li
156.757 477.843 156.891 478.38 157.133 478.917 cv
157.455 478.542 li
158.18 474.729 162.799 472.043 162.799 472.043 cv
171.149 465.438 186.643 455.719 195.986 465.545 cv
196.523 466.03 196.953 466.566 197.275 467.103 cv
195.073 468.338 li
194.887 468.07 li
191.153 462.967 184.064 463.291 178.613 465.438 cv
172.412 467.854 165.779 473.064 164.195 474.299 cv
163.927 474.568 li
164.543 476.233 165.269 478.756 165.269 481.495 cv
165.322 486.811 159.952 489.766 159.952 489.766 cv
159.952 489.766 158.959 487.081 158.18 483.59 cv
158.18 484.02 158.18 484.45 158.18 484.825 cv
158.18 489.175 154.206 491.377 154.206 491.377 cv
154.206 491.377 153.857 490.196 153.401 488.422 cv
153.132 488.907 152.864 489.604 152.434 490.411 cv
153.669 491.807 155.253 493.846 156.274 496.532 cv
157.992 501.204 154.152 505.5 154.152 505.5 cv
154.152 505.5 151.951 502.977 149.856 499.647 cv
149.48 500.775 149.373 501.633 149.293 502.118 cv
149.131 502.922 149.293 504.749 149.48 506.842 cv
151.091 507.379 153.186 508.401 155.119 509.958 cv
158.959 513.18 157.697 518.711 157.697 518.711 cv
157.697 518.711 154.475 517.69 150.93 515.811 cv
150.958 516.133 151.038 516.402 151.091 516.509 cv
151.951 519.41 153.132 522.255 153.964 525.209 cv
155.683 525.961 157.885 527.142 159.952 529.076 cv
163.765 532.674 162.262 538.742 162.262 538.742 cv
162.262 538.742 158.959 537.4 155.307 535.143 cv
155.441 536.917 155.683 538.903 155.737 540.783 cv
156.837 542.018 158.476 543.952 159.522 546.475 cv
161.483 550.932 158.315 555.551 158.315 555.551 cv
158.315 555.551 157.025 554.262 155.441 552.221 cv
155.307 552.758 155.119 553.133 154.877 553.778 cv
154.931 554.37 155.012 554.907 155.119 555.659 cv
155.253 556.678 155.253 557.592 154.636 558.719 cv
155.253 560.277 155.791 562.532 155.925 565.002 cv
156.032 569.782 151.414 572.414 151.414 572.414 cv
151.414 572.414 150.179 569.03 149.373 564.95 cv
148.219 566.292 146.607 567.848 144.405 569.083 cv
144.056 569.352 143.626 569.567 143.331 569.674 cv
143.143 571.178 142.714 574.239 141.183 577.194 cv
138.847 581.22 133.665 580.952 133.665 580.952 cv
133.665 580.952 133.96 578.75 134.792 575.69 cv
cp
0 0 0 1 cmyk
@
300.948 575.69 mo
301.807 576.227 302.827 576.657 303.954 577.084 cv
308.063 578.213 311.394 575.098 311.394 575.098 cv
311.394 575.098 308.546 572.897 304.976 571.231 cv
303.042 570.319 300.948 570.91 299.31 571.661 cv
298.772 570.91 298.021 570.319 297.216 569.889 cv
299.042 569.513 300.465 568.6 300.465 568.6 cv
300.465 568.6 297.806 565.271 294.208 562.209 cv
291.765 560.223 288.354 561.028 286.314 561.834 cv
285.777 559.954 284.381 558.397 283.279 557.43 cv
286.26 559.74 291.066 559.686 291.066 559.686 cv
291.066 559.686 290.423 555.927 288.596 552.006 cv
287.737 550.074 285.186 549.053 283.011 548.57 cv
283.011 548.194 li
284.14 545.777 283.279 542.77 282.474 540.997 cv
282.528 540.407 li
282.742 537.775 li
283.011 539.279 283.388 540.89 284.192 542.555 cv
286.26 546.85 291.765 547.12 291.765 547.12 cv
291.765 547.12 291.39 542.93 290.261 538.528 cv
289.106 534.983 284.542 534.07 283.011 533.855 cv
283.011 533.157 li
284.972 530.58 284.622 526.551 284.381 524.94 cv
284.622 524.243 li
284.729 524.833 284.917 525.477 285.052 526.122 cv
286.636 531.063 292.678 532.297 292.678 532.297 cv
292.678 532.297 293 527.786 292.382 522.954 cv
292.087 519.893 289.106 518.067 287.013 517.153 cv
287.227 516.456 287.495 515.114 287.764 513.61 cv
289.804 510.709 289.079 505.983 289.079 505.983 cv
288.784 505.983 li
288.837 504.856 288.944 503.782 288.944 502.922 cv
291.657 506.36 296.598 506.199 296.598 506.199 cv
296.598 506.199 295.98 502.063 294.343 497.661 cv
293.161 494.223 289.079 493.417 287.065 493.256 cv
286.797 492.182 286.314 491.323 285.884 490.571 cv
285.616 489.819 285.401 489.175 285.106 488.477 cv
288.73 491.162 293.483 490.141 293.483 490.141 cv
293.483 490.141 291.927 485.524 289.321 480.583 cv
287.013 476.555 281.132 476.985 279.467 477.092 cv
279.037 477.252 li
279.063 477.468 li
278.93 477.843 278.769 478.38 278.554 478.917 cv
278.259 478.542 li
277.507 474.729 272.862 472.043 272.862 472.043 cv
264.563 465.438 248.909 455.719 239.7 465.545 cv
239.218 466.03 238.788 466.566 238.438 467.103 cv
240.64 468.338 li
240.828 468.07 li
244.56 462.967 251.649 463.291 257.1 465.438 cv
263.275 467.854 269.962 473.064 271.466 474.299 cv
271.788 474.568 li
271.17 476.233 270.444 478.756 270.364 481.495 cv
270.364 486.811 275.681 489.766 275.681 489.766 cv
275.681 489.766 276.728 487.081 277.587 483.59 cv
277.587 484.02 277.587 484.45 277.587 484.825 cv
277.587 489.175 281.507 491.377 281.507 491.377 cv
281.507 491.377 281.83 490.196 282.286 488.422 cv
282.581 488.907 282.85 489.604 283.226 490.411 cv
282.044 491.807 280.406 493.846 279.413 496.532 cv
277.722 501.204 281.562 505.5 281.562 505.5 cv
281.562 505.5 283.763 502.977 285.884 499.647 cv
286.152 500.775 286.314 501.633 286.421 502.118 cv
286.528 502.922 286.421 504.749 286.26 506.842 cv
284.595 507.379 282.528 508.401 280.595 509.958 cv
276.755 513.18 278.017 518.711 278.017 518.711 cv
278.017 518.711 281.239 517.69 284.729 515.811 cv
284.729 516.133 284.622 516.402 284.595 516.509 cv
283.709 519.41 282.581 522.255 281.669 525.209 cv
280.03 525.961 277.722 527.142 275.735 529.076 cv
271.896 532.674 273.425 538.742 273.425 538.742 cv
273.425 538.742 276.728 537.4 280.326 535.143 cv
280.272 536.917 280.03 538.903 279.978 540.783 cv
278.769 542.018 277.237 543.952 276.163 546.475 cv
274.231 550.932 277.399 555.551 277.399 555.551 cv
277.399 555.551 278.634 554.262 280.22 552.221 cv
280.326 552.758 280.54 553.133 280.81 553.778 cv
280.756 554.37 280.702 554.907 280.54 555.659 cv
280.326 556.678 280.406 557.592 281.077 558.719 cv
280.406 560.277 279.843 562.532 279.789 565.002 cv
279.655 569.782 284.192 572.414 284.192 572.414 cv
284.192 572.414 285.536 569.03 286.314 564.95 cv
287.495 566.292 289.079 567.848 291.28 569.083 cv
291.657 569.352 292.087 569.567 292.382 569.674 cv
292.463 571.178 292.946 574.239 294.53 577.194 cv
296.786 581.22 302.075 580.952 302.075 580.952 cv
302.075 580.952 301.727 578.75 300.948 575.69 cv
cp
0 0 1 .1 cmyk
f
300.948 575.69 mo
301.807 576.227 302.827 576.657 303.954 577.084 cv
308.063 578.213 311.394 575.098 311.394 575.098 cv
311.394 575.098 308.546 572.897 304.976 571.231 cv
303.042 570.319 300.948 570.91 299.31 571.661 cv
298.772 570.91 298.021 570.319 297.216 569.889 cv
299.042 569.513 300.465 568.6 300.465 568.6 cv
300.465 568.6 297.806 565.271 294.208 562.209 cv
291.765 560.223 288.354 561.028 286.314 561.834 cv
285.777 559.954 284.381 558.397 283.279 557.43 cv
286.26 559.74 291.066 559.686 291.066 559.686 cv
291.066 559.686 290.423 555.927 288.596 552.006 cv
287.737 550.074 285.186 549.053 283.011 548.57 cv
283.011 548.194 li
284.14 545.777 283.279 542.77 282.474 540.997 cv
282.528 540.407 li
282.742 537.775 li
283.011 539.279 283.388 540.89 284.192 542.555 cv
286.26 546.85 291.765 547.12 291.765 547.12 cv
291.765 547.12 291.39 542.93 290.261 538.528 cv
289.106 534.983 284.542 534.07 283.011 533.855 cv
283.011 533.157 li
284.972 530.58 284.622 526.551 284.381 524.94 cv
284.622 524.243 li
284.729 524.833 284.917 525.477 285.052 526.122 cv
286.636 531.063 292.678 532.297 292.678 532.297 cv
292.678 532.297 293 527.786 292.382 522.954 cv
292.087 519.893 289.106 518.067 287.013 517.153 cv
287.227 516.456 287.495 515.114 287.764 513.61 cv
289.804 510.709 289.079 505.983 289.079 505.983 cv
288.784 505.983 li
288.837 504.856 288.944 503.782 288.944 502.922 cv
291.657 506.36 296.598 506.199 296.598 506.199 cv
296.598 506.199 295.98 502.063 294.343 497.661 cv
293.161 494.223 289.079 493.417 287.065 493.256 cv
286.797 492.182 286.314 491.323 285.884 490.571 cv
285.616 489.819 285.401 489.175 285.106 488.477 cv
288.73 491.162 293.483 490.141 293.483 490.141 cv
293.483 490.141 291.927 485.524 289.321 480.583 cv
287.013 476.555 281.132 476.985 279.467 477.092 cv
279.037 477.252 li
279.063 477.468 li
278.93 477.843 278.769 478.38 278.554 478.917 cv
278.259 478.542 li
277.507 474.729 272.862 472.043 272.862 472.043 cv
264.563 465.438 248.909 455.719 239.7 465.545 cv
239.218 466.03 238.788 466.566 238.438 467.103 cv
240.64 468.338 li
240.828 468.07 li
244.56 462.967 251.649 463.291 257.1 465.438 cv
263.275 467.854 269.962 473.064 271.466 474.299 cv
271.788 474.568 li
271.17 476.233 270.444 478.756 270.364 481.495 cv
270.364 486.811 275.681 489.766 275.681 489.766 cv
275.681 489.766 276.728 487.081 277.587 483.59 cv
277.587 484.02 277.587 484.45 277.587 484.825 cv
277.587 489.175 281.507 491.377 281.507 491.377 cv
281.507 491.377 281.83 490.196 282.286 488.422 cv
282.581 488.907 282.85 489.604 283.226 490.411 cv
282.044 491.807 280.406 493.846 279.413 496.532 cv
277.722 501.204 281.562 505.5 281.562 505.5 cv
281.562 505.5 283.763 502.977 285.884 499.647 cv
286.152 500.775 286.314 501.633 286.421 502.118 cv
286.528 502.922 286.421 504.749 286.26 506.842 cv
284.595 507.379 282.528 508.401 280.595 509.958 cv
276.755 513.18 278.017 518.711 278.017 518.711 cv
278.017 518.711 281.239 517.69 284.729 515.811 cv
284.729 516.133 284.622 516.402 284.595 516.509 cv
283.709 519.41 282.581 522.255 281.669 525.209 cv
280.03 525.961 277.722 527.142 275.735 529.076 cv
271.896 532.674 273.425 538.742 273.425 538.742 cv
273.425 538.742 276.728 537.4 280.326 535.143 cv
280.272 536.917 280.03 538.903 279.978 540.783 cv
278.769 542.018 277.237 543.952 276.163 546.475 cv
274.231 550.932 277.399 555.551 277.399 555.551 cv
277.399 555.551 278.634 554.262 280.22 552.221 cv
280.326 552.758 280.54 553.133 280.81 553.778 cv
280.756 554.37 280.702 554.907 280.54 555.659 cv
280.326 556.678 280.406 557.592 281.077 558.719 cv
280.406 560.277 279.843 562.532 279.789 565.002 cv
279.655 569.782 284.192 572.414 284.192 572.414 cv
284.192 572.414 285.536 569.03 286.314 564.95 cv
287.495 566.292 289.079 567.848 291.28 569.083 cv
291.657 569.352 292.087 569.567 292.382 569.674 cv
292.463 571.178 292.946 574.239 294.53 577.194 cv
296.786 581.22 302.075 580.952 302.075 580.952 cv
302.075 580.952 301.727 578.75 300.948 575.69 cv
cp
0 0 0 1 cmyk
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 12.0.0
%%For: (Athrri) (LifeNet)
%%Title: (Govrnment Logo-Colour.eps)
%%CreationDate: 6/12/2007 10:10 AM
%AI9_DataStream
%Gb"-6>H]<mOXBiUT`2iSd6a;X3XEKU$]>$@,;Zqh9sk+$c#071&5'p)<3<_C`?I1n?bc<fBBBegRDl30oE,snF\Z+dGds6th98$2
%qU=KZ0Ah0No$*eeDu\-:*p31Cg-^_iThXXj:O`/hIt%4J(LLE)H)tumddAidg8/e7S79T\7t,:'XLFbW56(3HM`:*SoBu#;(LMQp
%]RBJHh&!hN=T8$\c,6`VrCO_Kp@.=)=0LK[p#5]2g%2u"4bmC1hd9^(H?"6-me*p\&+sp?@/@Rnr,5r`?.&cQ2Y\r_4Fd%cB.n]Y
%pV6LiQ`oNJ0D(b-Hi<I(Mtc[Objs86&M:cooO!n;^NfeP[Itb?]70IG^O>XMQX@CTp[%k%[r;9?cb8jlkeDA0oTIcd>]'+_)fU,u
%ft[R_jnfi$4T)L*^`U>dr#*,2JadA<P:n"Q0E1b5b?+-mPD?Q2r;$?T&+'&BT*+Y<hGs6RIVo(Ua5d+*.82<U4:UZ=2nqAHLD][,
%3^)Qp&EO6WQ(-M_'-..Yqn!ZJ5C`@mr<lp&1tBY;OF"aXlegPu<_]';.,T^IfR'7PJ^Yk-W:e23qJ:"M_KbV$b85[,`PXpTGkTgK
%GIIL+GOIbFq>\PtQX1`q*"Di#042D;pMXtV^:2'Dr3@!X^O#e1Mc[Z<M!OGp=3n,3dq4X:YI4/]ZZgnFnQnc_mAhmk@j1$W^\cV9
%?[q_7D_Ksa*qJXC?bH3jgJ;pa:Kr(fTujfRjWDr]QZ\+db"rH]"AamcF0`jOJm%:#$2sW4)V4+26DhMHp[V*5hu"[-h4i<c5J;F>
%fh/tQ]&Z(:PK.t?e,@;k/CT+Krl#hK6&<9_I^Skp/+Ta%m2<\9o9ZZ\nE/Cs6!kFsM":_7kbgr0Kf>oBn"0ne6^FYLo8EY?E;\I;
%jfM,R9*tXLMLTun^WYW`PjhnQ6H-_72C3g!\`iFnX]@9Z'q]50ZWbbXf#u#om2^%i7iNVLY.+.cB"arWrkcE`[Oc+#/@]h*nBJ83
%c/jOq0:,l8p<*UK/f3B_6$(*e&YI0`EN=S]P2)()BSLfk?So[5I(&q_PJY(JK1Y$/S\(YL2e-1h(S<B1r/7_6/9["EiEr-;rW!f,
%_Gc:iNW@<X2>i@jQO@388ih3+R^aWCn1S_Alo>(VT;1H<Fn!+EhLtp&)<Qa)d1mI\1ZrtjE;0O[0LoJaU4tU:NqaE_0L=+frjBQE
%KR_AXF2Ygu9TfdGb7W[#:('+-V^,V1%["7k1Et.b_qB)43d;-o:M/LuCi&,2Ta`@41l;V)m@62O`Z4M%RZZ/U8)f4]j'T10"Qag)
%Ep"^BO3\rF4#oCM38NiW8MVOuB+eQU@\;[*meLB;:C$=rj7D=#dEJ6/mb%WUkC5C71+F`BCJP)<Mi7R);I6o+pW2aI]do^8Z;s.3
%V)o3hPc2'peE!.7Y.!A:>n)b7dAaUY..Q9mOT!;fR(%f(l$rJFU,(AN1%MC<2uh'hT@_uu:Mqh>T_18DCQ4t<hu%Daq0ARPdqARH
%E8Xg`DuOrCo(2^Is2jZ+'1(r&rc^QtoD4sV:#eI%o2nBXbOst0s2<f^A'@RuQW'D-QU<F*UtF^]5:)YDka,56VX5?V;\f'I4+9sW
%W]EsQ8aS(RNp,JCRPL@H-aS!Ia7"qnlf`5<3j?>uR'3ccg?HuR00Tu.T>N4h<#n8;(MJ/GDAA/'$@WI2*G4)3U-6!OLbbU@nW\9[
%O^_"$l'V@AoLiCB1u+*q2bt.Qo&n-DjS$#Q$[jp^'Qs7LDE17K2F!j--AbO^%*skg*orl5/;?35J`lj899S$W@N1m&m<r^IibQt;
%9@]s;1*+M'8)Q2Di5$9d;lmgj:)H$a07PJn+;V!6TO5n0=_=#q[D:)SJdWqVEgG!m6uA'PrcH@+!s4:N5mR*g=m'nhU1%NZI<O&T
%mB^8#WJFpI3Z*1s=[)*-3gnH!q\]ctKpuoP,R7JbFqR18Ju;@4DOUd[89<XA&iOZp'hjCaKYSIL+e>B%j!_jofPG;9".[HiQ/mU9
%E;OoW;d:(hg*'hKnQZ3RQh+*dJRl28?I&D//uU]!MR20R%S/!4D+:jN1kP88jXd/eObDG?Fr62JhFRn,*+n1OW&`?8Dir_r;DkgY
%D?PtL;)d6gqfW[HE@r6ocdb<OUdBNC6n9>i^-F`:"%H/Y=Hf"\n=](=U$JkSaZs-njs4H[.7aSjb.?`\3(e=(#[uI4LWT';eHf5@
%$fVpEEFn?R44[786@!Cg3h7^1SQnnY/IQr')W^W0Y@?@XA"AnJ_P)hAJY7*YRk0N41,]/C)*AqcT7g0I/Vc<<=GB5W\7BGH9M%\j
%Z&fEP)!d$JFTfu>9&9$qaO8%+'J?\a\.SH`d9[)<7uF<>eCbN,TJ0aXEXcbL7HpPUb6-K:[jtf_*Q5Oh!ulqd5f&35!u-QH.2l1g
%^]:tdncD-[J=uE`D5pBq,niSmN>cqkMT5!&k:-ej^$+BLe7"50m7*4\`bhHL'E5isPifZ9h9n8A)2/ak"UcaLbkV:V&o.X]&Z^lF
%J5$GO]5*;NPJU(>P'20"8MrV&4rs=i[b*ADTBS*A_CA<X.N0+%D\E3XJ'$+RICf+Y*c"B<JnJ:ji4AM_1<.2=-?eJ=:.ac"bJJr:
%$<da)Qd'2Qd5@l6#.b:0+CIGTj@I8\os6b(Mo%O@NsJCh`CEe,X!;8:ES0'oqcHiEf5SB-S<3s?*:@X$\kqf(U:h*QQ-Vl$#U9[%
%rWYif"8uQ[2.'m"G:5XoZ8@rUX.\LpA6-Z@Vk,\QG/5Y:0pUX_$3L<N[2?%)8aUJq/eX-KHpSWV>a9FKggT3XQ1(!h1#RM8(0?5+
%\c>_i;sTehkH9FgR?Rq-FC:M]T:Jj44`u@6Z"1k2U?9B9qjZ.W[16&;XeR3uXt&SWJPT@434g>Ca=8.P#!*4#.AK-u7QM?P2S(0:
%d3p&I*$F'I#uR9Hs!g*q+G.2@jr7Jn:_s;Yg#n2pb@ngr,%Z<Mh6MhZWGMF%1p8;hJn`&k(`H4]$[AJL6WB>2-]>?K:uSoL2QFe$
%+b_$N?"/>@S_"R<$%c@-Qb*P<)d,&(dAI[]Z*S3]).5:"W%$U3Q0ILE4DI<ThN%8NUiCAKTj>Ls697V5-;Xu#%.MHN?OBJ91rjI9
%&>cus\EaDp2Gc@p?g7p]2&q?;,h8#k(6nqR-rc.hefs5'"h^aa86o`.ZViph`e?+*$7q(Vi-Sc"W7h7=.Kq]$=q?h&a%Rsff2cJ[
%Y\h3-VPL"&V9Mk+0SV$(#;<puW<e_#*J#Vr91T8G:T4H*+,IrnnCi:jb>KLHFSH0&MU5q&o1n.>=NR1Ha:^O#DRlc/U7r?#Wn6H6
%_i,?=:n^5kYV)6#6)IaUKo4<1hiPhHq=X3Vp,n!R&;R-u0$G&=;D^8<MIrgm=&,[2E0R<YA[!Eu[AR$1lWRh'$"4i?W>`d."FC^L
%UA>l=i7R[1YCH.&0'+r.Vc&.B<?3e;&2cmu0hs'01Tac>`r-.m^+2oSc6"CPAl5Y$5r+I'ER%@)()RpPLW#(T&WQX/YeP/,=]\OW
%Y/AM#VSa3Qd$3FRVP[cHH>2+Je_FP+X8sj]cp->nb.[u&5o6&n:ou1]l`.#N=8[Y\6%;4H@"49>Y'gLK@['KS'6'[<8nAtklH$0=
%%[:\]I5-a<,jT3iWo$f-*,&JAA.F+V9\[F<QkGKX"lp-68Bh6?o("R;a,6s56T.gGal54g#dCedV"Q/>[G#?%UBJW\baF&SQ$fUk
%H88CD'^=>kN"^0_U.XZZR+=7:n0:_d>#e>gJ8e=r"ZHHXLJg8"=.-*_6H'3Y<tHs6Zr^7YOii.WnZXpa$,O;G)A7u<)Yh>d6#A),
%."eAPKp'a#KfjngFc2DH.YNRkI*fZ<f&uR".<Cbj<&#*t>n*F#.\X\U'c,&r*C;tA&](971o@Y$B6]p8AYpfEEB]Jq$?8cP_N'm\
%\uH95@F^1p9BA-j@)]WZeoV/@nXMI'P?!b1SEV^d'sP&Z(Y.pjoN?mf9P7$'h2fU%l07p)=F/T'%oni3@n18O<D&7r2afNT/o&0Q
%lIR[IP"'A!";bb8;@o#2JTV0l</?e$=O.O$C0@Nd:q?jVK$OUg-ddcBL6ur9s#n7R>N-e3$\3>,l;s\TU7s+mH9g($cTA3lL5BlW
%0%TM-#4Gt0F[&-(Pd_=mT!#4?[@]R3joL_gO`F9ro+6pn4rK[$ju3?ZZ3Z4W.'-nQ-InAe@tQt!Zr+\#W]=$Q""<i+@F+(^LcMEZ
%aMjZiQ1WQbM[Bi#;rr<2C]pf'Cg7[S#+^In6/aSDa7"e56dj\\8%?Ck-U;qZ%8RkfV^fkfdT%M2!E=.)LF:2?O;T78pnCOIM>".L
%\kSE#<\5!<?W"g&U8sH>`Q6*Vmo-n!khrqChLS4g68hhD@FO.A)CdR;1aK)(82PpU1'7\do]>(9ZlH;8LDcD4Y/.bK5(aA9[4Vfo
%r3CG+pl^2VfQPl2hMQf#&6=B_)-Ero-<p]pP:;AX9h'73a8r;!9N8$2Raig[7<KI]QsK.$Vl2!J`O2jg-+ZEo<:;SK<d0.3(MT'_
%_B6ar]G5h6U1L$S9R^&X2GZb@F*E?u9H"oa;+mBJZ'<d8d-)@Lb!o7<1_W0=aWD`O$Sce1@kgu##ui_A75nV*r`CT;ZVodOUpe?f
%TF>6Z$l<T#0?Y+@GZ9eBB`]8r-+Fl1bQ1!Y2Q%Q`OUCu?7]EPu)WVf;=K$-UNU7t+9:KtLaPK82C$rbdq!#J")JYq&.3RK@(sR;s
%Y(EAbBZ+gn3%P8^`>INbM/(LBC)Eb&4G#4V[s0GX["+=!92]?B'6Odp2FDnTKnYI>[f^2mnN3[$X/Dm/e58UA#OHe6\o6l_oWH2B
%A[K9qSAm&\<a[(Vb7r#*FGD9,%M@-F8d0$CiBB]_8]`g$NMg;LX+nm]&@i!q&I0me<SFBX"]#pB6U3I63pASl$S6#oFH=sd[9c,k
%BLC8Qd$#(OYc\i+bUifpe4o5d".=Lr0G4k-;8Ya)hB@p/"NRX(SuN^PNM/mHQCJ:/!)I+KSKX'&XQl,h2Bk<#GW\;.MM_u;(At%u
%&;T^01KN!VAlLE-1<Ud[R;Gl4?)@U)FDO\#4RN\Eg;HJ"@ifC$$IHL`,IDbnnhNT_9r#L(VgZSs#dkLKYj5X^eI:%tmM#s140)AF
%o8r"J1)>`T!b!@+kq#Ojk[.DfOC_sN<@8d'7,)>H@/)Qm!d+KhBSM_iD#"[Vj[A`a7SM#cPJ<H]9U'Wn$n!<"bTE^7+RfBQVfH+1
%,7\G*BP#FYJad_lBRg;OXFP[f(TO,=;aTK@dWaVqj/G_Z5qHan7_Mo!^f"RH-PHfXd6ufq'37AXnBMcALW:Ki@LiM'X'25?-FPJB
%#p6e!KeR3>`W`o)0(qMM:N6Pd3\F6d_lbC!LTV-:V?e008Yj=WZ'7.1(V-N5D+dLE3r]n`C#Ng@G(hFJ(+._5RZ_*&X?f$:A6W#.
%<<j;"6f.iL.'1M3a!3RsJrE3JdR5)%U=PGI4e;tD_:(F]qD'+U0seMJ6>;Pq\qS[a(l"7/NsjHfZ)4H@.cjlNYICZ!%"2Z"&G6Wq
%WXb=hYTZp`!P.?K'r-DL$@4'!DH9#>=3>PhJRYV8`UGXn76iL]$O\C"]=_54HA1kmjV_,MTS)F"U's*8J1ElHhEj@@K\ie\3=8_`
%Rt3BlCf)p`4I8A?Kcq!/YsMfaF%>FreC^Mh%),bbA\QZOA[mCigV+"1\(S'<#U8pV(6+I)2-[sab!rf@U^t/P1]$#'.q%dqdPuON
%:s>$:bRqHte4BJ6+IXEA/G.VO*h\SN"$\_32+3<`TuB;C+MA93//DhG%'mbGeT<`umRiC`U65S4h2e6kTS@`e`M&0!L,6ZeNd6b,
%W5G_[b"'Tr1o&'e)MJ1u3s\dL(Gh%-PjVf,TZL57TR%_*0L<Cu'uC7QGr83^lPQW%UuQWP8!N5`X#mP)"cR-"#c7r^.,>`ZZW(<_
%k$)D=f\;%;'_AO\(gKR0oc,VA8;C&gU+;$iJFTj1?u9SFC&tf_9G1'q(_9Fhbfn-KW+@g]"1B4Y+.>R!$tZM+*cN6HJ-I]:L%rp_
%[3KK`a*akm7g*4(+C5:W#HC%[ZdT$^jPnIiRkOV[ph$b0NV4_YLIP&,C`\S8163;UFoY(kWl*+Z)-_3K8jj[<f!I'"Y7(Z0BMd2l
%*[Lk*PbqD3D;dS'^Ol$D:J2TuX=t>XeOd*oS9rQaGZ]Y+/5<dIQsd3BF!1dIBVG%fU;ke')j]5h"VCMRnSGmE4C<LSRG;?WP9GJV
%k"176G\^JLiR)q95u\LIa.m6P%Mu]fl5#HM1)p@VMdp5>7=tT(B0r-ue4=*!O<f_%K*Y@4LgXlHbN])V!M>U."/WXC8R]\k"qj:o
%\,l+7C&h@%i'HKP<15Po3[3Td+@M(Ef3d;Vn3D%VO4XUU?5Q(hKsG(h6$s,g?W<Y3Zj`'aN6oI+TT]tk_bb%oaB+r'LH,?l.WBp`
%R%Xi0T;\\f#r\c80qq$.[APe-0TW<MLF$P'+\s;S2sNB73kfQfe`$hA0r>LRi\FD+-4\XoN]uJ:0L[q2a5N,:lp1Z+dO4)HVCuY>
%RM$*cMsGRJAohPjb;LoI[`rhh6UPojN(/Hg_'"srQ<p4cYAQ)JGT6A@6K&*<]V5<72d"mfMoRD[@W>h";YeU3,?MgT_GY%,UlI.X
%#d]:n0e+iVYi5[>LGX9EDK:XFC^a#G5=;\cd0$TcHF8:X2oS2Z^EIr's&6gE<U#1!^D6bbod+6CFr=.b@#g@#%?%N*A9_[`Q%8_M
%K">OZ<QYI8#S9_W"WAOKcp.PbW2T_#mTC&j_p"iqY'uKP=p)C[C.gS[O6ln2R6]Y@?BCbVYe$dko!09N<glHp%r#'8kpRShL3C<\
%3dNn0U(RqjcTi7*MD!ePp6i@r+B7:_/;f6o5T,25&OZsf.CE$J*M*3&!JMGYf^^l%aAQ`87@JZJ(GKk26GePkU$BJ:ZrF2%8=)&*
%$-R$UpH!oTS1GrH_G[Fs(gt+'9U*pa9S"s#'D<o,Z(rjtNhfN]bUdKd7Sn+1r#bYIY!9t%(hrKrQpJTXUD'1[>s)?COnVaH`j0,i
%)L31,>:n9+6_.Edm(sqeMnV9rOqsGl-_=$&GcVMq0/\8;IH3W@0Yl.gLLI&O?F+6Ue!ea*eER-J,&&AD4fm4pUT3s&Ki1r]W2@u%
%=iPd75`6MO7n%%nTrbb1bWseAY*N>^KO*)`'XNcmi6e8VLX9s>bK^0,-=&a`1Kt;Zh,u^<_Ls20(Je/cLOhmp5QIXU/@JAGdeniW
%eG*$d`+cq.n91oW_ZZ>?AR>!?=I+i#2*G(Z,7G."];&H(7OcgYC5.C=QF<kTBBGkh+sf<b_fYF!>GYl8W;d2!@*",H8kX5.#5/Gt
%JgZ[P\AeDIB+4X"C4Ips@X=E?KJ8j%<8AI6Suln>F3#;mMA;,idsYh.@X&<c84/;2Z*q`U9@"/qGhX_^FREpq!^gk(UL>VU*(Y^9
%"4fp6$r/Z?5Jh*0k[c>H).d$@l">R=HlH15NS5U_3'>7:M^,'urH@qm7Ri"&1c&T6(17AbXh)?Q$^P2bN)i51]$)C6hlSeJfa6rb
%%'qsB*kMFf&@kJGOcbEl<`UbeERNG"\#;T9nN^.]eg@G]Sldjgp/20Sa_8n9>F_L&4aWE\"hYV[3E/Wj<SKT#4,:4LdA7H8#R@^2
%(f-ho:#DqU>fOq%P]Vn$c`HolN/ZC,l;?gkTk2a;^^=l9\^u+$CGd9alcd0_LFA!<`\'`_8#1r;ldaDlTYT4(ZTDn[51&.m/=AK6
%fY5S2T[J-Mbe5DG17s<[H?CMa;4oI,cuj!BKs_,d>_W-Z(s/QJf*Z[q*^hdS'.k!BSjkV(c%mt1PK&_A%-2a>b^?e98nKJc\@:9%
%^pQ9]qOS-l.s\hob&J3JPX1oZ)-RWO'):,*e8cU#@?aL<h4/gZ>jU,N($WW;W)G2lQuumO8EV&b>1Fq!Yd:W:H$t8lFYQ0NFkn]O
%l-<`]XX&b)Rq#W_KD&b60@<ah6Vt$,e6/Bf0XF1C`):,!Z3HeOWbaGJ\85\G'd=<02ZtS'YkFe(&#qO#(.E7B!XhN3WYHk#AaEs/
%-];V"/mURuj=!B>1+F]qCf+YF%itfmjd@6cP>:C"CgG&9cap$lSImHWY?#AG=>u\8nPG>3^4l5L,]^l:%-.EIm,d?1Gd7A9e,%&]
%bD@(fDR?S!aG-[.#$=!t@-&nK6<7k\2']/&4FuA%8;<&?6>0`?,%Fh0_gj^$H://)#qMEljiNrp*$s`*,6T7<:WfmKEop"Wgc%k%
%/SV@WP)SB/Mq<SW<c,IIK7$q*CkMFC/&O4cj:]_[ZUa[H=f0_8s-cX2B.q&DohlcP0kYPfFUZPnWh(hLh<^LnGl]g[a+N_^B4TPB
%<h`Bt'q&U_S.pn-]OKS>6`d<)F#V(r7u^l8SIN`G?6mIPIS]82kMu$[QALGE.uYH[@7?X;2LZXFR(3gIbLLDRSF.F!b=))5=7)a$
%r_<3JFEUhtZYEiLDMXU>7?+B@fH[8kFaJn4#4p1FRg5Y4qhZ'jGMekkZ#Jp<WT&<8curKB4^(%jT%[;@cQmQ&HB+X5<E9T'^2dsf
%@g(abmp$7,T5^jYB(&&k2]%c:B:-eM^eO_Mg9d@725Q_[(qN8j^t3tmCktr2M[+e\X1N5d%Fj2W(Y`J^KSn'7_C.nnO(/FPM?KL^
%VJ/`*i/`3+M[nV<%NO)u]5`^mq=o;rQiW-q9b$SrjYdL+/\E@T`7'SZYTOLQBs4ihe@`d.k(qX2@eb47Ya5YsWl,#)&LNfaO?83$
%ne;1?l9deM]LGku-`l=i%O#!HJm]OhJdF+PWWPD#._:&#?o*h,JKA$(C#Y5]'9aF/_SKD95t.fGq:R_Va6B5H5i]?A?YUBZnAX]p
%[0j"\9"N6<Epf,,Tccf]';JU0UF"?BJ\I$dZb+&n=<]!NdC`H:[9p"9QeMH)J(,LkK+<Io4%O-PKHTWmWPL:4&?-n>Bs,Nk/PI:l
%0HZ+moh-53V[BM9Fb)U`11i];U%/,#YsTu'RoR_Uo<_-C31nlI7#*EVr1Y`bE0GBII$9m1WaL=M0m7[+#(i[:JI>_fLZbr_XAE!!
%q_"B!pc&+?%;eV2*/T]U$$6t`OCSbM47+9j$LT"Y8^#F3`!\UcP&)n-0T402B4f*tWk%_1R^IH$g4)XOiTkqd$Kqu1[d&3^)U/k(
%KnY,:C@AJV<O_YlfI>X<$>;8S<PPm(MB3`6"fZ%0D^J!V:SQ_F=>k-u!uDc)DUCV'LDCf/[c,*?F0,'[l6%sRmDbnl34]cr`,m`Y
%EqF`9X1[X'<N@It!@,pJ<:*k)n9)Jt6;HE@0mnMaB?H/^*r<%2mNG/GBV)P#aCcUa227Tc#ci93^6:s_+m@6%Bslf0EL2#pq7lV^
%>ueA8:5\#i(oC+dqCAF(m\'<2De)le<kb;In<iRp8]#d!,@Ke_VD88$oM%Q]eYB.thK0ujeO1lU&;\;9*>:D&MC3'<X"p1Ma-h<O
%@F_H6#lI,Upi%*e!n1?;^M^4.e0CroZTiAXC\a?9i7*^q(9X+/1R@!O\J_=L/(k/P0U[)/I5S9J*4HhU=Eg,>\nP5;R!WqJfDN[b
%XQ[5'aG.9"J\#]WJaEj>.0M%Q<t:J3,846_+IC;F>k]YkX=73Q_1N:<b^`umd-+&(&qp?<eb);,=hLt@*C+T4h9C!MI2qVK#oErh
%KUS^/7V*$&c/)Fc`jOOVP/nlDl"1!\M`sYBrMrX[>B=>/\@ZmclmeGTKJ"4UK=PW&ED&stm_rp9[b)97GDPQCoa<>h<Zl(Gr1F<a
%KPRkS/*:&96r.\=dNKL,4Dd]5-SP%0U:':*3-MjdNoW)&98cGg*p]r&9J%l&G8jZTh.`qM6%lfaCR-M0ln$PndrHsodaUTfOlWL\
%\W-Wt$<RV8]sWfAB9rASq*ihE@%OM=E7XQNLW<7nj+.$e7e#,p/(d7-/jMV^;`eJj*h3jfn6Jo%&A?&T5-5<F;;B]7hp?+\DA+u.
%\iXk=A=b0/\>Ks0^mCP329a?/Z8tVNhmLdJ4+Or6!cW.GPWOI-_-sES^JRo'ob_q5\#CUR`ou&kbftQl'!4t(hqQtZFMQJ',=]c4
%e?EZUrQsoe_<P?oY-uR[jmD3N@L"FM"&HD1QRW*lI=<5M+on<f#ZQi]2MT$GhbUn,iVRb;pZWT[]W>*#)_j;q%1HNE5,Yj6GHkoW
%^YSkgSm?`gdhtUDS`-%EGWg7e7upYj8)ealXg`ep>OhS0T<@;?Ib)Vd87('*@j,`EdaTT<:;7[Ara*(npR4qUE78=Oe/UOK.5Ej1
%7^(!Zqi,auNjihS1GA@E9iVO[]\23C$hN*:*TtkcgMcan^Yc/IU@LD%P4gC[/8EV`GPs77iqr_&YM7YD0Y>Wi0Rf>,\,L4PpO-q=
%h<JjkhlRYOg5DZ,?1Z<*:Y(0>^<b-_kB9Tc55b'NjtiP+Bn%aR?fS(cSG^KM6%ALomAm^GZ>\>*qVB1FhLG@s'-;=sJD^Cm>Ii_S
%)k9(fj<suMn)iO-k1,ghjZgG*qrR"UI.PCf:O_l@_e3ofnD`Cccee]tiV;]WS'ShDq1HNYnU\.ToV7a[3UlRlbKk\;%:/u$h6Z;8
%n:tBNiP/\]IkUO8@/]EO042GCnSPl6%?=G:pZC(G36ZSRIduTVhn=I8C(/W2fN2S$LNi34c[VF>N5kT5+CG-Bm<j3QlIF'B]mKJK
%T3jdsfDhE1a+HQpn$dT/a3PLdpR\npC-:kVNrL0H!M]Vho$(ffM\?#H\[Sb,`t@2>+92/ik5_:=A^g5)N;rP0O)NphhQ3hGcYpOD
%n`oN)037ju4Hg$Lqm1L=Ik0UXmI_RX^3]UolP1cdaS>YeFEMm%m+l85qGD_A&\l'qQbIe>k1R?OrF1^T-.?e(M6smX<XN'C/\`+D
%\Wr+LT74JtbR_`QgD9h]mb)5+74A2Q:*T^f*rPBprF\9MqY8a-TD[l9TDZH"INn>gg_K?UNu-:Vc^/gSQZC37,T^I*9]sUpHp4*f
%oC72fp[]po7Qm)Z5,WHaLU/u,Vt9.p>#*,eiRCYtnk\XP:IVqRFGcsrB6cKjVe'"kb@0XnDWkELP*`Po,qRO8E]bF>W(K/nNr:qq
%+^C)iR#gJKO5VLqVc[Wq_s+BFNe`8@O=Wc@LNJ=W9c`kI5P:ip&YnT3DnYkm1C@N:kgOpIcgtjWk+e;hI?lV5D6@rJo:4r&LO!VN
%/*/g$O$oIAdnR*XV&!9#r1T_JW@mjG`T*n<D7.qmF%nOC:h>UI;U4B'Q?'p0oJ.ZC<f4KMW8sQ@-(jcX0DUtG\`Yu^>]\"IV]9d!
%;nAcG3i+,CdfBWV:O\I1WoD4bPYt1@:FJ6D;dA<:*n4(SY+roT;iEHL.9s_MSAGo!i=L=&6OPc9O@'@0KHOcpA2u#?OQhQQHBV$L
%Wfmj.P0PF<Sb@P*UPGK@rqK71",E/.ks<#a%-N9CIKMWgq@EM6IQmi-p39b4gWB$h,eO!Mh:pORXS*G?VKXedPYqZl<H2%RDu;9A
%(%hoW9tUV,(W@o.P?s/QiXQ<uO,ECYinR.hm:prI]8BmASGsDu$?jNFdtB7Bm$G%a-bC/-NclH0ntIL<T#9P6*\V;J35&u9oOEJa
%eT"<rAGpeEofCd6k]O8u+DZ/IX6VXtea0;^'tYHZS=i$jc7Y]59c'Y,Mpg0Zl&4/&f28`(?/;YdY@^kdX4W]67pA6QdjO@?1eR^D
%HMo8*Y,.K3`8H15Fh5/MX6Y"O*W3M.R.ZndY'+s<X3:91H7V!;[cb'kMDs/[IhT%"VY)]ngg90ElZ@8$f9bFmG]b%0Y'tH:='+-_
%d\Cm[p*s-F^:Mb;jmjNdO*f!QOV%FdBd/p6!t@C_7,EP/b(nX.q_Ef&W"6,MG@uZrJ]i"XLqI#R"(K2g71;4h*V3MD?R&pkUTLc(
%\5NIn_s#)]2pSJ5Mj3H?l]bXc`1V.KIch&YMt7UmbPBHZO^)W>Cb2flP<R@nF8\UGB_A@%/"9hI8Z>csbIZ7>\lLEL3n\Y_C@"5q
%S=i*ls.f"+9>E-3VR!?6]><k?=qsQ>BQK^1Ef3?QP<nJo:n_ZqT\DC(+"\SBJm?kU77<u&U+8Fn$6OCRcanQkf*eWYF\THM_4imo
%VM!kc.ir7SME0U1;=%O%)c:7/3B*Mf6"bjr>]eau7u=K.@>?IOERY-D3=?u<8a7?))13#cC;Ndq82ps/SV5BC6E3<e0Zg\Z0Ob]M
%m)#,[d8q^C>8JIA+:FZ,T,#ah1.KZ1>r8,'@#F*Y#^HYXng#-YLh:Jp/:-k0qJm1]H(HZUp:>TJFD;EDg-iu)dBuKl\YlTWf<LT3
%a<YK5"*aK`]Epm2p.;Xc72R<Vq'=AR7J(p?4l8]c+%>Xj7/pVIJV&t`'"afUs,'nc>q?30#bAnc5\`(\_'Q?;MHC__1lK%e&A)Gg
%lP!#0@CdS7R)Cm3@\Ycb<P$g68$Q>p@`-8(_2]X9Z#0\Y@d2+hFXWQ:FFMVNl2TP^M7n:=A]%h$W%8dK@$LbFqh;(PhKQ[mN]1i_
%q0_;oQ+I96PGa\H=+4I9H0&Muhj&CeT&"IgnYu"c]])fMc,#fpNa0,7c\9Mij?47?/)O@'mABLb$3uP4Pg2SZ$e)dUmm?QS'\Pm;
%QdCY::^/Pp"gp%P4Y&I5jTt>Y\7/=\!,pf,.#1K.6:Bq"6ruoY=AbZhauA5un4m'a!='WhC*]n+h2eH)O/DLhdoj`%kZEm,?=$p@
%=g)GhLRmsp.kWu>DfisZGMM\7::P>,?t\q]a.3mXFh]RkpNtT(h](0OKMfMQI"0N5hRMD9S8R;m]j%ac+1A>hhD*YE!#oEt2=J<"
%e\:3[J'cF]0)"/D^36b/rBIA,+cGg]GTH;d#XU_"%@rm=GTkmQ^`*I=X4"K9UO-?ThjOGDl0b+3Y;\bGgonb_qsO?#o6p,s+8sH3
%f>4Qe(Z-sGp"O+4hu)I#?P1iZ5IY('+,03F6MO^iLMNKVX89^cqn68g6LP.`p3XDXf&-d;p3XDXm/.rAg$e<SU#dA4g$e<SZ1EIL
%A\Y_?74-g!m-g+V\,#JR3:\qno_<Rda7"J:&C(3c%I/?,97#BB^((s-O3;Y(FWfuH?5;Q8G62(-ostU(II6];8GkuCE^-8,8rXo;
%7R'A$mc]q?,Eh:]1%M(Vq2f/+[abCeoo8Z&!`raUak?aXXcKlF]0eKqf%2S?hC6)4dbVRoYe2V\fYYnd>[_VZhQV^?D-16D=bcD4
%)LhPBeZ60/IJCPuIf8]fRm4T2poSr8lkMY%%t#VJM>MUT&`n.<^6e!6o)-3ihoKo%jL=!_\!?6&jnb15I%A;s=0@%*A/@i:[6DL[
%8bS-p`;e,pla43gc#qfHLX"BJOrbbgf;ibk]",uGb2Z*`bMlRN@oOoCf/Ac'*VB3cBlbld3r8O1-Ru%mlC2SG>]!_g]rm?Ns4jkT
%HjKZlq^C7[3i0n^rP#ACp['mnds%mXPOB.!ZSG[JaLurrr%D4mVgkX!Bi4lMTYB2RZ0C43rl3:a9E+oDJc><c5Q'g*5QCKMnC\Jj
%s5URPpXf=13r0,3Bnt`pM188!`uBL([JiL_l#A?Lcbj,(=-%jlVr(D;rKDI'<ukkC+7mu$H^(#uo.,3s[A`%=:46urNur4BPl-=R
%LlWn^H.s[t7o:FP[.2Js2Q8plC!NK5J)7SiO#Ym4D.B3ID.8VNY*6/PgD44`&XIQ;rd!*bcp!`&)umPiN=<%/#0`-D$fFsZnK-!Y
%.%#s%MekgeTD-S8d$h/O.t2g$2]oi)k.j@:2`B#W;p7*mA`%_4DjpQ^8p]hJM>,J`Q,_3]GG_odmQb]>43_&P#MqB%S9Bku\o$^g
%g,4'3D0)>34BieUX(a%,p3Y9D2'5)!IQPe[o)ZL<c8k81)sF/ucY1pT!,n>'N6kkC?;5B2]"=ECjpq%G\'s+iGMm=Zc=tmtT\H>-
%UKq@7hDQH3R^gZ?eKh#0B=Ve@(6bk=-b4"Uf(-D[9k`;4QL_WKR*E),=NTm[_Pj0;jBoRV_PU$h:qAVP]64\=[M)P1]p;qcLMbe"
%p=P(kG3p9Xl]9rl]&V\s#4k#f?btPT0_`5LZk%Q9HiS)RqtPB[#OnV$:Li"(!,m5IFS;7EbSoA6e2_P.;((WjX0um5^t\!];7=^i
%Gh_$*B%u$IhY;9T/i%VqGH#XFnm1iASX\cU)S>-a(2oZ=S9E/tlu.4u@,JLh^0aM6T9H=kh*`Cq;SG*;?#p8-2YT6!RQL#I\^,!A
%gjsZqk@F:W'BY9m-ecFIG<9M4?=[TY98_KTA*u:XI7DuBA*Q"TI6u]>A*17KF$dLAD;Nk;e]g)I1iC*5NqbR'Q_)QB^j\b!%8ZCQ
%'$K#gIsgecrCbtXi.!t%R.4W09!>AVmoJoYI=Ep5@aj6#nX4fo2c/s1dL+&sT==eiGkf`Pl7lM@AD0*k+rBQ4PoEsS1u)<1!nP?V
%O5XMR#Ghs4=)H[hW&-852'#2(fBr4u;E)qGO%CJU1$g<cM$AGX@FJXj!PA?lm[Wrf[Ze6djDm>rqN/k^Z03g^Z`f-3&islu-1i;F
%p#n*c&9mMP?6NS`:G=!%LV1H0?16Q3=%4u_At)i:VRreZS(H=on_B$RUAW/BcZ!RNf,bSn9#^(MH.t*t'(l5[Qte=\l]3WU>9dTg
%B7;c'1l+0ffP2MGlqtER`tnPqS0Bf.iJ`gT,o^LG<IX:5hhsZ9ASgZ\A]0ssbWP@V,Aol:1'hMBen#/BN'31.L*rk\@r!tnJ]om<
%/<IH6GS0Hjdeba&T6GX@12f^rmBfe*eA+gRXV`[E!L'IIa.0S6()hpd'?ZBuTpPITJf(WW1&('WU)9.9C`8'D)GuS@4nNTX694NA
%Aa%g4:4^;9r!:ETjjBBo9Y/tX`!V*Y+G+aj8n_V`.@6?T$l3bd\gqVZ4s<a""-[b\5IQ0YY9cP6D)p66R<H;RQCtU@B91o6kMo:S
%8Y.EA>+Z^u]>IW1_6>DgYbCHp\G4aa;srBuPcf*HH`kE+m@"d'Z1b6](+%sD2@YR2_A-CWc;44JbbQ_gDFW9q7cJ;)?;ERJ*lrql
%Fpb_kY>HVB7a)#Xnp\T@dQ+B2N&m/l[1i%7G!3i_F5,"d?qnd5%L8?m2oG]Q\.S'/&]u]WrIG#;^S.'?4VPocIYAT#_u!J$0d6VO
%L18MX^.(c7;"B?;73'DpnkF=Zg18DNWod"J\m=-*O4Q9$5k6e/;LRUH8^%$M3c+]H-;\Ti_]O-EL0CC^'s\F&5YJ'qK-PCOYF8=5
%Dl=uF%:n't!4KmgZT^<T05agm.[(@3#N*pQ=j[kk((nn+YI-HI'?Y2:J6\Qm@$m<&'Y1E,;[6\t<'[dOaL]*V_jdjO?ll2'0CO;/
%QjL8cDn-[/:=o&j/@21Rco7%,Rg0b%hB*<ZY6J*nauApRV9O'^H`>9eL,k*3,5pXbRa-`MM(%0D&7LF4^iOJV?Fj"OQ+3(8B(bMg
%@Z"+6GYD6g(fnPOV;+*j/E#=LBF0q,"k\!Za*==NL3\2pc<T_Ge&R<G\4Z(DX-g&P1_5moqko%eY)G#>mCqfpL2j^M$4?:02u2a@
%CoE>jk1U6V*94F,Q5*'XO:NTDFm:0:.kJ]W71:[^+dWb6SZ]1f6+;u3ck)/jQ<ciji)U<qm?+`X8<Tk*7Wq\)`-<m!g1/rQ4R2"n
%Gscf!C8sOFD#iZs)"Q;2/oc[6=i8J\AI7$HmAcge_h3'79UZ;>XR63Nkh8a-27n!+!_*?>hhs/P-`\7FDbSC3`PbGZ&B:brLh.ng
%U::pj[K3JW9I"P4R4>lWOUf8d3>QLs2kCQ"n<VSeTjKI1P3?LT<+2Y>q-L7p]Qi&KbL\@Q]^Ofbi@s0\n*61mQLB*9ou\-[GC?`D
%j^Npj)TQ)&ED!E_SC[*i3R[QBbE8*;2of/9l0-hK&\i8QPaJWt*r`RR+hd<V%<E\gjcp?"%JNU#I03/Qk8_RLpYLIih`H[*[`Xkr
%/-HhIcl,E;0dsBJ.kPKU$^Pfb>*/+`HC22:;0eWhFHo-2WEg*p34X9k]#LpJMCG4d708s4X&aMtkW;2"5'lbcWu#,*4FO_%HhHY)
%EMb7B`f]1D2fYpgG\/D`!3[K9`b&9\j';8l#C_)9HU:mtl8\c`YH-8^f@@>JL5))4_hjGDP>re(`R_[:Yr*kjH]n^6`4Je_mV:t&
%D"=i"rKslEg*_&J/>^Oi9gr;o0brHm`(`rtJ.PJ\M(5+4<f8[=%doStF.$!<Utj[V:iHtGM&U2"Dg`C;p`1YG>s<uL$<u/08k>bb
%=Hj_F'deZ@<;d<sP%-dU.1"geW1J=O,GnX#55#i)Hpm39Da4s]T-*5YBl6g=09ZZd+FJ(c>eps7IPEihd&5Sf:&F8l#6,r>#N+TG
%iVSBZg6`#o+g>K;-4pc'#T$SlF#1EiCZ\*N9=6jebX)Lb?A#Ck7R0![I%KA_TPmXG#Pj4cY)gVZ^5A#X/Vl*DOX2::j`@D(;Ze5a
%Z:a(2Sg78_,"F]Z2='a)U.JF.3q@eN&k"qH;M*_g*[e$]5Ze5(KilB/7/BnO6KEJA8s+QH-QNL[3Gm>0<6J8NlWMd=pI)P^0HF>c
%oeVOr?VFb(@-]3+Y=0'ZRTP9n&@+mu>=O[ESTYZ_MjAJmOA-%^?'C9a+q<ES3WlQ)UN]$tH*./4Q\\t$TLlSVRJ4NE4&sF%G$8s[
%OC_(RPRb*1ZsnE`^CiEG-=i2$]AHNoVk?t>;jet<!::Vq@u4Ht0fgJNL4*?0=]lL34EL<%Q!KeVW*m)*$0GdL2W.2io;N,H_6raK
%D%ZT7(AQQ1'VR+pj?]`;X7nC09;0U^EY/'%B6fSX7@1FQkD4!XMic#ub3ML<3Adh<q?HfhCgmBR,DjeNPRDb'pjf>T+CNkQ=gY99
%$[sEAa98Tc"@7\h$j*OGU/F<K&.&nBPZ%!1U%^f&dD?B\S*6HC))i9&]1Yo-8cjr;\6+8RNEYWlp:;[/(hZKp@dIQU`+jrQ!tSjg
%6kiFq*1Z(r1mrZW+,gQ#WF90c['$8[ZW@V)6FfRE9[Em82hO;<"+uju'/iXBp]lUK2>n93\]pSTPsO1$^^rra;20_rWU(=R!Q;MS
%gM+h-3uj!Zk_-ICMBG20M-Q>c]+Th00J0oSBtD1G.9o]7.1t":e4GM+-PniRArYXJ3>`,R#p9Ke.Appb8I9-OX(RIH4s98T><.6g
%*.H(%B>LR/D3N:0mf;kb$(<$.;=`3s,C>#M^ZRKrT^kmSGiVtZa9/e;V5M;4U.0,fh1J7?&s3m/XFsFW.n<,kJbN:p(-lSl&T#RR
%Y@);HL9([GWR(@q&6.6^pf'YSW1FZ1%P"5Q!TA<s'3Y8?lmRKjeJasK1m9*@Pj7GU#>AkLG)-KI4]S+NZaO=b<a10G]/G6YWtMi(
%!.(2Qm=VYu4>g\t0amB"U5)b*oB(dp5T6DeVlE^a-;L7/5pHTFJhU)D;l7c8RCoLtP)27#h[56/bR(Xn("u2H2fuKI;hj2<:.`Bq
%=PZnJ9"$OU#:9cYXD83DWDXSO#.o?G<<(T!`NR8-.\K2ITf<m`<@+h1c3;l)aP.$H]8RM=OjE7Y'@ZZK7'10j!g4[.S68:h:`l2u
%]UB($<+BMpF1d>l;fN*M"D_7EK^g]4)22<8WFgF:=B]J##^2t$&\4VcB4AM&AsE/5BVJ]9KuOt*334SI)8:a3KHlgr1;'R8!/fr&
%ZF7'+BS6_=NGFcWk2@jX<!/;_Fn9-\S`!Gl*6XjK$4$*n[1f3"@jA>B*E8@"4fU4L7,+N?FcJfJo!ru*C#f:co"`36>@bFpI59!U
%A=Bi=V@4+;[mFif3KqYA!b2Xm)jRk5FODpZ-Ub[CO`_01]pV$r$#J!h^SdqhZ&US:oDu4"7/0$G_ge+\-jiebdmc?2@PB_`%[fDu
%74'b7n2\CD?/1PlN+Jh:63+R,cLSRM,7g>q_3:;$Hk</:c\rkMd3)pXGQ"&,=QCA)-n@%JN3M1A5W(`9[&P>/\O)d0;>?.9*3tn)
%3"XYHdF$JQG1>b$,HCH+['&#-JsPcIfhg5?*GRJKAB&-tKKiJM%!8Nj+JPoPi%p!G&R(Ym$Mq?W3)nA0`1Us,BbX$YN@Cmh1AW[d
%ddO/T;@gEuYQ^#c@Yc_iYg1>XTiM^/6Ec#<j#f,8fLX7I!d,]d^g4f3Wp7rF**O0fhK>-dC>>i9CfA%r9%20-+Qla*7V,a(0]ce@
%jN8+2LMQFe$80/F.PTh5L)-sE0VJE;ZAK2kSEU$2h%"/hM;:]-0NbGT:^N+@-mC"B"f$M\&pO43d0E&N'8uqjJ.i2!Vp)eD]td2'
%mPh*a#Y,!.-CKQ2cP>Jf<e^Vr15sN3DlWF425CalSgcjcYCQ&W`4utH^2nJ\@9.:XrYL6%UGo-&h5mc4\q>8Y*g3L48Dj[fTBQo]
%i$Zk9K;qFtEecbXGG7_YN@NrIRL0Yd<\`HQOQmQIi!Nm'#>`$"8D);>=];LX_tFS/K2o*OkY8/rJ!,,3+M'n;=hV[]hB@8]G_I9E
%eYo+j.kFfKU0/*$$AI3/:+=O?6nf;6fc<3J$ACnq=G)Y.K$qn8M+#<mJW#doB3Mu8O[+20RY6I-JcLB2J7=(2Lcup_I::[O624Pf
%W5@F<lInNd_C:_cQcZ?Dc1ulSAHjGqF@+5l%(:9f=/t.*&(89Ufr7mUM3DFXRR6MGij-u!Jn]b"1Rpl-LBp<3,&?f``[3N::j&j'
%+eG1YEC^c1B,Osr'[,bT6G]Ym)<_b!P-ss0oa.n+<Vr>toMIYMDXD/Q5]J.2(YFQgi'\-T98J[SK&Fgo$2(XZ)'V5n--UU!d$n!F
%$OqtMW%*ne'#M(JANWLh6DPll`$Y>6Lo[QhN:[GHI<8)3/4g8H:GXIY/_5RL%!_5E8F7D7&eJW^#`:"2<D_8lB=]fMT;spZ__n7M
%eYm3a<^d2s9oHE3'9;R_(@\g@5R[j/Kds:#^0l\KY/7K$Krh:-O=Gk$D8'G1m=Ui0OLr^_aB.pepC=)P_"4O-J5Y4PX5]I\YC/kC
%/#"#i_L.;GeH.qf%1Fde#QlT.P=0Ro*!mj6LfVbhN=&OE`I4PXjo/9f=P5.'Fl80g;eauJ*9NOo@lYq[J/':gT4ZWf*Rh;UeBrBX
%.Q"fS%S^W?;B%k9__Q?V[n#PINk--bBdc\a3iFjeZRSq#F7mnZCZPcjkRkFb.aV_r?qj!YTah@Plad+^!4`M5R+3Vs'%]_F#s0#c
%,!<AFdR9j1TE,cD!f*:D_BE]si?:&+M'S<*WDfcn/?LP,8mN;uVb7Bk%md@c]LH?5IAs9,=^Vme`1oCe&>u#r*gkhZmG4/[&W1O`
%OO4'1^en"i2UHMb%ub8=<3(J.B)6*;N2R%<6m8a_BPUJo7R@7CfLA7kcj3YfS61%#8H1U2(AK^Q>9GDKE%s?>6U',#*h^`jJ>-3S
%@r*%9&8@mOQ-`)ZFlF%N\:V0o%Lci6?*c7#&_!Zt/^eI3FLjeu[T8+Zei"1n*g9&Rj$AQ6o\5I1dT(/^4DYU'.#5X>rXmR.CNO8<
%Mf-3qnGMWBQ@"BjXq]=R%^d'C3,.Osb0][m4*M34q3PLHR!Vr#@,9?hpTVM`W,]>&,5r;TmN,CBeN<e-)ATY1bX$&r-A6`%%E.EF
%Uq;El;>;-d7783!dpl>nZ"9@83u:a4M)uN.M^X"leNlT@<Nr`P&CElWjSg;0;eqB16#6^uM)=Wt#I2*-lu>"@XYEZ4%O1157s*0b
%"Z4BomaOZn!ircg+lYenA:"ilREOM0@REh1$H#46,)*>s*hiYh*91uMJZ7TMb%"&9r!nq%:$Z6IE"Et?7kG2U&Tt7ua6!k@K/?,E
%3/BnpXbJeT6mT6MFR1!cg?C]/K3099CE<t[PLIfC7.Rmdljb410W-TE7!obU[W`::R#<MbqhIN<\]E^a6*(WM"**HG!XM[Xs0*[R
%5h2P,@>3kb2t"29%H4L)FV$)$`Kl:3Lbb&U*^g5FKloFjEtG0XYorVk7t`+La$&]1,,&.?rt%f5Pq`,'.+PVs;tU[e6mS.HLftRf
%cf#q>bEOp_h0"`6aWK@_co._2hB@b-W]Ri\*MTKBL(H*.YX2rgn8KtN<l+GLZEPFcJ+rO*(LJ<`l@4\/Ks`>G+5pu0+Nd7hc;>M5
%=!f6.@hNt>n`p4[cC+:Z4`:_N>KA\;'!o#6(kP1Hp+L0'5?=o/(]JrU@1O,SdSG2da6Zc8!h7$"NC3F,:ei]=gV+Z5D[1&hdmu^k
%>C]WG:NX[lSLCUW:\sTrm/=LCL[<b]-#=Laa/`(`f3!"5^7>P3.kEYjD>.I:r'(#6B7?cIru$7`lsF,tFhB.Qr;=\/E5;2Fs7koD
%T6uL_rJ/_N6Tmu>pZ[oAqQu)FrJ6[sI#cf?JB6N,'JP"B0K0*0*T2neA[8$-)Pd.m2CmXcfV:h9LqFA99`6F`;(1]lM\0K.e'.ua
%\eD(L0A8_+kn0V!f[sd'9V8!(M:Sn)U!lonc3d-PC@TJr\t`%+9FmUaFT%HT!K7NBFU)Z"MPN`Y@b-@f`R(<4O=D_94J8!`h$Li#
%bic8R_rqcJ2uk/,1N1hU<<YRkSI1,!VT78Um^kd@kV3UtTg$@jVst6\.+@tF;TL`\g@]Kn1%Vr7REo=l_;A's/V8U,9jQ'bj+LpG
%O+XiNo*6Ti*A'TT2>Z%ng4&&VT3KLi(=o'coM4/@gK#fYC7`H-Ff-ge!.lNN<Wd7uOaCpMGg=O`)D;94*bHT`G;KqLOW=O@a;&Y*
%@WckfTRQ7E&PM/W*&C[_&;`<W>R@dWL5J1QCZD_fGt'+4-][492fFXM\/n_h?t5F%)I1MYaGH^8elu[\/WOkCZHJBMOJl&]7eI*0
%-pB3Q1lCD_^hYJ/0)c,ro3;.a:QRU:9-iADiFEQuL`6h-C"#%4L?fi/Au=bp#TIM3HWC@Iq!Ti[55kdXZ]BU72#I%i+O*+L]1]L/
%@]\#%(8Ib3(a,WBXdHoXG5.c=q"olfO8f7?;>LuRUHe\Ck7@U_n+sNI$t<l9/V\1V8PIa5`-3s\AhoNR&.*oa5gW#&+QTA')<*=,
%#Ot9m,^t`>^'$NulRuar-^>$pUE`rXb;?O.$1Th6;bR37ng$J2UdX!elD33]."mpD\UfArC0bBggla.i.f$6$Ceq,<85knlHuI"!
%ELNoUJ;5Ch<1G?NEF:t5.6j83:J#(ZJ.kQg<hRQAeDJ??'HW`7O,of8k*kEAS-T]e=STglBIDu!9MVIZSE6rA+7<V,;jEt^nlR<A
%4jf3""_*/N+q989T`V"1abHti.$=<k!ClVWMdm$4NN!b"I!H_c*ZRd[&#"&L[u[:h#EfE%K\/9dafc^KUI9\Y6"5PB\B%pW+$l29
%",r:sKJpi,Bb0R(bgCa.>)Ei7+30L[=UsV$<HqoG,FpGE:"A_9\DNPV0l^fR;V]&F7VN%6Z,WW:ETHid:L-VKU=]X^%PGWf;+[dY
%b_Z)qf];kESu>)?T=B=`?X$N@@uQV9SYe)>Wm7P'2nF[I1H-d5SChFqBuY`,#@33,/I$t7qT+Ap``ZBQ)%k!P\>\c\FBMIE'.Jo&
%MUV$'DpY>k2NKg*"\%dn].hlEL=.I&reli57\um.(o4K<8?Ukk:1,JBT"9i>B$LT_BWjSn*X;ONhkLA7p5_/*h2Hl\9#5@S`3/7:
%p:0q2Hh%O$%!1fU1SL;k9+QMk`$C3M8->C(0G$%b;r,72[o6>tW%kRA)Mf5<o[0dKKK)>Kf_8R:2;8YXJ-.ehQZCWd;W$lR?%KU2
%XPh?Bf3UBL]>;@A+N,UlmpY%u266j4RO)`g1A)>[-SRrPJcdE%MQBPCiN;U;)7Wt]c#Q"[0fX,[8>Bnr`mlHHm</[$a"ZH+!KV--
%;nKl`5S80CKIKh\Bu5@u?6%P+JJ/l9$e."S.+^`3:69/8]n[=dQ!PPUh.!i+C,'mAE8YdR^D]i'29&"@'#pg'*H3fh%=B2cg?j&u
%2gAG%KJF!/:,*Npa3^\=;u.gf8(^PW?/%in;4BR/V.#bRYTh/I@cTeI[s-!-,55?+!N2k@J5n?8$l>dD's.)JZusVXL2W3!5DlsK
%ii"'Dog]8#9p&@&Ad2`YT\1C=Bc)6Rp,F1<^3"d5'1!>HF>r*=ri/SK%]@]Ra>lT%A\*U2L@_%LJ`ZCFm)ctCUjHm*fFPfKeq4^"
%ll-1o"/W&9=5\N9.srB+g?W?[2cpn2KZJEeB""[K4l!NpHe?,JXGAio"AVn0"sS,P>mYB+W;,<YDRr9i>&OrK0c4k;8@-G8`lND(
%4h'g%"n'F8_D_R']A60J"qOoPBsj4`-nT9S(1HL1Cu@.@.eU4M[<Q-cCad(?Cpnn)>=,>#]5Fm30?r`i2[0Mi7+B\.j1t5FICC_G
%5DB3r%X<*-S_=Mo<YQ_BTMB9*%o"6q%\[^s:Gqd06SqYGqg8jCYRPhNE55>:J5X9j[j]9_DJD*7#?hXtjhpu8'ifY5h%&An(fpED
%^n]ZOe8Fc[U8Y^$L<Y^Vef-#PI85GsZR./FDtVe[i]J0;[-lM`BBq(*bR=TZM?e'=gbHq(HPOHNa:78;L@BRYW/Ml\pAtpd:W]3*
%XtG:1<#aGBj0Pflh/SN:M2ZI+N^3eKUgQrpiGR%.$seQ(2SK^>q`AFf1g*`LL:u*5\Ct0Gn8D/AnOfRg<!>8%TrX<CbR&dd&X[95
%@aZY4mD034VAD/AK(VopjU`GmjQB@*8mp<9Pe+=EIH[(=(=m;^.050pe#)0./+.AVCphh#$j;lQH#a(gQb0c`(J"b_Ug@\XQ"u30
%m6k$DAnd0<$t:_lm@sp@^`i2.<Y<Uub(iet+dAGO1,es$5eeDD<qiKRo`CMT2&u^>m+0_&#Bi"76c.i#6^VJ@\*bT;\8@TeMIr!2
%s3sd,4QW"#iU3J^LoVLs,P*6iYRDm0#A[Rco,_Ampl"QUlb5^4dR>&(iO!=DUd6:Q.PWopgoKDMC;:/DTmPNf5m/9r(*C]_"%,<W
%&JR*:*&uI$<;X=HX9)Yk!SoX<0IpTH+kdK(&\5EY(FgqO>T!std^j2G6#rQC\q11mCiQL@/A>d'_pKAumtEGb$qfh.fLMk&%0L#3
%q2QR']Mu=5N'f.sQ,[r6LpFU8Zf&OFcH%10Na4]!c_Q$jCU;$l!R-(9(S+=Am$paWB+=5"e;WEdBF^!^@Vcmbdm.h[27KkqC=O#P
%f^-VE]"<__1EWm.[&b\lXc">:ikQjP[&0fVX44?cCl0/SH[o^A'EX-19C0Kha!_WTo9t9ZdPIGIQ6bo[J:N8,CJg\A(kKQ%aYQ@s
%$AKJ,9<Bd\/4+!iV9lMbeYQf^]qj8>o>GZO4tSNtl90OSdo64WNfM9&"FIT2m8$t9ona0LM"jY[D@hRTB%*EEfo8>JVjl"jWYcDW
%()6S_Qe?^TKKjg.039c?jmF]FWM9:pn#=i'faZEYSe5/!dV0A16kuXX:n35KL&N;,gfSrI(>%&NF>=K9EhR*h"HM$]D:iq\@Mt$:
%8S<g?cX[s.YeX.e1\^f!*duW<Z'mbrk%ruJL8qm`.SCI?)>OK*Y`R[[3WVXf1#5rnjrDslR@YJ"gLiuNY[sG89F0*$f"\b]KOl5f
%pJh<bG(e<L'dA&]=2JI?pE0aAo5#XPYBqD5,V+b&/URY)-IK%1j_7L`W;-RSU'q?=\+nGC4O4LU*^eO8*uULS6TP<?gJR41YHp"o
%Xs%naBs[uRm3qpkFlaRm=DD.#h(XSl&=`Lj*C4FUgfZP;<gP1.)a`*a'L>`Z"dsAkKeaOO$Xuu,nSH3NLj<hQC]JIb;)9^!ApY(c
%2P/fqU0UD4R1j@<XtbPe[l)R,FKTSD<oU>V/f`HM[BQg>4N;]upjpPO1g-IpeS-7q/9d%F=6r"'2@-+XN;PtFHOaJm7FI0--3i4@
%M)_o$f#B#'qrmP[Q'oIijlBY_\1P^4(Bso6e1Xt/0ekWhJ^BlTIM+PsI-SSK=3\.G3ZFqIFcrji8l)ACTll:2+CUP@lNpZ+NIkUQ
%TS&hLQEBCPPAk;RRl*"E!Dr^MWLEo^`Ng#Sh:E&K>o*no"qR&'9G0F^nd+bfJcN'[<8FuN6B)1D[f*>p@?*^4#%eNV^J0o7X*(/S
%\ucZIfPH3i&ZEFJ!d+n=;miDi7Q0O`?A<XT3X**cA_<:fK-#B,g[Go7*HhHX/<nm?>%SZdjuE-W\-fAnk@$C6&M(]c+Lpsm33m^+
%iGJhY+@,4:S00QDDsX`Z>?C#e:Of4\@LGei&j7iV%6l`En7Gk=l96KRG27L.*ZA2:U<I2R7dS:GS/;kq0E=T%:jioJ5!ttc6Y"i7
%>'I7J?bt9VLf<+a`p%"A9]B$.53AG,TEjuGq4kTC4;)GWlN";4>r@-JT5tUPhNrdLm)N>cQW/+*]#E-]R'lbF'E+%J5mu/X<2U[k
%c#Ie\rMGSbgEpa<@)B8Z22baRQ?c,-B,$>P1:Z`P0Qba!J;.i^79o9*oM>u4dFHLH_6b7uD*R^XQ.E$tctu@[Y7pW69JiYT/;7np
%7?2@1W$:V33AgKTZL5pk;%csV$MG*H'XaG_\fe5a,.Kb![m)8]RMQ>TZPQ(AC9O+[)ZFq+aeINR`%R-^TeTNKk'K&FQC5M``;N.]
%e7Q3HQ9o>]aMNJ"N#6*-M/]RNqT+Z;5eG"oe.1UN2L&6<BrI#uY)]<(4JuiZ)*leM+4;eCqse:llo$@.4ImG@n`S$7?kt+J$qrge
%mLdbJ.O/dLAgN6j@ls8?-oAcKfhk=KAq@ik4)NFC@H0WPYLKJ*HDn*qBT#/eV9+<oH9-S]@B1/'f$];hSuScgV*05-bJX"cXE%X$
%eJ*U,#nI)&C_d65KV3:kh&%);\n?asUQ_[+>r6Q!4%%S^Lnl@Y(=Uc3dR3\42Bk*Wkn(KN=jMDq'7b5TFTEq"E.7?B5mZ=@@C=\#
%^_DA`2]@Ss0alG"Gq8&B]r=*gqj%,u^LPeikWI7';t[JK@c1AlgT$lMcu%<o<=U8(elgOe\\i8`<Tl_!f=f"aM:C_>IaEG61ogdc
%1XQ<U)N/F7Vio0)B*W>&K1\5[`fhc!2Vm5MH*(Wa]Tr2#DdEsO83h2VZ2C+d9c>1`LBDDu4CWf,9)W4Z.aDLpZalL+V]49Aj&&9p
%_;RAM.?4lT)Ucu;p,(COBZEL`="KS>GYlV"Ns>dq@GiuCm.eV5c_(=>l.It\"\2A:6uJ&,?(B^`L9tm-<&`--LQ^j]YfIV-d3+S"
%eD2*TM3Vcn=KCaLG\e8^(LXGl>//K'qZ3pV4`M<Te3LsXD[6k)3@nc$KWdj+-6X#F*!iVqC<<W(996GSd:X)S=Y8.MHDo.1\/o8V
%dHEg+VUrN:DPCb/4P!iAJ31'i_+RI>(!]9AKsC<_F'7aW)FQa;;qR1k>5aP=Yn)#\_h*fr-Qfnr1?3II24du\+e2":Lu(]j'R(Y/
%U--"n#"^#'@YT$t+t&mr\ipcs;:QdE8.^orO5-oE,V%/VVV.W_=B")7(^"g>m1\*f<:1s+,E.6(c!Y46(l+,om^:][[WIXV!e]Jt
%N<'u,;#:9E<f99#5&lJu/*G@T,G^HhM-_hZpt):$N8el`!)ANSo0XM_*o^L,+qgs'''E1MZilsj@?f;[JU9.oGiEUMVp4YZS]n_`
%O`dlp)DV,*7h8`"Y1Y)CPg*GB<[o!GXEm=W>)\Y^""BQp%auk[mVZh3>"_Y*_KDee!.qlI)Fd*I:KdI$aW_^.Q:A.&LlL\.<bnt`
%PV%t8j0Zt0DF!$EH`bO,\4S=K%bo!jE@FuF-6B^A1BsX*Ou4jmiEf!1!N&o1,cT:,U-&+##.uN1W>DEdgW>'e@Y%Y^_+RtsjMC#\
%VdQ[L(YaXp^dT8h(5o@146=hsS#;#2Ep-L<AklI+m^WV('SX%Lr<d_M8lrORk1ddUQO;G*`:0$cY0D=IPXA7lTO;^/dL"`EWn]NG
%1=OSP[RL#&.o8BAP;:HH2/L<-h0a5b(,C8Z^*$#[[TlH=l+pB%E$Q`;X04i@8e50'FD5c1jRRGkE]21A,lk(XMs7bi8!RA\:'IeD
%<=[W?Z/PtVk$_7ijTUTN*Bsn@WTGqhasq3qiGbLl[fP"<r9+lHO`G&52L0.>?ko\]H!sq[k=?(cG9n)uhm:^[J6ecG%NG;bD?Dh`
%a%hY5^Tk!0!&Vpgn*Pc!3dJi+W6DJ0e,h+Gp9Y!_IFj0,6+3/pK:K%K!%2A:cR?^mRsC)Co89T1.g,fWN;Mal3_C[0n+Pt)!Ob"5
%go0YLi`,YKkB2^&5`+4_o=>r5'E6edA>/:6"I&q?e&F,dfM1b,LM#)IZY$db-^Z5oT5&sCcW(Z%%c`OoSV:NDi*iFrOKtW+5#4;1
%q!J2Gs/%AF]1kZ1@$V&^!GRG$Lj(guHnu0%EFQK!d;Mj2ZgGj.eVpX_EiQ=]Wnqllje24FrVgWa>r4L=ZHhjFRREEtnN"1W0i(J8
%D[4l9mI3RaoZ]/&>NT*0qr=bc"GDnb:C`'6[V+En;p2WgoIVe&O\PfTNNJcOpYie)!gm'Hp3SOB2e)93E6-c/bsYlf?QjI%/aMl%
%'ClYBf'nJhh=*D+<SKKUX"ZADn;ja13+1*>`OkI!6h!f7)i^P<\A[(.pV`h;)8B^emqgrb7?sap<Ee?=BNCiGRB(Z$:7rtD/aDq,
%$ROu5^tDKLr/-dUb5\>EXL&e)Q$tS7.u\f#OX?IKSr%J5E_"b`DDq0\!H.R9-a098$JWYKa]C[SWu8PggC?D(\^dqUI:X):E#`_H
%U6Voe";hcO3Xa6>/oFO=2?o.g:A!=c0m=Xb-Hr^2J[NqD="^h]B<=X*PKp+N6h^L0B2:l?8dctTD&n.uA0jR[#12/!dIZ:J=%Ks>
%Mm>Hb$,1Eb_=kKU*C<k$69Tb*_8EkP0IZ8Jq,9Xi1`p<$D##Ct*g)5/Cq44B`I&]G1uRuZoC+a2%`@chfJ=KiCCF:!Z"kTuj1qnQ
%c2*<ni.ZhRUO&lcBNI$I(A<PLk0eco3s$\:MPK$*N1)OH64J*`"rllrk1sL".5GfN!C.O6?T^Ig^RM@oeM)9M[$p+Bglg:?U"fub
%Ic^R@"nGJ.1L%B)16u.G2ci*1!Nb_gQ<Cru7R"siT%gL:BUn@J0"QfHiZS'/2"\%CVi5[:;<*H6K<*0Mq5suF872bB]mbpJ7QnBR
%4:4``W9GB%Ilml.Ibe?-,5^B'*4cJQkPDr!a[nIl3.^CpekMO96XCH(1.4O8MB4"C4#18]JTfFSEbat<0GCK^UCcNSK@<HJ*f!S)
%VON(*$EcTe"Xb>oBZE.B3t4WR>NeR=BZc:eIWX,\LZ"Y.G5J17B80^A>&QOsX5a&f;>m>prttW,2!E4B[2cWH4r(0e`@GN)V6p'T
%.':r<jmQOIVXNa?m0)R!,F%-,/g/f4%(PO&<JAn44*:$-]lBqjWQ-t6c^/qgKiOP9Jps/#MiY:^]`-`q<C9eEg:&INjF/KCVlb(T
%g[Vt%Q3&D2g)0II]tqV__L%OlXWmnPfeFDXS?%Y%81ECTgTGAZTk+*PP/W7CNh(g:)_CK,%g;1K:@:1,`A^dmgrbQgV6GtgnmZT%
%:iG],oWgA:8=sD=F$1s;k;B`2I$6DR,Mtq(]BAi%_(:So:d(Z!XJ`S3;*H52b4@6"<!=Ko4*Ta<5s?Ape$5ST7#[iQP]G7_*Fi'T
%WAZncF59[4r%tYDemTSAOFaSB\4al.?GB/*GM2$5coJO,iJ'DiP/h1-Gn@H/41R!QjOu+obQd@(*Rln;7cMX,Vb5sl3S907V\'kl
%>i4J[_?1'S.P`+<h"5_6qop?mH`ZdQLgqi3Y?!9UYB$9=Y;oe&MG!BA+VFKWSth-P.l9n_G\!^j=4JP\R.H]fW$<ga>L_9EV+pMO
%O)id%[?t4fX\7*dQF`XXEYI%L)('K39%CWTRmSX9T.kl&SlM.e02qI?F![]q/+TYapicK$0(duidMU.NHf9)da',-XVg=W_eAq8d
%1V6L&DcN@;',f;?=,Yitnb(M_/`)<C=i>TCK.\^:?UhD]kIoTLp,25f!jHM*-9^;'J/##0Ee\G26&)@AWL/u^XG')gZAh#9I3'h8
%h94!T4Xk]7eBBL=#A)5!p#JBo5VOr\VI-R]UP^Y#a\^mn.&@laI>H_]Gr.%8L(0Ir/)*p"997@8-:M@.(/!/k/.f3M`Nh`I_I*nj
%E])<*>OnbZ\A[g)'=?\@SFr`oKe.#DMC3m*LAEXP2C%%<m2JGg*eQpr$l418*;tDJS^!A'M^OuGPY;O]%$^l9NI@e1'lUC(KJqB*
%IVM$GPM:(Lo@c2T_*JTTU<)`SQGF/==X)dp;!JpGj*^8Yi9jE*0Q-+MYmjIcM*mpB3kS>.Eh[+`C!+LXO\rTgD`?WMN]bH6oAm9O
%fuHn.6tY?1UBaMCoRR<tUe(;'R^"h$Fu%DW`*14$JG@BBgV!:uL\oiG=afUA1t<SidSND-INHhf&:k?D\C7Ytbb2T5fe>!6q\nBm
%&&X4/l9aj1$J?`%m>"2>gap8\.r<]aruJ2Fa\U(-pSlLLZcu2m'VA+kITJ+(`_eR9K"_8,FX\9Yr9Yg$]Lq6G,]_X1jQ$r!HN;,f
%;V-@fI,>*VUJ+Hn?\aAM7[_Ib:<*6nItQWI%Z$?m1W3Rj[driUY.afg>B+t4^^8jZ&].`;XbC.jS]K_MU]TjfYTIZ*FQ8(.P?+Q4
%lYS9r7#Po%PrW@ji8:8@EPB+a(EYZm8inaM.u+,]\T&e;?B:t%'Op-t0fNW1S"1:XmAtT5;(UIeX=lgqAUK-=<>84s25Er5=j%@8
%2q*'>n2k^+MkprXoH+##Y1-_lno`CR7N.=CGq3k)pOs5/QKuAnD+!Ci/X-d51Ns;#.umfI4%J*_BsK&eP+'b&[]rXNMNM;!ChY4.
%eReX!ito/)7,u<5)^P,[.1Ms7M`S0;!1($?H4Zm,.(eqh9<=b(SOGV9R7rRib00asVAuq@"@(D\ljsr>@LasF\=K!cXbm@^7M.[C
%4P9Hk4$4W5_0sh>]jur?d:*O79Tp;=mRjSM1_(]I[9&0pJ[t2XGPT$hCnaY!T%jIE!h$^%%sOr0p)iE8Wm06FI"U5IN5V3N\@Z>p
%>i=ZL*@OhsTVAHAC,b^#2P5<Nb@3&Gjaq*Jg""<?T0d[e)ZF01g8Y%Tcsu-k.39@o7eY?h$+Ic9\q8sBLSu-hkc16c_)M>Z$G"2C
%&_FS-M<R1i0]s3/ms0jgkhSkDXWeXVdFm9o3VcgaC"<Pre<^TSc%OpIF#>q9Yu_FDmHP%M]FX\Q#])V=(-D)t8Jf2!j4^c/"q^1S
%_H0*gE>&skS8(RmjlkY8]JluLF.?B?'g"dVUCO9pe@cQ0fKF(6@EH"Acb@/&G#lU5VFktu'dlUnB0*u9-"o?-SXr6-?>X?q$E]hq
%^:Hb$a7JMQ#(8_,eNk[dXT_aS7RpS,nU^h=Y&"@Z^2g1&fqWPWa+5;VJQ$(D#sasQBkq2C%e+"d5FUq+aX%<sJZb*i>K\JK3KaF3
%)'+U\S1J2or".JJms*4Pl?62rd_\s0Z,jb?78NQFoEDq'/6It$:h]nh_I%qXbcCh-Y=+O9GRCt8Elh7N1!i6@@#RR=rlWo0`pcT:
%I@Xk(T^IUZd&QU:"C@Z1-Kjem^s0Ls0[/*M?V#Ss%cVfY&`@6iMq*mJEAS7.S7Wkq'mku_Y2HKAkKLp/#A@eHImhaZ)XCVT`bl0b
%KEf&s0^8nLT;n%95mGuR??dBjH/276kG:qiX1hd.9uqY-Yk"?rA@?7]J_\r(54SF,%VVnu%]\"E[&tG_q1U2Y7Z%f0@*'a('uANA
%_<$GT)TJHfqM#LN8/h_nfG%#7%D\,hFW#G:/D_2q_PRQB4MZB+D<FQbaJ@YW5W_shJYfs:"$<Qp,qbc`2r-ULd2r.q*)>(Fb.riY
%Gsp6H_9W.#q-XaS2R(a7VeM[V;XLUE$Ij\0SpMI)cK*O-blob#[UVsoAJIcY<fZK;n0'=\6jlu1F[+d(b&l$UKpdR'0+;*?Yap@d
%>,!e%J;ehBNd)lH%6ZotC$XF_%8`CjoJP8BBk+qAW?D^]">@a&Cq[PRKA0sR:UfF,$==dTE,cipBK4c4VAhJ+*uADll"592o&r@u
%W3[8O2EqVp.ciT.)f"p'@aG4uAE5sKH"i[3oeW"Y#:hq@_]+,9hiR7H?IMDkpo=ES_Q8.H,D"7N>Z\Z!NkiT()#?#G\1'Yof;K;L
%OgLMqd0]0aZNF9Eo_\f,[oW/i05B():UY7h1@k4f_Wr+`+jdZ1_!.;O(L5#'^%d.3^)7R-Z:DWAS0P;f*-.o$8`X)i2GT''CXIKN
%ma&dAW;6Qehnqe(UY8@''rK!u=B+tM(%.Qfo_!^QcWXIqTG?&$l%\316%)MBR4H65hF/!qIKGRaff;-FDn[5LkIT]q>g;2R(G*>&
%(sfq4Y73*^DAYP#8^)jkLKId&T:VQiLFq:4jRWm5n943$:`WkenCS4lLl./4Jk,t9'iYO1kO,,="\PlQ*3iko)^,]&8*uZ$`'`7a
%%b;jP24_'kqUi\m3BY]=_p/9a*moTL?n3aXf4-3k<MqalR]*)0V/)P_)J[<YBY@F<=LB/KL><;aC]dLRlq(=:8<ClC,Trc0I&0Q1
%,FSWT@*HoJ2nJs3E`?RMo^'n3ZT++\j]97X/i8QOZpBE%j"#0hYh]pV^VB=i:"Thm'uP>AdX!OIV9''O3;M'IArX^EMe@uB@qIgf
%p"D0Epa_-ST`[h=R%VRO9lAd=1q%u*`&24]5.8)g!>sYHqAuKqa3eaJ5%,t5T-U_mYHu8=b%B+*G?':_6S3U9SRj9IpG7jd$ub+.
%*,]D\("bRd.FYaR2SQQlkr-ZpJreA-Mde?Ad#Dl%pguaB]^`CVG8K]C#8VE_23`[:ET1a]7tRL=oWBn;n5SG<OTg"!'5R>eTl&%I
%YWYlfj+T'G>[K'QTN4l#R%eN$\'kZUXk73+9LbX;_!.aP?qXGjMR#4I?G/?qpVs?V0OBG%Vo<$8n;V7(8O(Q8Z7?_!Yj2(GE3HSs
%b2-5tU37-4(7Bkd6s.UR2L4TElbsHMhM[io_2mYZNs\Uik6YAk;RJ=!C)a4?a-hSdWVXV9*'Y3Umoo4?N&ZK&p0HQSnhEC(:=8d!
%O+!>fSm&0P9R]O=m@8dUQ:B:i:S.)Kd2^@ZXs@[162,))%+UuHTo6/k+ZFaN79d7iAd\ifB!"U8St_'(bApmHi7g)Xa`u1s`'dj#
%c(;Pie)X`EL*I$3mQdtR>/THNDD(h9G=!fVp\KlG[%)!@=*j]C]'iG">ZVi/_`4NgkHsre3BZ./?HAo<V"!coGPQ8]iH[hKi'$b<
%D+.1#Cr)I_hU]K%C^J<)Csm'nd=pAcag3(P+n.0scd>j&'CW#oX.q7NI*Gui3dS#dG-%H`'8["_s,?WUX9[C>1XSK*B?=W3Xpm[\
%WIm,e@#AuUm"ZOJZqV80cQ+lin1+au5u6d!daZRNf85V6$O4Km[1`T\:LP+]gO?qK,rl*o:bAU)C"_7kH2`@p>@m:tOeY3K?*/*[
%dTRqZfg1F?_NW$U-VHSJ^<P;G]*?A]N"1QID6T?AMWl!hK+[L1-6QD)g'k^)85uuki7*\-m</d(jQG.Ic<D87*TK,54&bG/*Z'<W
%"p3gNB8iY))M@M]rWCcqW["!7q-ZjRq75,l7@_WO:tU"CjZ"t@Y;1>4j)>,<DWEKf`+"P(R:Z*A2U1aL-u>Cl*k];5.5%1e`2An_
%5nL>\nkMDQ1fI83+A-63ZG;++fW>=<r?2NS*m*HQ[kr7X&RN_59VW/u"nrB)oQ-@O)`W/`lSuVVq7]c:q_ASTkY.l6h1i`8IDMb`
%^51s_k>Lqo72jDda?_qZ1TSWTiAC/$YoOP+VI:Rk#f=f/R[p=Xfr5\t[+.W2nq&_"1Ub3@Z/)H?NKRB=EbJ)QN3br&GJ@q),A`nI
%BtX6lNW=^Hr`gPK&ZM[f4",[mOYZm>0dAKQHB'/&A*6EDSA4HoK5bYPNQFq80K?$Ffg%VDC6bU?\p"=pij,;<:aSLtdjWd]f^CVc
%BjISJcna^]0B+EU2R^L4k?9#Uo\=0)JerB[8m;g`m8efWa19tK>3Uqdk$[pZ4T8OCF!$0^Y<^nma![i.boYI-(-oL\Ca5>0k&XXU
%^;h9bNXp2Z-'73B=\qjmj#D&->jVt1DQl+-.ft(!K1:!"?I,@d]>TWp[.eqQdVuW^..NrHPBbW=XO.rO+US)U<Bj9dNao$gZs^')
%@o**$V"KsoQn@+l=4ZuSoPBh$`^;HW#O0dLj\<oQ!a.5C\P;+cAj8>kXJZ88pLRJ]ZNf)6H%gjk3Y$-&(TM:`G([ftS'<U0(*K?]
%3.bc/OL+mlHA#UE(A44rIJ_k<5KU]k,L1$Yh0n;t`nkqN^54F?r9]#L#*0hlBL<RQ"D[XjNBJ+6At_^;j@u`-MXL#cm5dj_/Za_J
%>!Mq3p-Y@`gGMl!Tr8.\j.%:Y@1,KNA@?O^oe#CR5Ch_)^qU>P'$&Bkf$EY*'#lM5HVO"I@^lH\@!4fU*hCq%d?5T]l`]71Sta\k
%EtT)A&eMap9fMJMR:'Vq?%_T_*)0ALaJ-'*Gtuk<j+-(N4ukh3U%>tS"I_ZrN6SB97DgSiWb5SA.1iB"GaYF_eS?,Ts-f[u-4OSn
%'T):)\7R00l9(&9c:'bE9k1Vj[c>'kB_:Ih&dtU6k;;h(]mb#D.5/?$c0R_H[sd\NW-g=[pIq5!9fq8J*k#m%bQmI:p!(KX=,3&[
%nt5$30rD?hcd"2a^9P>:O_1eGWbkiE\rUFpYeFrs8%qErdYM"@p4C%icKhAdh-+<s9]H8,c"fRP.a3n^5Erg^V\0<um4=9%4?VNj
%RB_Ac(d0c9A&f%\9@u^NSFgTS:QO.DHTje%X5I3ma#bVe)@%F'JElI(44-M.Q4%Wk(_siDpR2>bS!D@e&CXX';_#R1M!K'6gqJ</
%UE-giMhL74j2Nj<HS3e6A9GI@56clh1'S-_[-`6#;kBsPe?2PX#_D=C2ng5b6D4*Ho&(:Zi7m]P<p"0YXA:qF5[OX2a8$7n?W,BW
%oc>GL3fq-\S^Wlp_/::j)E+oURO9.EF3L+d%0OXE2^b^JP!RjbU>9;Lq7ZNur.%D3I.LD5+)iVQh]D'0FRU`?_o'iAs(QZWj-Otj
%GK_UhAL@ftVpg[3e`q-c&b($t_5Pl3@!M)nK%@Ep5X,@:qC!<!q[h8r!o/jBT?Jh3h24N-W4[isBEc2oXm3(PhFAD_<M`lCds?ZX
%J38[9ROI6_TiYC/+E2DW!$`LXVKEpC*@PO?&5(;/lkF^f![hUC)bu6ZIYerc*DL6*[@mi"=rpUO]RUjFZ]aJcL?YIiEd^OCA7n*.
%=t;*n!^7&lP-5`.AnpsE*OVH^]o3FXnGp)r?>-DPC7s@C6+s+JkC.XqNYg[/2("jOQ%h]0SpCmclfDQ4nFZ*UkGR!FrgBtQ&U5A[
%[,P@`6sI/beA-Za'6^^oUka:'fW9,eX5VL38n.@^Al'1(IX#Ta4MD_cPD?M>AK2$\=i_5D#rLIc)a-q:@72#Q$XMQGiN$s--%%/9
%U@R+EYPk<l3746Z"adHFfMZT#$J5HOr;EIXi=-&g[_BHma54f>pcNmp^R`H)*[&3]F^mb.mS*7ImY0W,M:lk5B;MXH8J^QlDDe^#
%S4%,\h#5<BUY]#("h;P)X#qS%;%/-^QfAMr)T#FC,_+-HomKK,1;Z1\P[[6H[$<5S(EiqJN8M9I`EqfqF[fn-gL)!'U]+a;[:r;Z
%g5EA1W^CHsA*EPKX`:-X&GV4=]Sr`?!no)>Fq?IfC*!W'Z*'Q1\^`iN7mlf*V:l<C6=V&4V^(e%+"PR1,"#.ccnK-H/<Lc&YgR%0
%'[stq]:lEJco_e\d-Lo=Y#ZID0-8UmF\)6dNOLV474c"4@4U?=2;PYhcF-h+6ciBj`^k?SA$]oBWel$Cml5qa;(0Hm^#A.7]qel6
%0o#)=^%M/9$oh3>i#k)`[Wreti);LMU;f!?>\sJ]-6SP'<!1^_E?V`1d5929FVfb21FN]Zm0!(An2RGiS@u<IL9K$o!o6_K+hh31
%$KHR-eP-LoiE!iC>S1RI$Rje3,-`Op#NjcZ!/rP;HQ3ueoSa:R0TUEGkQ)Wd9eD<JA6okc&Faq(260u[s.?uKmBQ#fc@b$##4ruI
%n0.mEKJU5Tn%*<Cq&m-*5]KF@7!WUb0oV\[9sW$X%!m4jO+2TCH.Jg,T6%Sj`(S;WJOG@$VG?NiY$0Fi!DY`;T%p3:fjK%^3^BuQ
%'W4q<==M\<Cm&#L9IW!q5shflMc%^`>N9@2C7R3:<I0Jt>1-^9rD"kS+$@&:_BR6jeUscFBW>2*fY!f*,s746-.3XE[@9)e<JB0l
%-O]W/=G^rljZKo9EPWdJNYXZFEC<W;eb\pE]&XfMSLea#2CW5KrlB+cj@hs$$)5!j%88U)GV<RDK]bcW:;B[,2a]NMOsL2uM-aam
%:R=[8*,p"/nXQKep-2=c!^jQL=ohJ)Q5$Q/M5!\Z;Aq^p@qL=W>!Ui4Jpsl(L(:K<aeks3!FA"B"CeWLbLA\d0o_P6F#Ka=)onX9
%DB'7/QqepF8I?dWFJ0?oL5Q$nQHU"V(Gl+9oj;+aV3WC;FL(j.3"18F:fsGc3Xm!JoPOhRo#!n-M[;'>G825j<,m4rdo&K`FD=k;
%Wt#QNR%/f=9L2c-3t:>4=3is+qBit5Lm"*>!W[Ana(c[=:bZb"2jWeW'Zn^bRD?r=AYp&<)]/5Q78EtH?4@^E68=C;d23B1TphpQ
%7fd5,m`^Ai&Lg&?!iLbSL"2tCg2Eu_7BphYeI'RV'IO!p+XGiXPopW)]gghI=b/oDa4W.89tu_1$9j*PGibMK*AW6lZ'AG@.-L#X
%-4.tlo-UHj+p%s6X!GG9kFT7%Xe'!&'OGX8diMLZAg%p5[RJWP?u3k6gRCbY,p?`s=TIE_Ku+?NRqA_b1jaNXTM2^:F;qPU.D`oT
%6J/K#outhKS=7%uS5)d;P;jqt1$FR]"5Vr!@[*r$l!':W(^$CQ']_fj=2CSl!#_\3JiHD,[3LQTWK!+Xf[=^aMfa?X>_'[^Ah.f:
%5h$aN#E.!8Ga7KClmRaeV8XYMa;%.4`h0pR4%Sm3`5,H91BJcQ(ZjC>+IBVM&r(:k[<l,1er:K;UYaQum#WR5/68K#"@_Z?ZQ:s?
%1BjtZ`uZdG]1s!BZ=ul<O,kFlj<]q.`"N-uGqhPiWjT,Bp.T.2e@f4slF8R;!"bpI\Oh@'KkNo!U3Ki8[MO7d5hESK+A,X""3seR
%=fX-7l,_LNAW=MN3_54Pk*,cAi%R-S&&Al1i8M^=eRZ!i3XUJ?<?)I+o7/)1k-qdd,+pY<4g2;</F,r`6$OSl4AYB_;,;7(?J<-9
%A,iYOHcr[K-nLg*==j+H`og`[Bu,_@dAnPEC%`/B0Z4bpKF=^mPr.&H7.E\eYJmaP2?(5'+b+fOmFkaN[aqU`-#@Aaq@S^2-Ru.o
%`Q6;+>HOF2YW\I]lBLm8WL3p"cOYL$#eC!7[N"rZn&P3bNqnYPSZU+2&V9T:JDMHD@5/E8f41!BqYZI^cP<2,7kiZt@/ld_)-7?=
%B5,Ri)7lN+_\HK*I@/LpS\<OVdQHaL8g&@W_=1JC,#$\4s/'6O!ir4^+-FlD/$poEO3[%JJdlBFlZQN&looltPV=r6Cunruoj,tg
%%Thf:DTWJM[crS#SGCUW6^YKU9K`rHIgVB&8^cLe+8'`7+1j6p6WBBni,D![_T`*%@5u4PKJ7b"opI4<#Y'SZ$9IBZHapO.#Fut/
%D`FSKoW5#1Sh$qnVHB#.qZi4RKP9L!Th":d96Xj2G%ZD3fi'?-pg'NZZrrqpYFF)4<PU3UeL<0Ql`?Dsl?N2*2QPm:VeNIuSR+7U
%'7=qgEHSK%&k%QHB$^YjgXkPcCRaVbPGRSpfN%`52l/nlCWilundd"3AmO$Y*1S/I(#&;&!c4:O8q<_Q0e&,\<fj=*G*E?K_P.)]
%l%88&ebuN*BhV=lXD/=I)u6ukqhkpQ>8rgCFD%Xt$DOCg!ONt'9GBn>*NhtMfk8`#2/KKd=&cs:*H8F+WDL5l0p+6q(g%Q*914A)
%/E=t)7LI1KS;3NY*gmcadgf_bCG]=X<Q8;R[BR0[P*8`SHcTVrf:C)>c0D6eU"[^"1jToRJ?6&.=Wt#l'4_K130SZhM)96n,(DL)
%M+,4Y13$.53;%nQhE5fqI-S`[IWB3Fh8a?AQ^,PokolJ/6P3^PHLXb4oZ96VT&&(6fF`eI95,K@D9T^Vd,emj$G^m@=WT!CX3n7T
%as]*Fd>hQJ,K]2MRW-?n7cD3\07F\%7-OlS4c?D^"ILO6CJjL$3$r68'a1$4S-OjPr`@rY@]0<^0DSHfC'lGJ:Q$If`&,dEE6Tl2
%CfOlpI;OidL*3KQgW;a[THq\0fkLbY-<?C#nC2*mUAD2QT$/^;cr9$L1`6FU5H^0j$DNf*R&%U9hKi#)7%Gm(@G?%n<lU%iekip'
%C`Zb,\A3"-nU`+?=eJ?V+GcIh=OnYU^(_U&`XNqAbdVm)B>P3KEZnP#I3l-*Mi*2[CYTai8MW9hJHeRTePM16?*?hY-.]:B$oo1<
%%Q7Si+Dee0nC`X]p\#sEaN:3!FRE[&?pN2\foU&*]NQ)9A;c,GSXB3Br<1a3!@1_$Ph5(Ok@6;sA;-%FeEL^Vk/"!o&()on>=8$[
%=[IWu\3T\aJ62q[*2?QI0Z<-)9U3t_*b.ns,Y:h6/(%@@gL`TS8>rS\=&!r&Q_GL0H7PSslDTPpa,sg3Y*$I1`UX=m7V1ckYo9E+
%al6cJ6psaa8caOhCOTm8RYJi%FR#%\8SU\jZc7g?R>5?VnYFa]<+7OnRq8iRCXCY^RIb5ef&Cq::GH^5HBTHIj5odb9t\N7:Maf0
%hX1KkjgY+4Rlb5<a5#,[5YYk!0`;?F)@tEG:BOX%?g^Fnk2aWIFiGNbWfOCBB:-)Hp(NLo8CNP;FO<Ns@j"-5B#u^I10c/+kQnJ5
%r^co6k[4#o[O]dE_Y+SVH2@Fao4"HR:@R;P(dKD4l-*19]'3H(C0)0"2ZM"2+.MG(=DNj4bT[?fL/6j'KqOj#7+I.#a+]du6)#q:
%id>9I.t(\^G5q2#X]aX:HsiBKlFI<g!<k$t/ad;MR$5T(!T/6HqK'[oEX"oonZ<',oS3r+>RH?i,:l=(b-XC618VP\"lM2R5Y<a>
%W%r]S?hBF3O:u`<\BD21N%uYU;:r2i)NpC#(5bEs%m<meX!l<?#tG4UH<Q:Vg6E8XLKU@j79l't;)1#8*P'%?oF$"cA#VYMeU[OS
%_Jh"[)2jh(4jrsFAQdI<6+.7[0O$TB+c,mg`(oY@fqE1=M&5<*auC<cSQn`P.]>hq->,lj(R//GR)B+U#"6(E&jkgJVQi2d8_:Ds
%+j[/E."i+1&Z[.JKEL[;R5'1lZC7[:8l.@#qD+3NF9G8Qm6*El8Igc&CO(&;l^'?e4:noU^2P!aLKVF#2d'%DjAcn=jht/36+=E6
%L^f`ZB<A.lj'rhEP<T)S]75\Ba7"F(oG(1:*8@nN*tshO4l2ZM$,J3mT6E+uF`DYM:7d4=,H%=ZT\47/OlNJI-s2dXnJEj\k7j3+
%8?pa_r*3CM<K_CsAcnHA;3aE*gIPR[+:c%WU'`!C\3#$JJpIg98ce:PWoU$'3_>Q8!/RCchgIqF!E1i;&Nl/f8f4*OK"SFOiB9#_
%FR`LbT&abHMC!&>1-C@*;$c/BFC5:%MS'bZ<g'4D'V"rUIFpci5CMk]IF=j6bfP"IX`qN03$3s7"ua<[0[34K?t`.X=4WF%"'5J.
%i`Sk&DNfW_*tZ8%HOga3"1k)mBWj28*g61K6\qcTX'_@8,/d;DY\F\OC0&O%<-#i2KW#FC3cM=gG0a<AGEeJQ.\I\@:L^T,Q>h#\
%LQZJ)6h8Q[BE7$i]SGlTllXoTEVC0jVeUm+Is.0SoaTI1N7H;1T'@a636J9e.G.o!G'0jYRTIgl-;ebSB*ji"@e,gmBtX`XQ`LfM
%AA-8LhC;M98<flc7,L.B/OHooc`rJ7)!bq[W@n=YH;gG([@.TUCH@P*D[hNU2akJ,5TF<iOm[f*HAF'NcY;qk[Tg"dA;eHO=&\"W
%VD%Z!P8#Lt34-.`Mk&_T8oeko7Ua].&Z7p"dAYW9NBFTdD.>Juq(6#&h<b,U,NJU1m\dq.OX2uI`,*?APW%4nfigH3#O-<UB9(i$
%in?HgLNK$G0FR%N)P2KNL=hK$Vi-bokXq'n..INg,>,8-&\ViG[SM17GVYh1=EHKfj<[;B@1V+i`EG!($tXA3WQ*OrCpXJbVY6Z"
%IO$CQ=bbkb"8][A!7;$`;KOfoK?N,46ulAEdcD3#$$oA#hqF3keS9Y1Bdps*Y>/Ful$sljD*KBj>b'P4Y7`;*6W$aZ/*9a[@MmtJ
%P3:AmSsR0lSb\\aX?VqL,A$O'W337bX?LbY15]4HIfs@Ji&N+t^@Xc$2=%!g@W+fCbCmqU40[BJXG>hdR-&\XU!rCX'K;a;;I\W2
%6eFW?.)m&g?/p0m;$Q(#B!#59E"iV]&/S95IHlmi,k3#JGZN"[LZDAZ9:52BWd(hFlZA;@:QW(G;'edFUV54=[(U+i5$jQ3e:/S$
%8S+gI7PI8<%Sm5GS0;;:=]#<d[S4nkP_IJ;gZg)?k[m]HOB)s:B!&?fkpd6G9CIWM+i3>.N-_LKmWoD[:15a%HAE2i$DJ!2>)brq
%p8]\=KIFiU/8M\1gZi@NYR[*[NcjOoLS;>c%V]kpP:kLaF;_W#"=IS3E-(TEIeQ8"KTf$.V=@s(#?"tO9*]^WR.7caC(N[<kd`XT
%[S7ud2/^0hbF&N%'gi?YEGUGFnd`)E@K4CPl$"LX\gu.Q=#W)^!*<at-@/82AM/^.!g*3]>6EYS1S`@81;7eODFkAh)GB30LoQ>o
%=LEqJ,tCL-:K4`,(_YBYjcrM)1galA;Rc75Xes4Gb:^T";7XE>+k_kcT,M74A>+DkRU1_Z7OC$ZgHRdV*G.4AnkFG;j[mU,P9I2^
%W9W.-<pUp]U:u!-<,`a;h)mSK#2WN2q6@#UU;58$O+WsL24pPqDX7o-A-"rgqcu#'&.D<rQ6l'/!)I6(q:n@D\uC'pi$.qkoc^7n
%X2M1;XO_V/fPf&/TXh(68TGOKA-+X56[s3`\X>uahH3ngR(eChh%\,PQek$+X6r/5HkP!mpfi'K&c5'VB\YZ_;kh'Nqq`p*$-UMb
%FlZ!9n<?IsQ^NRa$ar[:ecaGU-F<G+]Ogc[nH7c5&)>Vl:NOsdgSA0KFcFeh:r>O<1`tE#W6(?qR2CA<geW?AbpQ*uO?m?WdHIUE
%AZqLBj[h8MYc?:u%:"r,UX@[i]n`]Lc-"=mG%1Km%e\))?FjD-<8?-*ccJR=:$KJ4.5D>R/jZOGBZk5Oe)E5H8Y;^`UtI=]MXEAb
%I9WF93=C7Y&R_m]%kZ[<(JA\.0j#G&&q0Wl>(M!_$;Q+>W@FGgkW@B^b^K!!H_MAAZWR?%MIs=o9,8JYiPVBT?n'?/kb22?3gK&k
%Z^uD6*%1Jis2Z8Sm0dOeL-I*[]/M_ieR[$X=:I^lU/,M:@?!maGtF@dgK2X'>J7$IM6l0;frGqTcn17K]n]?a.qPeoXfWMcD.>!E
%Lk^g6""q_@h7tkXZp2*p4ZEP37'lX2X&#P=Q094sn+f4"o?`&P=iA^6?&TVaGHfn[r?FDbRtnQ^C"4$-SMDu=`&bPpVIRV\mfe=R
%UYS)aG8$^gkE6<fQI=S9C3X@S[Ot>!7\%Y@pCu3hF?tA<DKdp"Y'%#,X0,huhgEC*-GA&';)hknB0VY)H-:J-IIm-V.`EuEi9-:;
%eV"0:R$ZhfXJ1-a*7S/IDHE$(38p&_Z%$;>2Qr\dXlGgT#&Bbral-M9P<ZI,@087(hI"U.KASWtEgGiSK:F<)X7b^BP`gJ@<YH:,
%="5P&N8G><;Xtm'p5h-sK&91?+Sp_!QBoXc_`0Ho:#oT!ii:Qj-lurIZd`C8k]="?:e2uIWtPZ]J?hbUEd4`$kj.RgS7IEb:@[AH
%fKZZ1USb07q).p=!/e+7dpI0GX(PN/MO(OQ'=+j=/7)Hq(=hSXF=!f#`+e`_P-q+9WV=d(Ag<]pK*K8u=q=W0==&+qkNX\]@N4,N
%[clP<]j)nA99h8G=W4>/H8Ri;`oL^4-4_QuDHWd]HPkt)X6J#d4..DeE$+eO\*)I31Smhp9:eG<F-ec5XYp$==\sN6,t/R=!4eK9
%aa>e`c7EQhf4$U.'W>;OSQthkgulaN)<.;U<^C&PM1`ifZB>:.Obeq7ZVp:tc\F=g#CfUYJ-J;"P?D$u[h`EZf#9hf%R,e1`B;L+
%S&#D)I>]\g^E[h.h1@#u^/b]mS-tpZ\D;l;,J.I_3O9KHA@s0Q`I0t/K;C1%Z/I`t$Ibf_+%g;K@uZA[2%J[O^`j$)!F7ENbA9U.
%8JJ907.3B8ejYM&oaX)F`%4IGFZ&5/!V>Fbe@.RO'hDoKe[J?7-l.Ht@lUau'bh=35b-9<)f<<b.`hci-=^<kD['ZS#<V-72iXQ!
%*LpmaqZo)!Z%$;:CeLUR,U/3q<[JokBYPUITCBW!XWE)3O\NB[Sh.@eSsmVaI$]h-\gVBIdm$hIX_;hNi&"AlPRF+=%[:QP0IR-S
%_5-iLM.6Jd0b,k-QE%sflXISXKdnJ%0F"JCFV`"]3#-9dI/N<_l`<ch'aq!]Ze8Df[8P!aK!X%R\;&)nK2'u_Z8n\7W6(#Y`MhJT
%nGlbNLS/Cu(o)B?B<1LEnGCaDf`p"7\ji1lTX:.O@PJD"@G-dA!=uLZ+S6]Xcb7O,/1[>s/Fu7)CP5JC)fbB2:8ZHKFr%V#>XlYr
%B2eZh`V;a&T1""1glp,R-(Y^gQ+=M2Tc$+cj5=0$*oD#Vd"CqhdQR"'Ha/'2O.KpeWu7uNhhbk-[o'CH&C+:V7n68h%&sS.\.7'L
%Q!!guDc?>],Ssi(P?#aJ^l6324*OmkFq)<q)E&T_*CMbUE"!M(7AA\]W3Jrt8o_r%C5j.D6(`e4K5+"]gqS<7U2!_J;Qgk1AI+(E
%MNj:&O)\b;9FoM`N(]8aAFWpB\7-o!P?Y;AA;`?3?>e8)FM3So=X6$n<neh77^]6^2i$`ih!N$/GA[UqVc&HpbVDAa:7PVQ*f*`4
%'OD1IWIcV'7&^Aj*2$NU&CuEb?/FQr#JCi#?a;UslXZ#79DPYP79,YO$tMHP[FiO"4a@h$?,odN%6;!idF)pj#[+7\K8nMJZ9]Ff
%S$GRRZgT4[M8oUbA+i;>Ha0lnq(WP!Z7sKG\.U5U`<%*gcl%Zhpc5LX'.m9pG3lsq?/\PS>E=Bc\-n>5UE+]#,qV,Ckt=!pc3+d1
%AFcliQ6HKHl^==qB[0CmoW46.;)pQTAp(JiAT-?+-9>!SV4H7qr?FCGh(sGo:9,XD[p@Oq]BV7]^l0T.$?@:aY)?a\<E0fJa9rVM
%KA>%>/Rk?0eX?%@4lf'?&khMeHF)nbTcB2UD?`hT_FY7?4U=jWr(ems$+d!Q@i07VC[b4?Ru*[Rl2mh;R>HPDp#baj'4O3hQegm7
%HhXUM(o%lt9=uUtcrA+Q9Q=7lkP1OMoS"5BAG4gUbt+QF_I[D6fc#1F$g7r1"4)rP=+Y,:MVtGE^*6tAB/\V\EpFtn;qj/F(W!qB
%i.`:iPRdHcG]Iu]$;4o)C7H0'N<o8Webu;?8.ZJ!(&R"ME%qH#O,TqE7pgTZ46n_-8KgPS$qXD'R2.qS.%/>EZ+&nWN;LOE_m"hU
%69@"_LEdlO)8E3<H0ll(7hc'F?nC#1Ot;_,(;fZ55']>&p1;7d1ERCtb)l18OO2>f*?IeFZ&AbbFV]n?Gq;VZdF>L=f^ic072L^n
%(#C@bCmrU@3!>r<Cd;+TVH?"%-!&3#;8;7'M(^4iQkh@@K$l%c9m+)cd_hj57uq4MSB,I?oMcHVe#-qg)3\615V*[59q0>(Vt*4#
%*nag\ZVYS`/rZ2k_l8E^kiVA>Wn_W>fS2J;FCT[gs7UX!T&7'Vkb"KcI!Ij9@r_D(/CoTG'6LSZ/-aZq\#b:UC%-f(HK7FJ:T5ek
%E9i=?!LKejpE=!Q$>Atg>DEo+<LTrMDL;;>-=NR\3jTA]OY+[jn?b,$A=d)2s"g::M#O2_;cFH.Nc*dd41R=`m_\5`!BRf]@FR>!
%-M*io4e$90kd>'%P;jWt&&.7[5mWV&U8hCTg,4#T+,AHbF\Pc<C2<=Q@6"h+0f5>h\OCeK'o\=[]kd#rWg*ml@FT!I.'%Qb@G:7*
%fsZFFCJ-KWfcUn2\;:Y"REd]P=M[3s9:_2K_arBEIH=u7(4($!=t-[6S6%kQdbI^Ql6JZ79:eD*buee;3g^*shT8g7[]"M26dXhS
%-h_/%lDFOl:lX_[_`TS#6)'B<4//8k[I-KuW+3u+K)X@B:Lf(`SMajGf#'fYDX;s3C/M0hD?mYF=)"TGZra+*>6=T(.\Qn$,VObc
%3a#lkeDF*L/YN(l'Zr7#Aq@+=F1)'+q!"6S-42UN&WTK(;\=+<+>ZYIY742f7c9cKGVYKSdh<G?,4'b'^I#n($Qrs'LB7^a#+s1[
%O^e+O`X*cR#r[rj!9po/h0*h%IN:Yn$;Yfc;]=mOJoDH02s.)Bi*Gdfl)IYHW&M+4QVF)p)8<d+Ner_Co`57)NtXjuPf>m0-:SA-
%c)0!rLA$F`XLko$OFRqg;SmK#"7%UCI0B8<oZ9],ifiqh<$ks)Gr%>sP\N3`m")fPm!1HjqdEo8hDV:V$DPDH#)A.qNS7NukgZ('
%=AYMO6_CHP'_B_0&+jkp!Rt>kG1co>j9a2A#5EU)g`uN>p;j4u;uP<tDg,P`2rO&0g*jhWK@O!@kQld*R<;3:"X+9U57I0RJW_sd
%bR>>`Zdj-*`\CSS%Edo>L1u1:V\@"fCN+AV$M5mH6_J)bp7RSs,Y3O^ga#m03\d^B,Y3d?F/T05]ks9V/+R6$@tEVlEXHR_-&8So
%#ZcIdCYd*@blE,6"`Q@-9XN6S7i$QsFr6ra`N9t9FE9]S<)qfg+kg[.;ZqqK*U%3.Po](mLBbegR_=#/XIL;lFUmuZXQ!O`<)B"%
%AccH83nZbD:0*]?fZ$=_1:he>K/d"Rf=;B/DX;r*Y+@^YF-nPNH!W)2LX:q-U.*@;p+d4Yp+m'C>+V03=O[@%8djKs-N[F,HgRGV
%?3N"t`'qK)"U6nV$'#>c5=;F:+jkE6XM(:*\iNcfC,i3GEclqiM1#.?Z-m7Y?Z#%#FuD=*)DJB\<l%t1:hbGq<hem^lY:RaT\(n=
%r!k-"'q."9Bh_nsEUb`KFW%J4L+n:3DDDKUU)8_o(+*Yu(;RjY@u&V+V4mG*af7(Aj2DID=]^u1nbf^HDUr(2XQum_Ohk08hR"l-
%3\[UD!Up!<Kk,J5H9+C$8j2[nBINtP:gp"7"Yf,IZShDl)I8/fCbubdqqCc%FAunQY%;df"fi!X_X5/'A]eDkeT+1#gXGCYWi%kp
%basAp9,)qHkg,K`;4*HWlk(4#Ho4!6Di-BK2'+=GO:S>nkUadG6oj1HB4f8+SnrS@R18K/M-7a!c5pDX-f;H9$"$#?ZNa^k*71B_
%BX[k)6u7NEjh^^mkA_!+KFDsnZQs`[-0ZV//5Umt0eIBMahfn5GdutQTuqAe5=@3I/oG?p5b&G]"WMt#CnU*EYKcnU24A56*_TtM
%:i"%V+,I@=BAS9f.Be#g$S@Y04OE2JXS]K(JM*6<c#on/MBmF[Uip5ZSpk9d%Un'QrVD&)b2Q;NE6sH-8BGnQ-`pl@)cVecWna`Y
%9d6Gl/WMr?Q*3O*8e7@&FX^^;?1L7q[SrlN#t$(_2$IOcg^7mE*075N;<(g^g-Lt?"iH9\EP$&QI!XIJVBfl@=&t4_0c6A*YXc*i
%hIa^4K3P\<ki5ljm^M`,e#N#5;B>aW/7Kt*@[qL`6O90(&'8;aY5hN\K\MNDr!*YpX6ku'<h9^'+WKk:>a*$6Rs7?F$WD\F^+OdI
%<LKmfMMkZ?$7HGEb@C?-6%*D@C/VEc_ADT6T4@l/P^1ac`c\_9dnjc_JYOtL=R<Ub;FaGO1gVe'F]FcmBbh6#n"eH_=O]]A[2'#g
%)Wj<9geWm+#EJNYC8d[QkKr9kXS27[dYfZSm@%*?lPj4[5QmANn(=E8d>l8^!i:2:h(Qbi0<tpD[cgoEJUi9melSEE2+m\aP9Y!U
%pgQ#f`W1,L>d<QgN6@TjCDA0-`"V9PH8iM&j/pnX;$2Ss0Pn-hj7'3BKkEr<MO!U^j-PNe+!!^5_m:Oc]B>Ib4.CV5rjoi?Orj>p
%TN@8Yoe:1Wes"/RBQ1ZVUW'h?M2q#pgsJ8G!'c\[4M-20jG*ESO!\o=IIH)15FC9!^n1R!6+dYl\6?jm,*]$CamhtEUXp.rf!irg
%Tun#*d6'A*02Y.?Z.:jhoH<8;L2KeLo[elY)<bEKr"Vi"U&t,K#MXf:@bbEHT-3C%%mN&#IkW3rT)T>Xc6NF/8#s6m31&AX\W`*'
%I0@*-4#Wls%pqD7qBXnIal?6j3%h-W5BZ*M)$[k'cO]5F(^b:-%S9RV6]5Lt%HK6is4RuJ?H\CK]TCOH*ZhRg:EQi?FRA&bW6^Mh
%C-b2(]\p-9$QB!AJA1hgp0-)H=S;7:i#_J7>ic[5J+8?LJ;"+ZV:Z\]&fdnCo)j:\%8(=SS9lWGgS@?Lcma;@g(-D37l^;$6b-Sn
%D^k1^8sZm.+8U:%rVV1P#H*f;n/RXH?U%QX,WV/R+P'ui*_s))[bQAj+2b9(U\?CT1l0VuJg\Kt$0pS]r-j_'&t'n5EUHHZ+Gl.>
%Rgr&?<\8(XN4hK#[PAN+",dr8G-RmB8QY\MU,AY0/[G9!N*dUPS_I9ICCki]>VqFu761+8*]P;@m:cH(_Vuf@2@(:M8T9A_2MpW(
%kCQ`E3F8430-#U`VAEh!cJG#C?6L@A-!P%bUG$2L/F[a`9&SV"b+$:P+pVTa#AY1\C?fc_Ad,h28O$D%,a]+3[=gF`Z%TQMN*9EV
%d8CTR7I&n)V5tT/EH6'E*Wb4_.`jJ,f^NKU9@r\0ZEclg!Bf#?jt&M>LWdhlVC?AK'pWgI-pV-?eDEhD+"]#-3?Kh'=FnLcfs8Hp
%WklilX=2c-Qq_j.=B)uaRM^H]Z_oSi$[]NK:S#niH@+KF@Lh#'0BR60qdOHGqllCb\drT0YPVo`L[2ZWbMg#CCY>n<?d%E>pVkoo
%pqE-5L$sp[>km@@3Bj9(nGOj:Y>EjN/(F6A>bS=5rZJ1gF1atnl\)?^-r\f=4XN<DAt:n1`5Xo^;Ma.OGZ*fh+.\Y]756_K7@S0i
%MIt7q7fqR44t*4u3%#VN\NM<.7QW^[g#46dkJS9WcA@<-*NmSHEDGd0;sn6&5Zkt\Y49<\n_B@XIR".uY5Vu(ING6prS0S;kRE8-
%FWA[[3fC&dJN^>s4#L!D1rH<kb!%^T#R-m@L,s)ujH;B/Lq#'4?d`J!g10-aWoR<OA+u/r%C00E)RV[k=Y#YL7Q&>A*tSVCT(kRW
%'rf_[hQhHmUF8leWLaui(/QlW:m5j-2!?7@+M>NgMMiUc=];g^diJPE;?<*&#C:76.cj--n.ec$oW-(s=GTkf?W?GI1j4UAaN"\k
%TZB"A`f?r&RrFYH+"P>K'mO;qlK[l5=gDBH'G1#V/]!=m?k8Kl/^=agSg`64D;?ahlDh`3e07MsSq<EuRu>fh726e:Y$,T[?Sr\2
%^A>V^eHEe/cbRruPiSG9oIhkIIK/f+X8Trdh<i2[LY^j<p'Hl^dTXL@G;$^U\A,WRCA5h_TDa)NIt.(1]8$d$rT3I^T]NBH5F^)M
%E52=A`PL"6@h@%n_gXBsKY4%:=^7f!4c1]r7Uo:,1muf,*5Z<n/A2d4F0i;$m[u5!60<q=e#ZQ2Gkq%!d+&"GNS-PM!c6!t,(s.F
%oH[<!^$)4$@WHfW]t'>$)6Tr'S"1kG@dH_+iM3gYo8bm>\[n(aW$t6R<*(J=Ad)0g4XMItnGKfo'Pj`3ku5U(jCi82Z/\'P5\Z`f
%;e"=A>[BiAW=%8QUQ4`^'CkB!1n]2+C=;i0o?9qp5X.K+PDLjYS6/OML0ri0Ie)hCS%G0njk@M>(#Gjo16NAQeE7qTU=R+t4/d8M
%'ck5!SsWulS_!322a'Q%87K2i$D?-sA-Npt5VT9dq/utPOs\'@+NIK?6[mJ1\?&m,C?QAT-MmEi!aEkH_+4k>-E.l2>1WJd_=W*7
%@BHW90ZCc/I2Kj3pis7eot94K5lI&,hq`b<DSecQ%%i!KF<9T7Dgq4X^OJ<doZs_u\,ZEEl[QV'5I?(BlSj$k06d?0mWTJV(LLJ)
%n,@;+k48M<ci)s#rq>^<qYKKXqhqpj?gY8cTC2-M?gdLQmDJ@1Y:gr?02FG'jmH(>1&`:hpr+>h]sp9!K5K(nVU>]uE:O[3?c5Gq
%QTe1C+Q3QT]R,/*k.0?FO-dI8fp(k/?gP=;RuVu>pXS\-pD<^FhMnY5O2JDUgHN,/^V'@4W=I6-hL'SHri;Bs*fi8X*<5m2ea6;+
%8KWr0?@;MDo)AX+;f2R,h::mOfBr#J0(+.I)Xl7*\SW_flcfrhGB*Z-jo*Qs7%6DH]Y1tmI&#l"%HQrHbGTj[lhgRkmnPa&5)/l?
%Zn(Yb^O0W!+5ZiAV%:7d-eeR^meuI["QrjqQbK)IXUiHlIe!F:o(oWB^"je!hHoVVrc7b-F+WfHr<YI"nNQ!9pG7^lL#'pHdI6SQ
%ho#.h4"Vn`s""-FFHq=o<HiV4H<u*s)#^V-(ui2ILluB#j<sj]"m0/lNYpnV8p22]%.QdET0B[_X)7?+TDfpZn9Tjc$p@:DYokuQ
%Xcd]f%82X2STt\3%kf-Ipd0]FPDRpdIbJ3L7le!<=dPZ#[S5O2l!X#('Tao$5K^Lj"K%-f-2dd=55NRd:6!".T'F&BSCm=d:FB@j
%$H#^'dLPu<G/SimO`*5JM8@6!3pN@?_Z.YeK=,.Am?GFO1Wgf/dld>k@Q+3fbM:g$g-R.cGFnS*PbEU,Kmi7Xd6=aL>BZ_,g8P5H
%f_r27NX&L$J!U+hC"b/fY0$a]:\FNLlI!$&BCU-Bo2AH"Mbs!;p?=,8>o*?^q?apm"]kTqY%%+l^FT?];=jdlDojF7Kq^S\*khB]
%c"ihUmd*/.mfqqdG-8T/s)i^*>U&0u)HcCed_Q&&'RldmFFio1J;/aj2EAXu[,F`K[JD9mq0`IH!j@Km-Wb3BN7=JqT7-ea$(kJ6
%BtJOZBkKHiPsBCaCIcg=86i`JCR$XS"Xif[^.j[1g*5R#8cI50F$06hI.6=<ecQ:'F7/"!J*G1lmjpl93'$t[^aK]U;dKsKOR\70
%:etA@`;T.n$l,F6Es]/%)gUgY2WT>(BiO-fl&X[NJ(JSe(CqUj0Al`fY?q4amG2uqr"JFaTD[/V0#,&DJ,Sl_^MEu+`Q]]&Q7p"_
%\p8XNl&>m/*lAZsdlkt-+)cSG;>eHnm0dHX]3kNrYBDSR!:VW]D4BK<f&nFZq8N#<>@&2lkHEtLps1>foZ-\"n!Z?J6Yr5squ/ZN
%G>%qS?[]ZG9^S%Ms#TOrfDbSeqrdGIla1@<::+[i88n)D)"s'"$>9VuA^f1fFRZh_id3-c+#M^F(&SPT48a5:R811q7IAbb?)?$?
%dk?<qkLM>,+t%!n_K8jt]-Q]`gCW`fhGe9YnFZr:kMrF^S.f,Xj!c/KJ`'m&gOelYg2n<KH"<^N]'KmlUg9#J5&3Y?mQUI5qI9KL
%J(ae<f2iKL^[u_(pd74355P\Vq:TD_X%hVK2eQLThq^EPJMu9\oT/A\]l%lBF2,,+rPs*F5PplirV?$\qX1uOJ):._ro3XPbM=6n
%hHVq#s1*S#q3cWmPL&[#p>>dgdt@S]T8)e5H2#mZlL3$dDSL#^qWd*ilE0a2kEd"B?G>0B.`TVllf6n^g(XBFDqj=L;-d;a/]Wri
%QQH.r)`n6/N9?D`"L6@!8G"\kK_s\!3P2o;]AJ&,h8R;2CMi_>B:W<h;uFf[L\&M%2\3b[:R3?bo.:<5r8e_:DI24+UT=F@kcM0Y
%l=42J63$(bs8M0Op>IqH%i=lb)*sd60+Ya=0E:QdkJ+cYF/cmcs8S':+.RQTG&r)d>'u5-\\5e,V"a;!K;K-n[he;tj_rn/2h1i-
%3E?(TA^cSj:(QCIo&8S&S&(.?MX\;Lna4<oeO>ZY^USZ9pTkaZcXS*t]@Z(E^"*,JX6V_=Qf^\"3mg=D-=Pb<]mg!3iJPZYIrd<C
%^Nk#(\INiG5@C\pK"2m1*'\fE2r?e`hG=.BmCRj^HhZr0O0fp_*rc>NV,-4&#4X?2EgHUsmiLn7Ibs\OrpctOqYe`0g[00MJ'ZYj
%G2Zb7h7dS4_U!AT`lX`3+P1i7Dr?J"G+uHi[u[Z3J+t:+&jQ?Jpe1&(c_#!#r/)LG_n.S:qi?/"hd'UVs6k8+3MS7qhV[cT5D*b2
%B0<_WOahTJk2GXh8%YEp%aaWMrpfR=qIaslF:P3,k/6dh6fnUt/Urd:qs]DLnGKA&O\!Nbj/i7IoW5d@]_^pZNtCr)CcbZar`ROk
%-?3dPYO<O$N-9[Gjhi2.YF<o9r)DGMI<Ki/F.;4[4FUUTGC/9IDgApDgfNg^S&ShifcJXMs#,PdkP(>30(6Qgh#6L.h]?t@mEO2!
%`TsSjWs<-I..!%;omcqpFa%j*nG;S4rlo=V930^$]0Q.-e$&0mI249+2"IE$j3[8$9uh^T*Q78mWh/VQp$i>V]8-9AgNRQhg6V(i
%[#\S-ftG#oGAB0TQIj]:GP1ClqVpJ>Fa6PIk3:ISgbqb$meoN=rU0X='5aZ'Qe1_%h-St,>.a+$gWSD?gVFPMI&cEmqM3u$Ncf5V
%$uV&?lHK.7]CUs8YMNW6Fh.DIm]DO\SgNL]=H>\ZIsB_fqT"M<&"!#ls%WgDmZ3]O`p\[bqN*U"qVC8FYFkd8,Lb:P?bL<G"H1@9
%[=e$Mqh<:koZc:kjIT`To\7Rf6eg>H(Y9J4qa9W8p^A.Gr474_++)c4S+kNEWkd#i["5TEXIit"kfqk_(Pd'Zp\+%6n9Yu'=76W5
%2](qsZ$l+sp$K_f5qi-.Dg/sFs)@/ElR_e&IWtVMlM\u3df2FKhc'FP\%[IT'G%h5T6To:f(uN=Pe1ien)(tfgt>ODn,DbSc/kE.
%X1!BNqn%Wum-j?*^?hBYjo4CrNSs6`lc]04IT4epbm.J(^*7(Aq`"9<?AS!GcX0`QW0sd,]>H.Be?ZcDN?u4t3/M.OIs_'%Is9XJ
%nj.0\'0Z&d,;2TK1i7(#i4e_fT5&\%eF_hWhoa08R<NGs%amY\JYa?prVGNujo#dt3bWXV^^i%=So06?XfHYo*fi.j^&4m9mVe_$
%ln<9!?G*gtHiN255Mu:t*59#[k/GTarAX35^ARQ@_qj(.Dg^@D[m#I8>.=*Eq.ACS7l9(GICobt9HO!*ir7'-8&P5?2?-q9\*Z&`
%])D3Fg*)dSZ-g:rr"AJKW&:0\S8A/-GHW*k*j1RSp>_#")Lm$TrR;%Xjn=.p>hArQRht")f,&@4I/C/XD*$YJ\OY+mqhsc5n+#(c
%emgb[k?=pqGOM]+fcN%d$i]kc]DI)-VV0f(<I6!_g[P17r<n)X?Ago<ai;?bg0=@%TkcagJpgt<H[YR+F7Js6g>5!!hqmk1g4c,7
%q<%8(eQ93b$ZKR)hS-[QnTDH_mk16Fa_^_-8%./cY,.`(mB,3p9tP0o6jL*JZ*#b&C!Pa'\0$#--q<iNo?MMGI(JFTF&'DjB_Y&%
%fM>i4G7W;OKAXCklK(DqmB8Hr]Z\mgVC>Bo-S9g<NH%cIn$`LO-V#:DE(OjOhE(=h`d4gA.JaGSf13IjS'?tk732lub4WT3k]Aou
%TD\YG04+#EiUZ[0m&hcoDg)0PP:upo&"imJ?gbXfO3Ii+ep.'e/QHS>eULm.]=>PfHg9]*!UTdPro8[g"%d.XcpqW?]=2_85M+oN
%Z[M3/SlcBAEK(DLW\arT[S"c=&l3"b\'HmWI0BZKM*h@GlgifRlY"/0GOJnRHg63@a>@`)8'!-K"8ri!a0YWP?uphle<A:,I-)$&
%a6,uQI^IFF#fV)OAUV)"me23q2hb',rq>/He!*=?YP0-1=uprN^\S5@V)A,GWR%u]qq::n'mo(lnTgmXjnZsfH(hIM)SHCAUX.EO
%6-YHTA)fLDDK9O!;%\<>Ai9e:rn:QDT[o\i*.4Q>Mj;3gEUiOg5]bhcmJXZ?4(_Y\I\tKah)ADRRuDOfZl2Ue$/+&=)E^%'s)If0
%[nXRYk;ZXV_X>0ere6df?G7&!b\)_)R)(2*epgN.eJB1:eT&2W(l$>c0_EDF@H_3;+6_]5K?#s2\GPr;5C+)]r;7hmlj(dd4aa'M
%B&2;"FVE$flBWbSBF3O?1th-ir:g)H2\>q3(Un>4Lj.:+i'67`O9pK^&H7Qak%B,h+8^kdD9'_YIDc\p7uu;p2HJ>pU&Dm&4Y%MB
%LSG(&@u"IebcacHqB;m<+C=V'+lX-3\R,bBS*(S00(4,m]nNq]FVeNC`It2R"R>euk&n&^8=i#[,m-1/OTLlphuEC/N?LmZIqc%H
%Q;@P/R^^'.AKN>J>=M;M^E,\I491\X#@fUfU\P/<-N>2Bru_BT(._,E-5I*]:HC3T41NSJaN=f`A]^mg>"[VqW3I(9-_1.pYNAtr
%LO6)/&Eq>"Ee8]L5;V#XJI.chh@DoiEp-kO6Mm13abbH$f$j0]g(.O`op'B!s,ao+G2N7-R4"taeV<#oW68.r0^,mSY(@o6VZ<No
%:'a)u8VI>t3\dHI!JS+dUG1jI9:_E?J'KM1G72RO+Z$>]6Ns9rQD#\($m0Sc%Ej+hOWVnf0+7AXlg8Q7=C=.N"nck4&1:4T<N1KK
%@R5lrS:K_8Ph'u%OT?dI6P,Kc=(hfZc`&d;W\99&/?oP*kWm6fYW`8a:N;SbQsM<li"AD'!DrrP)'sK:.'g6&cmhS#9`/p";0cQ#
%iVRCc/1/+33c-IiekO'm`5`L`>X73KI#uHdB6_[$_64/4M8kGh4RF5]Wh@3[TtXW[<!CEJC>tR_924!8i(PaH8X0<QVKlod$$2Ts
%<(NuSTIgt]*oM-MQsQ#V[T3`sM?QAd/.B%:LcA]8,%8V0I&>^JRFc7b!,u0f[3"J=Fr4/B7_m0g<>P+DOuiESneo'DY(?\0\[Sin
%0I:lr!BpcZH:9hZS@NbTE3oe,S[&fBRa>j_N,jl2<D]#2$HfnX0_tG2XBFc*H*(pR;X%P)6O#9>:fpgm4+*#:j+fY(l`_]b5Am6`
%Ae9MB<cJ)mNhs0.!S.'tOS7YO4E^MffCP6S2@'t`!Fsm`(^9GQiMu%UmdW6>A7.gA&&A)mm@aW9`TI=Q87?r/[4s+<s+<'-bR_@*
%7:Gq6:.$UR_rp`aYcJ3]4C+I:8d-EfWM5\9=OE!XD:^5d[[nZ+qP.HjK\h:p5/HGc]/1(-I84g?L+1iX[AIH4W$49Dl8,MHm0o2G
%,A1!ZV%)dH2:=J[/F5Fuo+(i=Um/E<JDeWT5?t#.HiTBl^3q?7>0s3b"=fhKUY;k9]<"d'+=kD$L$dM"/fY(HEo/!=FT+mUWEmP&
%#%3-#R<Y)7q;APJ]fq4X[+RC82E-AK0%X7k*\G1R>JnlRN1D>,<6.XGYJ65h=u']Nq?!UnaC_A0)0239N+Ic&1[[\>4m+iJm&Q?m
%$E9T][ME,VPTnb.OfE4>jD(nM=\+I$E+?7+,o#'K7nhW<_AP+:Xo_5?"l)4*RP,&h`>\Im:/04R?kon6r48GtCsO22/MS0p-3k^J
%:eJsKks9.GC;_MH?SRcJ4r7$#GYVhC/F>NtO*N&s<aq1X6N098-uJF`gsWu9TqG+[GUM[5?_o'N_XEA4gL1L.:N*kEJlV'9p>OLP
%NT7DULaDTS&Noq[pc&6W)\M2-gDA7r<JL#-p=pGZ[(ZPX+9B1m+F+`jKs:IJE3L6[3tuN_=ZB^j>?fIU^!&"!0Rt)$<h`4Q,R:ck
%IOp2)<Y<-lI)f%i.P.MtTB4qMWiW&!DiF)C/Q'\L@e;4,qr-$emC?F%$FBAshajB-(C4S!VEtk=V[9KZmUJG.k5cm?b&H?t!Oap%
%@#,pZJ9%'A<9Xl@7gmC49Rk&4fk-5#bpWpWJBOqJXu:]Vj"OqA]a"*ZIN.cr:uVg*WK!XSPY)lC9t\]?D/B-8+2sn$o0/\5VG84=
%6@_>]<"kshq.7??#LmVq@d10H,Jj(L1!6n>S'1to<FYLCAV!f:fA:=0FiTTsKVo=ODkA65*_qQJ;(5&T>:a$b+erLe>324k@%Ia$
%3,UMVMjKrd=Aej!"AZh;@LrQ:QQaUOpA;b,H0Y=47LPNhnWWZ5&o89"8TP@-@9qUs`)nG'"V,8kpKQ?Ik"6s$Tftd96tp1<Z6\AU
%m?5V;E=*I(#Jmk9c13E>If50A1Wg'.P;(+AgS9cNZ;_*Sl%3M.N5R0Pp(<!j0j8iEJQ]/nLrV<Z(!%R#J?_o.^g)H1,k/$iJS*\N
%Hl?sVr(9CX8:2>*>KHj;;8APBKa3ha9b>?rkT;cF#R.QiJG/Ff6n2ig$SY4Nl3nC+b6M`.(BncoJC@h$((S3Y^ML)aY]B#Z5L"&D
%qJ6.YGgXfsk,Is-\d$OtmksCR@/;9M_#"DiUoO#Y!LF.$^!Q1,I?[dL.^?,uKIs*p5$M`*d"G'R!'o%>bA-XP@%n3H$M`HZkZRTi
%Ht*FZ3rc0E9P`W!lY3*nM&al1-I0B+Hr8X%UYn/A&&nQR5l,G/U:1)H4<Yft,,G]djFg8>EJ?-UiD8)6PO`&%3^LT4I)r%f6`\o&
%+%>:APhLdFh>^W3X!Z,rJ3>7!EeOPB,^T5.UI_>H%[!3\K8E=$[gp6>:stk`lOE?PJPp)LZc6*&GiB'tCmk:M4Dk)(JH"Q[.s)Mt
%s!67?(_028K/2+^@QWoHj`]Q_M"C!7#QZ;KpG8OQ3+%\@aV(CtVBZj#`&KGQI'>phC>&m<MdBP,"V=Ob&)8uDUXN3cA]%Hs;,Gq\
%S>n/3&65:ZmN53Kdp<%4JPUh]Y:.qM,CLmU+^AMFZPeW(5#%PSITgY5#.WRlCerRg;&&jTO"Mi.Sg0,2UMTjrEoWEGHBS"4PdR;\
%<B$;HhB#9YlaoJGUVqNq4hA'@-P'Tp3B>1gf*EO9efs(8VA,/hNi%*hee+tQoG_QFYt6t5.:`V-)^5)%o/DX^)fl];Yk':`o!qt)
%`WK_'@A&HM[8UJ6#g`i*crm\%P`(FY>rfm<\/3h(M![=V$ut(6_PA+U0)^]'_%1Bj]pTDf]/lBj2igN&&2B>a9LuB,M,b"tY6fC>
%].jXDG?Z7RCmhlG&Y#-i<NoB!9os+K5\j,);YY&UipEVKANb_b)d%:_4X7>+iO4RSTX<?>^hLo+n#'*=cT0AWjW4#6+&-[W772N6
%F"`ef.grb+mZ?h0JfBgRge8<^m/e,HV[TH(:2J-KR%\YV>9T_kIF0L6ILs_3-T3t]b&ho1SMGSt'5_.6<?M.d*;9[aedi4sK6]32
%QlOBDk53Hsm/,*$m/,*$m/-3`\%TA@nGn;t=3.9FgL&>!dmQG`3C[fNZ\`"!]inFS.@]AX`"Z3rZ^sMD%F^R-3'jD1pgd>_:S$,P
%V05@Ln&YmriDH&)b5:^[+3s<<l3u9hj;NL!O4h@5>f1j11&EtRNK8#T0gg2KD052daFI$*W@ne-"-lKmq%8\&4t`rbg+o0XUN?a5
%`qEJ4=[T)P(i=S#(!F3$;\4EG?%mP:EQc,\Pe@@BZq:"(-ql5YBO*W0pnAFM@,@.ZrcjI@);nj;)"aL\Y>Q;W[Mpsq)6rF.9a6<^
%TIkABe[AC1**AE8!(t2dd@fc1@=KX=I.f3SAM:olG^d:CC)G9E2Q\L)N*kp>)jkj2K0PsfM3Dno6Rd:[a?FIWS"qi+[(7,h9pENF
%4!/2(^b,&F^g7??0!l?hYSn5iO-K_B>F7h60O!dVL9Z_AA#G"uaS!m^7N0N+]j60%"VsuX_a)V3Jrb)L:'mJBM_F;T,SB`g0I0>6
%SZ1D8U^]OP>.F0Vou?:BMh(]B!l:ldYkU*_EJ6.X>=FE/AhZ$c["B((-(85ujA23iWYc\ZQHQ(AW@$0Cm!::54r3"*$;OHB7]"rf
%lNpa9]>dS.Ti2+e7R1Z;SDpCaV*I=k&JON$-IJr84R5&EB:,KDH&V+o>8).:)9"pm)=9g#,GGUm+ub#f,>b6MjKM!q)$k(6Z]lUM
%LeZVW:#Q5/V%7O-1\jpJ96uP"4:F7Xg-e22Zl6m<NrE;L+Yem@dY[R#`Te:Mqj40>%$^H@2%<XTGpg&d2dmlC/(i8'i-,'W7`!_(
%'Tu7_`^?pjdn#F7LR(!p8)b_Y&19qLl;7`+#;T-PGWX<Me[r,dpFdEg&kd)r]PJ@C,T'C+bt3TaD-d"hJ5YVk[-\e\I?t25S-9Ie
%]\n*@nA-k;rGOf5&Y9FDWr#YO.!2u=iL%Ug[FF]1fhmb`pq[.iT(iT7E*K,e1#U0Np"1on7&_+>^%"1=@A$"6YJ8m_%\l0ZbL5iq
%bj$/>CCQ0T6M:&Y1MErL:(*#1ctP3XhJ4g]2?mE#34%P;DAoL1UU2aB*e=`OlQ+`L8PKtbM@s$@7Pc8u6fprm-gWau>Fd%ncUe7,
%1bB&ARB]/VL-?HaA&'O$:!jR!0YWF<<TeJBpWiVNN#727.6k\j+s&um_X'd%q\PqoV-(N$UZ`6CA[$uE\Bop0gDGSp:u\Pj=HuHd
%X?\#GaE2T?'O1RM<C>`mVcO)*Oou0Jbt(O/=MH&n9X*NX0VH3)$./bLZVr\?@p,\6frA'"]W4f40:F[-6u_V*jIQ#J[Rp@YJ']W,
%4ZY2CqUhpJiu+FO,<n!oV()*A&KA*_n81Mnfld?e.s/tN=,;alF)BO4i3-OQ6l"U&=^FKUZhPNJlNG]9%#b4sB(<c(^E/n)D51^m
%XVA6e&J$FA="H>)0jQhck9^ei>='tY:(i"XF%2[P<e/4g2I]-U2A"!Sc=QdUXU#"XB`H!rC"\(O-Ge;m2?gfm=F\aCK8;9-3](71
%QsjT]CC''q2A#3l9-"5J%2KW]_]UX'eDR#fK@)?V,Qg^W-91k:qWJTOP;R9nLcU^d9QM:QR2r_0nV>O\3f-X`N/8Vb0?Ta&FJ&+T
%0-kuJ;$OsDg-l$`@*F;6*q5[Yb!HVBUL[@eEUOhSR;'([pTTNi7[*DshIi?<Z+O`%`C9Jcp]f&fUWn2Z+hpb@.D\:^)_[fcb2gF_
%#-7VP*ZZ%E@I7>sOD[Ne#koG3%*X_fj-81#b$YdSV%_T4`.^39+B&3U/%sB'`\R&mP+(LS#DLkZHY]ZQB531RN[G+`jJ:\o;m\k]
%jmSFcCUgfAQWYg.>_j-fM1+[VXc]glc8'r)Rp0?JOhct0)$IH<LcfJ>%&SbZ*'Np.`!TRgOY$q:Ak1K5)hBd,R68hf[LM]G4M:%E
%SN`s-RT+u)W_/;fhZZmTrRAeIM8tj`%Ea\W$U\Ra;*7d=6WaI/]0!2GR4&6a)!KK:lEruW2b+?G7]5`d65*C^Bb`9<auY;\Lo>!D
%H\sRYGcgm`V\,GM;d!U2E:Qjb:1!.mFL6Ysm\3pqhgHc/J`DbUF%&r(#T0Q)FauE[:]f"a*Y]2?YUi_GUGG6Hj9MGbCa\4d$gNZ]
%PY!D+TX7oMWsJ0ar2egjNc\+F0Y^0GBi&D0B#1$si$<^ZfGqp*AY+[54rX&:ktmU8ndaTe<&$Xh:W1$B/R#P\Z%HsSj1RrY1UoS2
%bm`Zb@hOh\N9o#p1IarQ>4#b+J>3]4AlKH=/3*_Z)%doD38;]qN#?X?#+Z;Qckk"WYVY<bJ/b,)f@IIMRI!,1-;-aLD+)4VNB\X?
%%3h?^ba>6lnsRRE'((4IZ`-hb1aV*;5f?AZWHPN*/?19t.bHVKWV@W=3[bb]a7phu;/nQS$3RQY`cKn(5s5@+n0-^!C25CCe2rVU
%"+3!rWPBGJ\A0p4EH^7k_#u9@j/RcmiREGii5%i9#466@<!_TY]^K&Z/Zt+CRG5Hmr0'MLG&\Eb9XO9)mn?"PhBk?oUF6LA"-W8d
%crS@!!Fp[1$c4DK*)O`>2AG#%]pq;5Ad7`n3;jNIf`2[p48VhbetkteiF35:F9X+a$Sfb+C4FFJ7_H9V-Ku+tUt2^QML2p^Q1\6g
%A#]fu(g;_.@*5DOd-s6%9,uT(PI1.9,B?+5/WJ0mT%J5n?YC6eNN%(F-oo*Mal9X7p%+n%7]6q5`#k_tT<o7$\:&"DYECEE;MAF[
%3>:pF]Lqr:7["u:i>mYH&.rc:l[fp3YL#G?[Oss$Sco!s?F(2UBVq:W6>!QoT/klAj-ISA:6-&/Gr*Am]NeB>f.?o*1h.Aq"=8).
%Asij5o,*U)Z_$]':0E&PkmmP_P9/gCJ_Oq!&l(!T='Ip,oWlJqq!-(GO[pX1dnhFSU(IL[6p<d$'njP4:,RZ@fF1i%&P\m;7?I'Y
%YJj($KOJ1KKkfj%Nl[pI.R#\471OkCQimEn`KhHu[R8):WEkk1@]R4A$e,9gj6=<P;%>$cD-EscqS@7lY:64,YS'osd*ok:6S^'5
%ESG[SOM/a$6oL(;_!`-[TC?GOL>$ld(,IjZ/snC;R`g<cc'T8YR!,6hMZmH6+3$XjK>T1`Fepu^_$Q'=7f/T.RRPI(ZUB#JMK(8#
%6Bbe-M<$r66o$V.NLPXCdC(<`_H72r$Q#fl5$1jL?AE*86C(/4)IJH38AlJRXHSKXAZu:p:9i+sWmkN;B<"@-]sn4oDB#66+=%+&
%O'%%65`:2J"GM@VRTXGD^S;-*ArIrC%A#4LA5!B^NoH+e7f?%J1KlHWKnq[@b!-U!a=>ap,slZT&-`+8CP&PkaU'8C7o9[Q!gV_P
%G(JT`TgC`BQm#u7Tr*KRP9r@,dm=cA>c\//]c)33"">^9ZMqHLBp4.E1ZtGje6+(^JF%mgc_b21&N97fZ86/RC$C7_B-Jj9Q8>7N
%+AT8U1HmfBR]B$*9i&`o6"6oFp`U-8V]LF(c!]k=Al)F09j5T'-(%d__C%?ff^/_b#&N<VFQ(`ro[PBmmR:usSVS)q#u[#d@GA\V
%CF`)=K&K)L"<U2h6p]Ft8:\Uk(($$+;*nb3YtS$=6\smeQ-t"A,GSY_RB).#S7,'(s+5Fs*0oLomBTU51&,134:_V"b*>E6$!"jB
%[U-m$0Cn&FG[:r&2`!(sS_tBe(q-3R(6-1eler=2BiCbC6"Au]R?XtTEi``3BGNF5fGmo5,,O"u+Z#'dY(L2!Bc:oVqZU+._e@O,
%hh3F6:V("E@deF$GcO'P1,.Vr7u8,aNT<q*T[N]Bi2V;3lG(;[,QQRo*5>W%64lW88-_F)q!E*39g`(Fm&m@,@_HaHqY-)FZ6Zt^
%E^'#LVi^e$4qg#hX>>MMA7:!T;:k9`4R5h&PONcfWeY(F@Z<^AX\b0+6GTup0+iZs`YaC#^a@LA#6hAE\5EauRSeYR8sM1KrXcml
%5pfPC!'2>S;](+GI45f#M'(.[Tr&4N>.s3=drb#08MK)ULS1M+hegNaY`&_'-M@u0=empNF1mu2?F#CP#'CJS\"(4#.aB.\dAh;N
%"0?+](RHVdUNN3"71faoJK39A3_L+?g\2I<ol2QI%ToPqE3\i]&4Z>GAtW8%)8gK72&OsR$C)aK6*rqWh#[PmJ9P2j&1tlp4H3sc
%U1#`'rF-HI&!(9Ql4jGKj7XDc_S8LkWkd[^Tdf?Di](&*EO6*@".RBLF*08YA-SkVT(cC<3SZU$TBS"7QYnq4P>(9G6X1eZ_=pkD
%>%ej6#rnuIp^dV?^jmE"q<2EYeUtr!%8\GV1)_#H'*hZ<S"TBV;<:(h(NN0e\X`)1jYtpC-noPIe'3U>O3[M3ElC9ek;X+WI983$
%AYiB<"?#$Y/=Bs5O?=0"LCo+8>nj=kIRb-RS#UI:aJ"dN04?D6PM_8=+?W2NOJi`D%0$nf<3L9".X^<MQt2"U;eLl6K^m^IN=rH[
%At/i79+:@!KicR>]lNuX).4.Oc3!t5cf-3\N2t;$r.$17dO@o-=Jc0-^U`8"&.\ri":P\Pd`BYN7.rdmC73oSNhIa;@M)n%]A,m%
%ct3]P,0KH?Q)!^W`'VR4*QSM+J9?W8#b[hENQho3T[:BYZ.J[e-rF9Z@\<l:/hak9'F<L6k0FnnN+ph?Sq3K#(TjRt6DX4$(^WUa
%'`/T)-`*$GekqGd"TXaoP=1TnU+XQ\$f4#/10DP!?Mk,RE\Eu;FVVGI"Z#dZ/e8W?mI$'f#Eh$nSdYBDYT>coe2bWIH%hI#<RTQ<
%NcE"XMSq19VK;;#[kf<#4;2KrRBcLhm]fLI%#H[XY3_(.go)X[^=/[6=:g2mZpR9BAl>+YSN.T-;%C<"`;Ve0?_l5sod[\Nn?G>s
%1E/n-4JKlMRC+uCdR$BpHsE_*/'kWG^!k#%'(h.87lsV9%D)A/nL[g:qjDDKdNT`e7t@dmRDeo"74_;gVlOgXVe[r`c<aU@cnL%B
%7Yp\mi207PSYMCe59i5!R`l<fUQ94W&J6Sa88>NeX8"U3^-_=[2&;os(qX#P$tPf8HQbJ*LfQ*R-Ko5S7aZ9#9#NMZ+k.QpbaOWS
%0e[!m"!t7&R#UH05d'FsYiV\>9gMK*Yg"qLCA;83[mim(e:CaioUuW1GnLY?bYuk:\L+!Q2)@Lh(.VWqSIq"Rqm>3X?U6A[`*>gp
%5'_&^0oX_+`]7cubR!W+P]q]\WtKg/;A4m#jH)?(((kWpjZR\d[L4JV`OuN\o#)Z#M:]N@D%h:4/sfmi4g.&JZcrNTQ%2hlJ--Y(
%-W-9hF_pY<GH`qK'8pIuYOL([?VH`"aPej93spI#<U's4-kh:G!6>u>VH[f*G!,g:J4L^kZ]D]fB6fkP)3UN<=jqB?`%"._+1OKL
%BWrX`9YpDdaG%M3LK>DF0h+I!Lm'e9:2q7rE>4d[(qr:_c!d9#0$usIaDoGF;/"'b:$rTAa&+<V_(9qiZe:)H>S#]$+ZeaR!6mFG
%k%k]C1IU7C7dM*!p?[hBJ?Hr>UbO@_6p/k:bgBj4db,J+e0C?@URVgHU!?De9jOBIYIYcB^W)qI'Cf8H0jTR.?Y<m4=-!nSNZpOn
%2ENu8Q?KCK9`WqULg>dUDPpt&[NT^)Ruk0%=EbU/G8R'`+&n^!W1Ab?4,s\2$6MBoG`@>(_rF;+UO^=sW;>8q`bSFn%K[c6@jI*[
%MGD)1*C_@rKeK!fNcI/hLAGj=Cl/VOp(`=DdmR]8,jO.Bgsp6Hc@M%E\&]g'[cqT@-=Dfnl4Yos5IHAnc87j+IHaKq4tQ&E1nPnE
%%PenXm3Hqrh$QW`(3]mmB`BBgqEbs5]cW;/L(.20I:dL;?HjElD)&L=nQHW$5(kXU"iqmN9#fC2i=IuPbkXXn`EG+lg-cH!?AnWe
%+Ot^(KKXlupQ5`.3JQI!JMV\.87hraSqDoW`cUQVhi-?)jIAr9'sNc/EO>oSB>gk3EoXTpJgkibaO:A<D1FuT;?$u16lab>Aar2,
%YIcIF8;u\Oh%52u1Ar_@7J2dZ.%NL];<J)i`P6uQ7=?J!M=r;4pj0R?o[\_-]C&/D]N@X&0+c$RSB-J@%l80=(td7cj,<"eW$M4g
%93757EOUZ];CS(ObD>2:2:D?uTgZUscu%f.`5<hI.lNK?1;6jce7nTYD!JnWWKa_&lRU-gM5Fg>6L,m7]$uVeX5V!4+jpVtW"s]M
%8RZ37SK:oT'mf0O+bR77YFh2&lGRI\_8D8m^BFdY47E/nBZ>JM#DQLS=\uS4k;Sk#SscMZH''d5R]@#X(#XkB*i'PTUmEJ-6mNBN
%&>kD2/Wr"L%0%b98uc:+f)="3p4M%=5r'0U#+AIi-4f,q*!Lk,@"'g5&gB.EUOj7>ZUY)>+Ii>T%.JrIJ/+1R.BKLn8BJ2&$s$!5
%RuF/UQB*p60+\b;-n87tnQ+W3FOb%tH4c!;6(f4A!lu5^b^fBbeR1R+5+BVs9,'+kcc^fopNflXo$NmS.mW)s@'3ED]p0r$TF([`
%\-+1&;n'l.YZ?ui@$P5Xb@[kM<5Vm:O#/p=5p`1@Ih8r,=t,jJ9>uguPjM@;`5<^_gO=T'6Y6t;'5,&X8:j3BQXj.C7.7("==O/c
%_MEV@hNKP6rmZhh8srH^oU7/<]l=YjR,2IH'#/s^'"_!SqWMDmo#G99(/s9CS^GZ<`0k<Sr!c,N@&`YB1+T9)ao_'cC\]CGrW4^8
%ApK,=o$N`FH7SAWn<6=c=k/e+@(gtG(dpMYEgUWBImg1KnX],E/W%.oLj`)b3+&[W6V4r:p&p96JFD&SkGhC0,n`$]"2n*g^+_?0
%VBT)1-]=hd`8L\NMepOs&VmcG#q.8eO*md&F>0m&99G8Qo+J%Yf4pg>:XK*jRTpA4.=a3pfe=tUfSn5OMp3)j24)Umn=gOmC:Jn@
%;i01?ljE7nWiL>e($U,rgH13e;SF#M$X]H=CDb\==pbb4Yq)H`^o]/`_QP(#;%Di3)J3m"l=`'Iq6Z*5JQ%->O:K$T&b.=V6$,kU
%E!E$YCf\Z"G3;j"+UugDX$Z$PrcVD@ZHBX7b664A/R)9+'-`Bk8.@%9"0;!cgqHNPNP0aDhUB9?N`JOaWiEmY]RFihC7u\Il#KL-
%Q?H#W!,I=NNgpG"&-<n_S-j6PCY1BlKLH/]f>+?[c%'oUJPdTEK;a4Ym=Vo#afTa-@T/m7?E8WU_=k`6<9I3r?IG66T6t9Na"*mC
%b$W+2D5Kr5n-!7C\tf>0%%S+c.5\kRWF\8T'WRN(#>"rh&Tuc!$A^fpq0aJ:_!DQn[$;?tk?CLYQt56(O2*S?&T.^Tkg?m`>u4(\
%qE+UOK1GX5QK1k=Y_8X.TTG%5(;$5iV..Z8$OYolF[6%S(@;#Q.'-lrhZsSL9"CTKY#H2O<_7>h$49DlJc_5fPc^V:/*2A7ccUU?
%7G4;:O[DF.d2Dho&JVlR(DLO<L)8JG"\[\/$49eN#J6X*,nP&@.#^g\Jc^o>o7<R-$b[8hoUp=m!KL;"7lGr#*0E4__d'6qMJZtO
%<S=!JP!_M9oHa2p>u7ah]3)l<9W7-F'&?JF#R\-sK1mth.OU5]aCTse`,Voj=C>KUM@F/B.+jp!T\sTC:>a[gBMETN?otHj5a`6f
%lXiN&[NiH+@`jMjTUm\u%S!+CMQV;iVQVcRWqXpjqCtucPo'XX9`"j87p4A4`c!m!9FN0ddEp*-D&jWkc@#:@H/*#W::%dV+O4bp
%O2dBC1N'*sU833?1gb!"3N!:,mR/.sp=-"8TA*&n`\b'.@9Z6WF$"G4X,mq2S3,+f3u^)A:KkXp``^>+0cI`fip.&3kEKE+S`k^V
%Sqd()pGUL/;>"OLjOVl/"Ei^9`SO;$'5bPYI/9AqW^p@3`9i!@NKU#hoEB?Z0_%p1dFq7NB;FG>9\^_4Dq7Er>ocYd@PfDhk)C&C
%7%a7SVIH#.X>l$S)CM[7rSC$*J>!p[%.imT+0>;CqL%pNgM,u@HF#eQlfi)/2XOKG-b%QJU5]tt*uN=P8oVAe;qOb_fH"[:!=0tt
%'MIo8.Dre[d7:6#%5ZH$D'j.q)OgKC]rT$W%^C/ZjGXE"Y4A"Afi:5"4C.%fUoCNfWSBM4HsQ1,.c2?mFHpchpBHndbFO:.-ZWjl
%5o2Ugj"ji<CO@IOp7HK$o4Tig1ql9:ll)K&;I/<=OgAhNj!&W*:IWPpj6P,ZfD*?cEfG!BV69?2R<-aMPh7k-/ou2qce$8r5+gD'
%1B%3jMB$AYK?2_'54?oW4qfrg`]&^DK>sf5B@lpi`7[#^EM6Xt)^N]pj6L1(T^h7alPeY'Ed!Gg6r)A/>WNiPDc5*TMWd[?#nr>A
%A3'fiR0>]9bfMPf!ne3;R2[;A1R>Wi2%+q?Q_KEm$;j96)+qM\:1E*!q2GnuB]XltSrVuWVPg2FomARY::*#+M2T=hI*RTu2,"p8
%.H(3^BG$$9Y]`e+_\e1n>4$$kd:C=m_o-Ck]icGfF`fOW1ZoiJ:=r7Q'5bMjE'l=OcO%-TCY\9"XI:Bh)Z`TUWoF.AAXI]iqIm:7
%@7L+,c,=Hu]icGfF`fN,S[aC:CaS"q5&ku_Hqo[k93U^:EIDePRj9/Z6T7aXk1tkX=FIaVI.V4/C"k0"c2+rPVk`M0Zo-]S4)HA!
%G``Pf$qR!g<Xan+g6PLc)eCOTiVb`IR!0qSBXOaH7f'gC`,/I@1EX/OFZ;[X\0^?V-JjS;@!Lr"A[ONQH=G^o%#A;$(0>ER,UIBm
%a!npE44-N54nT]GpGN\o;%:ctjPJGG"FDEOP9?.ma9E(,P]:)o@KmBY-:h4$IZ-Y/[Nis(Iito0cd+Far]):Ha$IKN?*f[X7DOsh
%&HDiI4BGo++)PN+66WAj*^<%.@@$T1F-[J79,=sb(("-XLIdW'GQa362]+7^NM[an"CV@.,bZVA,]K!a`"8c^J@5+CjFtijD%Ab;
%$rOU,;&X-Bis_'hNl4LKP@lXA^c9[t"'1t38-#lFOA%27i3-W.qFA1k;CO:+/83ReCl#Yk,!gagW!oBm8rS.._Znc]Ma]kieR)A!
%n#,W,HNCH.p_S`WCC,AfMJt=O2h9sURBQf#s5(rf.)@)?*;NuGl_K]/1$f!]ge1AYFC?-GbPW1a=GfB$@sX*1`QoC?MTDnb3<:/F
%!iL^-Si!Qar23ACgr)2\k81@H>a7m6f`9)ZHk4R*E6@4[?ns\qd1t:a)PA6O61N$tP/fs5i.Q%hV1Gj'P;K"V$L:u#["_/m74*eC
%d8b6NRE(!+Bo%?L7Y$tY1nk&*VH/Plj:=!)7>NsuJ&LGIoEET%%hM'K'>(9-ZAF]1,9VSN4%r%g#6cK'9ig[j&JHT=)^b4;Happ!
%'$,sR`SMt6rLi'U<?6&]]Z@UO$LE>oUpRRBi_"9VaR^UW$k9Il<DkQ>!'RmuAOTu[^4n=fDH0.mec\ZiLp]51'>gdUodhN'O?3hj
%l%sSi:84<oi%[RXPK:C)fOp<dXh5!g00nu\nWDeY//Wq+Ase25W.*W[XD-=KVc?'@i?r&U4A8e]lB&*2R[OOK6M4ms@Y$>B08th"
%p]9&Pb;p%GBMVTq=EXZVD`.aD&FkF4ZVOVm!#Z;I@`sZZW<EG_Bllgj3sSq87Koca2/8,8V'>^?$)C_IAk\?OWKZNU(b"CT,?&Y!
%$*"%Qk?2hRkj/B[Y'OcCU95:KR?hI*B947k74YN"j*+VaAg*m>OgLf+3=m$0?l2!g&VTpdP#RP%(CAHG!ZK65"up(Zm,a!XUUg72
%nVPgf&k!&EWeFFuJq7?#X>Mc6fkFc8pkXBe"_:J&!s%7GE^A6Z#QS;1[N[f_Z4i[u+jg*Cn'FbW..->09U]'1"*(Fn-jWD7FGh>k
%a-B&I5GN_*ILoM&QKX,[#K<YUV^btiBpK0nS:^rF81H#e8b%u(eeUicEDC.CV&5LtGd?b"AHl.Vf!MZLj[KCO(Ag-Kj>2Yt$@#K@
%rq9c0_DV'E?S4tc[tpr<JjOhkA<2VU05CIk_Q7F7fujn/.`!meKB)kr`e/aH`T"[1B>0p6p+O:\\I*!u$Obm:1NNi.U(mfaq^lUJ
%q,SI`MU<":+\G<A:a?h^)?2N[_Qh#f/7Pt4)lG$,C8)1_CEX+:_Ep&0&0(b]:oC8`ZdAl@K?PqtUW;icU*lmOAfXU/K>o!J'f4/a
%_@W"u5WVV_mfS92YY&FJcse:]"EF,cDE_e@7/g#(QpSUI/PM!+A1bM#H*2[Yi?\^r"+9K0V^<mRTu%^KPgPdQMI%Dnmn@\:AK=re
%U1QfZIN(J+jEE@se=+`tILt8Y>'pnVfh-Er:jScGmfS)Na=H)ik?%fp3%Bji$jbXiMGBOI9b#1Ya%=<-<!?G7;k=aRgm)Pt$&dB'
%BQ$C-<B3>*[b%^eWYRC;\1Y,#li;a%U';d!35F6^a9uf["4H)t:5[n""?@5sTR5VETkG%$+oH"['tPTn*%O^V#T8,jJK-(L-!CdD
%%uIOsq%LsZabi=f"3(lQRCNoUhHA)uDOdjEcuCJ>J^W+#P/88^8X1,mguoHn[m<d$ABKWq;Vq-<73ZU-N?QK`JV='3SPqgt_.8iE
%"k:oah=RP[m@[rA^^nH7UKPJ$n\_dsRH[NHlI^XmECD<,B/B>A]'q[i!Q4E&[50gZ;8BD:WF,hN;HR^M'dWCdE`sXYr&6d8'L\&O
%PS+ju130@<V=unrQFE;'qo&;m-]qi9$*5,'AoV@;8BWc=$,=3q/7+%:iPZ?L9sUR7*1AE,=h'-Vd%qmE!E!j;!NX&$mO21H*'p,@
%R<h2k[;n12($*D-klHH*,MQiSeA&_2,ncd[Ea^ToU'\,k+o;F.@H;_$BuQ;W&A#`A<iSXB_oIX8o.2P3N1,&DFl7eKK_,`S8&duI
%2UR9"@Q`/-ln(*q_S44(G^1l)-kfJ%Q$Zr,6pL`]4+_<7BRF57=L]6q1%[B9eer&rXP"-2S<b@H.1e!>H0@rl>u[VO@##DJgaui"
%m.Z)_3_70H/,o/n`!eBQIX.RU4&Ol)KJWK8+J9-VT%2h]\IbTTo/iL+AM[XG^_X0Z,Vq%R!WZLSkaN%@$LC0ZC4NI_BRtblJ7hOg
%(r[d#Ka]r>k_+UsT_C<e)d2A;=;b49JCTH0%;>h?Yg--*L[nXpG?t9'PJiFI!qoOB(B_gKE:%)FY#1ucVU/Dc0nLp5<p^_*Xu;0#
%mF!RU-%:A>.=CL-[*2!LWOju=C'2K^n9VL3+sk/mJZP;R\u:P1T&9[0bA#KtGj/+;8!;VZS7$<K"_BWM`/[J"3[3djif(Vf,'O\g
%WCHuc-/t+"Po(n`,kX$g-3n'DFr'1&:9\pIed.]*q%uT+#k/V,6en'B<7$H'QTc]rI7#2V!c4;>LRXsVZn^KuRA@>`+I$Y'n-Muk
%eS9XjL5>\r<%t_Y7Z+N#L3q<taCl4WlmE6S=g5(9T_Ob@;3\-;O%*7TU?5-K49A)$5.aea<l"nCKkHc:M5I^?8sK(tF@58%BI:S.
%5tIJCM>i?OMMs3_5%9P9TPZIm%)Q5cX%NPhrsjA''VnXiR\mqNZ?X3Rr/ann)o%Ph8a*8*knDpX[#3;Ek&rd!!hu^KK&E"H3(q?4
%?<4%(>4C#N?*08(OW[7bjgSjn8<B@IhB82"C-]rlp]9!!r?-ZH8_l>jF;PnCC=.VFD[@sGMU`9Vd_qkc_H!Gt#='l6`MH#nJ_V$(
%LqtNoS7):<*cYB5<se6!<B=kf,#r.-_/;J)_KM4hf4[%H)76Z*(#+=*,pX`c9.aD5Yq6>49?qE4i\V97":>Ot;S$Y!#rfN&3\J'V
%-mT9B'<'@W+_ACAM6)DhPFYg<;G*^%I`pFTf,LG`3Q'5=Ht.0e!jS^KeK&E-Lc@[JE!p!((EAg"/@Ymu2W4io5]K4.DJPm6]WR/1
%e=,/,fd\9dq%p%I#po\'.\d<t8FX=".%=LbAg"6S,V+aWP>LRcRA=Y"g['WY`h2@:bbIT#PMU-.N"CZ+OI]:W<1;T;8/-=/pqnY[
%VM&IoB&18Y%oraA2;]"q\q>U&P!Yq9M=HnAL'b6jf2][j-3uX]'1k\<//l!556U1V&n]?+eYShB`9YCRDFFs=$&Cr6-#cLo,&jaJ
%&]3rD:`Uq#BaR<9HOn]!=PDtuQ<!@m1.caOU7EYk'VIRm2rrbG3C7f3XC>Jsfu&cEH5f*tU&AChMq#=,_B*Q!$'rVrV-#e+3>0\o
%(f:G`%.9IDhZ`fp+!`B<Y!R&]E*mR;`Yt5tM''1/1-[b%rJ,L;gF,=[5m%7YV9flQ5+KLIWP^Z+"^T/p1$Z%r0o"Qq>3b4G;IR8+
%?2n256up/O&[+a.ND/-E>k0<>8lM9K_aR>VglB7S]cA:T@MF?hi9Nq'2Ys>c$kCG([N\l6A]AeM0<4;sgbcP_"iaSTVR;-q!Fe)t
%?A1ZQ*$4#/C(:M0L/=5XHJi[nD%HbaW[o@.#R-r5,/_j?;'SqYP9E`<>D!OW9lUlo`:ss"nm`M26!-ZoMPB2",rm3V^rA)VHdtP;
%>3?<+2>BReeq>&t8;C5k$Be6,]8Io><[iYkOO8U5@Fm!WVDBgZC&p_WrLmL/-ZBT/g-b?cnJi[LS$-JU/]Td@;#?[6bML]2RqSU1
%@4AudeNsW#J4TVb#!&I`3XT8RVGn(-*SMO^D,X2MBb338op-l?<bq^=:`6dJ[E1N>I)'k2=F@u8@QXETL]WonFE5B9K+_f#^^M\k
%Jk3QV"W-DLpAT&g1O89,,7qLj+F2WVYD"sROHq;/0Y@tn?\p!<>(rl)<TR2f4<<E$@dZXC5Okg!$%0msm0au^VE0na9,]P-C>s7I
%aX]t-#td5J?nddHMfpuG)bA)OL/B:&EIW#SjG+Du8gerD\:HtH/bQ:A:r(A/kFNUW,f25h.;-^TOF`%7%`#,7d61?BS7HGQ.YY'0
%bu2CmhbESJj$i+D`1'*GbCl)t*0XIpZLQaUBR#dV:"j6n<FE*f2?:V/M2%:mM_[1@@VLF!+BTk-a!CX\`<Uh&WH"XM?"XuU"-t+7
%:u(sk0/\FkQbb?a!o-+!UpCQKLT>*_kbRc=QW[pcH3Wn3.?lqA&MJGdo29ERmD:E=%,8s.2h!9)EFn)ipfVUFk9.`1iO5I4*?m!i
%48:nggEhhCQtmQBNEQ&@$kU65/JLd1`4?;Ke-D,!QtYpiY8>AT0OcmkK51K5>(ks(Y@'q',l9BJ)F'`9A4VNuaFU%lY!N`QdgG5h
%2lESq#-g8KSj^-i"$%,B-SQpF@$j_%'O%n)9,"2=Z'aW<KNW8"=A5b0X+fcm3*iEX6"i:fXA0=t@:k-Rn<IYhI-I;\8I[U$>>W1K
%KbO!q($Ro(h]d;8'H2mi?],DYn;A!fH8K:!h+a3l9D#j)!>(`$#sG'S&ua.][B,e*bn\r6U=cm:/l8O5P/;/P7-O<pm"6^HCQ5(_
%')^utLbl\kpaoFoW<oab-,ADFKL1?l"j,=6GfD-r4?$r>79bKC#),8a[=\#AUK)(qR&-I:c&;sr_?*P*2TtZ71Tc_<3tQZ,d%`Pk
%6/f:!WOE1h%434uf$Hn#,]TBmW^00AQn+PC#29BDa'RP#oRt'[U+*fQ8jbPYR+YmKZC*%!d`aur,(0GG%mLGV*i,B$:f[`>@@_^8
%4ts%Ab-0;lf25+)(_A_Tc378?eL^r:-Am?IVEKKTmKI<+61QpEq&jcE$U']mMQD`7Agpo6#gh+*M62C+)`EfsX#`8>pouLX+RZ,T
%I9CI)@jW6*#-7q_,rI#D$AE$p>hk6n+3G`mF>XF6!$Q88QYn.1!(sg.V?esF=BE9fLg]QqBGh8sr<k.sYmeF-6tJqeTJ.1uM,Kro
%%'E6(Ai__7A,pfVL#O/s=0m:fPpusOABnpWE>'`_VU.MG!eHA!PY&C]`$5^A"ediTH>oS46J)Ep==Umi$qk$V&"%CbN4KaCaU/$R
%Yo>\VJgOMG[7:mYCl'0Sbl,A1aaKGu-G[_@%Y8u@Q>#7VDD2:4%C8k6,19^:C0+^WQElnMQGI-e(p,)63)I(@Rg7nG<\-b,im8l?
%S5GYaW8crF-4srWEALlJ:',,O=FV:%AgK+cT8LJ6#&C[(Kf(t>NUPsY!N$KQ/m:+1!5OL+23bq<$?S'n>/Na]h*;tenYa:r:QJM@
%QU.MtQ?"KqJ[Jnt0:Z&o50ih2%A[^$a<3:i-W[(Di_I=(K'S&FJ!3nfU1'MI#7,rt(3fA=fmf<>g?MpD@[e?r\[W_UbCT8&'c[X+
%9!=/B?d0,ls'ZA<HAtF/*Lr-e@;t-SUnG2`EUnJXd\"o8m:R(4=WJ.44+cgn.B4rW\f_C-TG.Wgq-I];r5BUZ;UU137'XW'kUF<U
%o$)h`PLUqipDh2BW3Ut9h.p"L\FC#`oClHY]\p;eQXB;R%0F4mOE"Br+!Uc+3ZI_\%>/H:0q)4*$s4j$cq/dFa.cb!RJ+cn$:.K8
%n[MhBLr!O]#"i'"l)bLt)!+hL#cRWh@#$FTF'Ke9PK)l4X1/9J3o^Z.?/IRZqpC?/a^EF&UB),Za4=`k"tXHM0B5M]RQd%JI8?"#
%=,$&bQt+Ro."-!/:]lrA=jt9$3raaV9HUb<ADn9C+P%aP>njaRjg>:!MdT+5%l8c[ZclamHsKmr+A/aekIQ'II57fAW5F2_,-kp[
%&1";8"HC"><.\,nJJi_0?ClTe"O:3a'4AM80G+)@ksY_]3'LT)8drdD.0=08A\hdn,T\Q2P5\+8IDVCYokKpT5V+rcR%aO+80H/,
%,FCOY-pqdq`![bkBEYbUqE@k?KNR.m"I(:qR#0bQJb"MDYVE%*g!)rs7_13aimqh(9%-?W6-t6Q&\kUoOt*UY*I6;,Uo6"K0#9m?
%j4oPlg&<G<3+6?.r<;Wqeq8Qf,%B@7`c`I[,dOfi*C(r\NXGoIel')#K*e)P@h>C5&o]@_n&dEG]R:X\[&RoGI?@tY'1`p*M=&Qh
%2iiN[=cN_r?d=h)KIAO3Pl.6O.1e$W!<<Dm"C",jS&Rl$5u0tlKqcCTk!`\W0.[uS-)'&^D,&N+,eh\N!r)7A.7gj!dc\$:<=:TX
%f9Pe.'I\NdT,)EU^lOE6LSS:@OA5\;*"^i^eZ"(\5h=eESR)q;f@8nBA2r[#[51oFL'm*saB-rLaLQXB&AL5pf,HVsZpt7uE""iA
%Oeq6:BNh&b'?RO;oQ'S;/h'[iF5K)$(A8#2m+!nBj<3%'iXZD*GEP$SGZGXkRY!&(3g$8?c$8\cXYd70WT1cn/!T!Z1TA\1#<%5?
%)"_HWQcAaeIk_(+K6L+[7DmG*ZOPn+loS+.#8*Sd4@UGg-#.T(HD&5iL*;f32+ndtJsK`=a@VHdL:`;RkIPD>'-KLQRDB!;=XQ_r
%%t'LY!LP%*=^]Km@b^0&`bq!\%&k>qKEZ51_,Gl=26@dOMh_Q.*isH@B8Im0aBkYG:<e5=BieH1F;F`YM[V?.^B_b[6)rQJ2S$mC
%]dT3C[c13^NY)"?4c7hkmYR`.IGl,Q=WkB?AW\W(fjsO@hOmEF%8)\]qLJQ4T(=X+PR0W0.OYu?Lr@D5;<V8c2Sb^6[$e<4A"Y)e
%.7H^N+gsF#i@AZA-h@>#F_7eq-nYhod'Ecus#'?q!gdHJ8p*[)N.t#dcE-pRM"Fj.;?]?bV.8P<A?ncu2d"G&N25$Ln7LPfWJ2#2
%pp=/m4?og6!jaF\$A^Q'JjQG2!X+L?=B$%[,'@RmLX-K.6``o"ZG2&V(O[B+l3(U]JB-'jOi5lgiB<]3J^WXq&/Wm%\_Z1de+gnT
%ClDY>q^/F)m$,1'BlQJuh'TqA)6F4(M5j*ce549,"qgh09Un4#6JG,bc?\n@+m<1Oh+!'!S-4[hQ1J!$^'VhJ;VdCS7+r/Ys.YkN
%_7g(T'lM$52P>FR,KGZR@5Fmh]TSf6b/>KYZ!u%ceiiPu@`A&N()m4.4rc\RVNZI8&Hb:+8jF_V,UGGGWh,(!0QM`%</-+K\k*?^
%8!5)$6Y9pW-^LZ>Hs7.[ltO$PS>@9UIk;Y,<bpiN+pJ40NN?IWpSK2OHfJ:q/CE&c[[<cpO4,X&e67a8c[1oo;-m&2mB!n=C]o&<
%oko'r.sS!.SqBU.5Bq'$CJr%Jb=&_F..T1D5:]lR\ZR>G[n)Zuea+t<$E1r5iRB$\QG]ElcFdmq+N8,IH<XDl,WhN/*Mtm!i:/"K
%QnitW#KKtqVu;a0HQ:?]N:)DOaZ0'`3;\PWMhRr7O2c%rE.X_5=gB(5b%bU\m04>"6uSnmY/.M6DTkO"NtKK,K/@>AP($0FR^jOq
%$uaZHnNo3Cp_"EKJW5oZF:+d>Pu4:f#1hdMn<.:U6mALDCF36[,b`PTN?d5q^o>Of(lA8,V-Y7e7\Z=/Sld^BYUM*0_du(E*:Dbm
%ac-OjR(?*OTVm5uZ+mU3#j6p.3i8+WQ9b8od`Gmp&1e,\-^0A@Fdl2s)[[es/>6mbj:"g4K>gD4GkQeGKY'!geJ$)-=#+Ik)&:<n
%`?D&d6rl'^+q,lOjOu&he;>/Cb4%bFKR$0-.T/kJ8PAl2!Jp9E@nKmrUSX1u3]Jq3g/?($Q(m1qVNdcf-qeOPrhGe?nXM?Qcm[rb
%3Fso4YmS#(PejZGn35/I_\WJ8B#lE*JpJ%lVi9/"V'N1aS[ADO;0p;4_s]GR9U!Uq1j22:N$jl^e_2=.8S+84_5<`"@YQ(s=]QEa
%Ig&m:0rk]d)<bDtXKlEbBinCRNNl1P)m[U_BfMm=S;Z8UX,ra/VKlbNi5A^7'?dW(%$33t6LZX53D1phM`rDPiHKB_G[_P:QRlW>
%/;(L!WE`qB)2?+lBMU/u-E)c4Zp>p#D+lKJ/Kn^ZG[_O=oMp3P)9_L\i-e-JA$'o?VUX*NfYI_m6rV9*\=)LT0sqE_R\Z+?jHaeY
%R$_ZPXJ_1Jg*E$DG66-.a^s*ZDRh-]8JQT<1$m"n#Z-P48=5iN`q%ji-1g1Q;umfsGt9PtEHhUnG]jrQ4BnE2"nr3Ap1&7`*>PY"
%A(bE$(&1sZFrAjfTUtV>?,f-Hb?gqDaML]RNG.QfXNs=_jWV<r'p)Nbc-jcH?;:$SV3`@dS"?6,]o7[."fP#Ab?,WgJ@[SN$r^[<
%esKcuOCTfbA*IP5;C9>RV3`@<RW$*2?A<'mPV:DU1;lFV&b>QL/2N@?QsR5Ji\@<sJ\lY):G7>FM8n*i]8RE_R2E6Qn:f)N0MO1;
%QLS.*EnS;R:$$j:p?p(`,L)OOIa%@'9'dU-%"V%O:_/W<-+-S#C(JQY3S`WlD>!V?odtBK@'Y)JbO%lQ!?eQ5l`u#EbHOmak9nqo
%6B(A;lQ`gET3%Du:$aXcifKZ\G*rrlk<@O0Wp*CZT@mcin`4=_m'<0Mpc@rR.)k#)fh?kJI`D)\pgo=jcBJ'""]jA-%=/n"HMeA=
%?8aDXr%\GmpM03@<(B'T&57\D0_`1B)mc6LBA:0:_+^]YE\/QCY)(n-P@1iV!5/.5_+YrW#A"Ijo_d>T,f*0n::+\IJsko7X>E@"
%e+Zt(MI<=(0T4LU0N02eT+o+8&YN>s0N/*tbX=,e4MQS/PeGbQQkkQe7Tjo2F>+PDU\W"c;oCMpXE*N]_RZ0BB"B'8"c?\GSoGCe
%7RJPTR1T)e;A?r@&\HdDj%G[6rP7F'(hP8^8&Za24lR@O+DsJ!dhAS)2\XF-*:.7)">_pk2Fd@d=5`meL7*WAk@>f\Q<DI^aY;2/
%<p=bP'Jk7?(pPF,9S`bn$O4RD/[t9.6nne_YY>ff"l<2)4t($T%)S^h9GB;A+co\UMO@i]b[O!q'@DB,j@h;W'AWh9/W/5A\[WE8
%UmOI(^iOFgR-A@]YH%$5X3a&>3+dIQpiat'Zg.,#0rp(0*&GAB=6uKA@l=LC@l?c-@n)+akb+=-#AqtW*4$Pk`A&<U1NCXYZcNQZ
%HDrB(75<9ccJsOb`l5i:MbI[+10*[A-Xraor%bieTBKiJgU6,[oJ/k^o:P8Y2;o@bXCh$tQgJH3>h94oXCe6%Q`6hJ:kN&N>62,i
%Zcd+M(;!6^oDBWq1A-;p\_<HWVGGn=/(nJP''*JZ>t+o=<)2ecRT#)L`jA4IP$Q'MeCJkVQN<_POIkeo/JRPXMI!):mU!HRFJ?p3
%YNTPTTSlhB1.CQO2X"_`4?KY(Qgo*0Ja$b=OsbEUXX;">'+bBuFL')5C=I\3@$g7nUtpo6VCg-1cjb/df$Bg54L*'D6t!OWA[T_t
%]Bgc*m'9fdMdBFWGgX]bmmnFCVO("a9Qj]ZcAGu+aE9),r3@agr3G*],em$&qpeI>1:>,n[`L2OD#e)tK%Z/s[U/#_0N2r`)]0!i
%g12#;9Ue*'M%UL,(5NXC6o!^J1Nt4cXEM*B1#n,V"V$2(Ta#or<hp`hir']&1G5e^qFiWm#*]IA;9[N#5nOjDMt*K`G351ZCk&gQ
%R5ef/R2FaG1#qJ<SeK.<&J?ZOa,D`%Zt<4[1dK+bN(+cuBDVqQ9HU$u=LY(A]FQU7TU7HqoibsbR9BW_U*sV16(P5.B)9JNBD\*+
%`fWd;3>lF2dbZdtN*/H5Sd8pfjiX0l#\HK35qIU*B"cW-S-`f!e?1\8Aie!g0,MGu;^aYoM-u(UZE26,@&EBYh^F'o7q-W(R:)mF
%2F47!'dcR_cF-.qdqKW4b=jV=8XY`h&^5>p?KIM9?)e&7AKmLAqI:k>.:mISM)>sj.ZY,D1G(?NHAZ*2$':Q_VBBNc,+.a3DC0fM
%.?PS7f\i)F$%c3&o#nD=ZHXhMRF]\Y8VEL>L+V[;IUj)8=H/TF.>$4_N'JD2,+'g36t*>+AkI4)JR/Jc*P$dfK3tKOH":Pa&NIEZ
%^Po@2a"d2/`q>9u;8Y'k07'$ij`*!Eb=LeF6W!\9m=HsPa2ot:Sb>W.",s*7\*.DW+*+k>'YciL8iH:aPe-JE8:HsNCi"u9VS*mn
%M2>TJ7tRGuA_Lh3Vu1ngbLlOi!h\[f$F230]hI>$Ehhi0MP/3Ke&uq**We\V]hFo+9QH%t-:f*OT:'$J/b_7R-ebRf#YoDCj_SRM
%=_3+rEg\iXjG&QETo7l0?0&;>JLoV@La*6bD4QSiV?k,pjHf%(i=RuXANG+(2k&MW_>WdpF%2>4FK".`0QYEZr#oW4I8"^a=G+^I
%dq;K)S[i=)qc<JODM8-Wo86,:.rc>p\Rdf(P0TH*ANKK-L0r^k*Rqm=-F[f=DrR)II)j![>GbmQLQUS^$-L:8C?Ch%XC[MdDOD\\
%Jg@g!?YiD"'=Vck2iO0DgbKAj!Wa(G$m=PUHudCge^TiU.;mfCUdBu1Em)8mnTtqYllucc=@b`K#E)coO_[$CQt73u?d0b9/DG\N
%*8=keD4G7g,6tPK\$K>o\7K(`fuk,89L%-?>WrhElt[&m.0c$.-_#eKOi]E6'_R;cVYB0i.[Xei/\!;VZV5"[W_bLXN0?CE^LWWZ
%6;b(VAa38pL1Y%cIW3a]=2Q"o.>4XV=gi;q]s#7'"7F9Y4#+q.`F4]>c\l4NY1m?M.9"T>rudVE@Su?&<l?bQ<tLpFGnn0>i1&ka
%%6`H_U9_HpqC)I[Ymam@2R1a/oBoTMmtk/DAghXr0suJbRB6^t9G7Y$^Z(Mm:0MnQ'<t6].`>VM=JfdJF@NOOoGP_81U0WigI1%+
%J/7+!me.Nl!]^q;G20mP&tFbhatp]NrUE0);f1n_pVA?^e1?fIR9-7-@0K2*RBFN!44D?lHC;E$&e`QQo4'lUPhRRh9LUMYLZ;m6
%]lK$42V.AS=%44tNa7\Vs"0Be1TsL<0aRg5HDqdo[u#`=[Nc9(DhD+Lp*rWEe#nQQd`a3D,_)oeV](DWO2/cAT3,[Yfr]&tJlN"%
%T,hC&b-7d&YAKBDWfAsCb,0=cX%^,QC7$fX9RENL12$#qZ)qpU_$6qKF)q^>"KP3f'mK"TQ*E7`"*BXIVEOPoPpo8T-:h]-_$^uW
%Up@#1c(qYMJPK+2RUFG:6n6Z/q=#OQ87d%eYA="XQ0Ce54&&V@NXdIh-`Kd0%^0U\WD(/'<cZ?)ls\+6PVQMQ^f"%PWp2K@b4ID<
%C.0T+_)uMc9p@EUD">%`8srG)<l^UVAI:Jr3Z)Eh4E_k^MGZ:W]g4'9Nm*,PVJA1bRY3F+O#gFhKJE_ab#D\TZtpqNm613I8LSp-
%VVhE0bXW;gZKa::aXBlGlUsF0,0[jA-W>$e5Ll/tVBE%:`@"UF,3tI2R*%2.N%tP]nK!Rol&.hVUZuunk6IhW3O&9\:s/'&?Bh`Y
%YkKrKXRZTb.BEA4;9Hl\S1%sQ]h%j0/rHIN2,VM\.0A0^;p+`N`d^k.W*`huGN#.N=)]I1U6I[]7b0+=AU553=&R1a$t>RrK2SS)
%OQe/gR6CgW[5_aYVI]<WF3<!]NXWlU;sJ9E_\n]EO_U@6AU8=2&rTXWW_mE.U6I+E$!gr9P`<'56n,1bA5UKmYdlf`,c-IS4n&9#
%;PoKULbDAg5.5Mr:J)LCL1L6N.FTrY%_*Z1AL):")k""uc/e2Y;HBWsU6LWgEDjpniJ2#;=]H/o;H>Z\U6LZ0njFp*_n<]/V2RLI
%#GFge!EdoH.%>fS-mO$$H9`%a7f%6OPVE5i-RGH[4b26q&^'aOJ[<XTZI)O4:o:/W.TA1GoL/uN6ms"bnKa?!Og,1'H@#KPk[[\W
%R-A.-B,F\cSP6NQ>^XuAo_@DW4m6ET0^*$c)Z3Xaa_DA_F>@mq.Mrnk9^cqS>?)t=k-.WB=nSnmPO[p()^Ltj>\N,\I0AMm.Dh'>
%Q.EqHJ=03A;s)oji03DJH,#u!16V@$]*FmC'\S[F<`;K8a_HK'FL''L(S,C??I6f/%[lQl"0Rc.13FcDh2>%*#dD"1:8T.#A2Bcm
%$F[ll*6uY?SP0UqG;Gd`Nrm(`Um#LP23k;%:0'0q9IHmbIaQ7o23XRZ51opq9RJV?mi4!<:T!<fJ5V1L9r:3+i6HF""f^5lQ`Fj;
%745,D9l)Rd@$GIu2Aq2egb"^a2K0rUSP46U$Q;i`ZLJp7$/K7)R8#S)1!(bP3S0CmfOS0=2-\@:14>$BA!+k;!\3GF>2i(,c#b^A
%FNmKJ-`^]GdE**eAq^[T=`">":.@*YK4#I:1:D;/pa/$>jT`V:Ju5sMP&Cgk))i!TER;f3j=9D)PUZ6uA<U"Z@V1hg6*Rp7$*95+
%_'Tg\NXWhL-DPtBp1nF*H^B,^1G)=:m%GMmfjq)ei9XW`ZDpe:Rk3kG1RX1RK#V_La`d$iei($KXS_>W5p[JBb%ha]Z)D3MmI@lH
%8Z%k7b=*]*_8]DG'$1hr6(<[@.L^P%-BUuo!\%GD1;8N<c9ru-[Xs^g9I6as9I^q#-C&b,8uAppYf6m49L8C;L"EO!5uGb226\.H
%6m\n@Hr8"mB3Er:$n>E1*G-dh^<#!'W+=W6R'IH+1*+f\Iqqm&oY'>rdt3)oBMfHN2Q:5P5a\N]augdT>#[9=$<E9dP"CsRqO'mO
%r&X.T&]sYo0U53T1M#O7H"7"MSNJ[hC!M2$_'=<qOh>q`4>I(#]+pBc":s"9jH0Hp_3AltOU[Cro#USCNfM4+)gLe-8#BX())!&!
%p+'+d&ltOepR+KOfsRPV.<;S<+#G`iRTS0R)HeB^MFOHO*"..V&-a2)YfJ9r="H*NG8he_n4:_WZ*tc1N]p$FQ$=j1pBHlb^Q--B
%(dFC3W/XeUg:'U`g7+TZ7LTotntr8aA2=4DS`epmD1K.#VAZHZV2I9GIM7K1>87"KP!Z%RRrt\YAECEcF3$2YRV*PW+B]s7(d+#'
%"AQQg-mb"Qg^o@45P?bbE2pZ!KrhqZMaAc7k([Ng6m:$6#fL!\]%Fn?1PKWI>:uMk6m:#[d7/+I+k$Og?;hQDb&u#E1A(X/>iQXh
%44*ms(fP@]9@ZER"/NArD,A;C01cKgopFT#(h?jr3V=R^mqqZs<D2TGo=JUqhBrMqEIcG.87HtO6CoN^BU7)B2A=/dYA=imZjPKB
%INjlQ';.?`">[[#Fm:86U0gKg$Z)GYd`.P"I8!o]EOB><l+p`2"Xj!\[6f<ofOID"?2J#jBb!&#@:G:3rW^D-Zc=o=RE@=ja!s)T
%lnM4I-iJ6uO,_728J1W3K06$Z:iW(#*h2RYaC@!i]HC)uGt]Q^,jAt4(r#CX3g%JDhFkGjaC@Q6;gb(V@g[Nn8b/6l+;d+5gp->B
%+!dTO>b/rGg:V`TcO[&bf2]^;neafp'nY+HO"hcCTU3M:e!%`eZe/bK]T_iTfjfO9lp;HRZ,+FNp6a:Dj>#in<gf2QCY(AIa->R0
%krZ5lJ5RrM51jBA$/!$,Gt\U[VsiQ(d9IuHMEF@O!7/]B4I.koif7U?Wi0ErSiG*Ce?Q"[(3N:U%W.bp3VNFUH`tc>0qA;>GY6't
%gYfF%ne6*2qsF6^ru_9en0e)ds8Mkeci<pHr:N;Ro@L`7S!>Qj[TWPHnip&HC^i?Y'T2`J;W=(/.go2dh4tg,.WcP-.`;.J][Vbu
%&+WOA\3Z?V\fi`7JX"\%b[7Hm6gVj,=9Z%uFeu8\I,O+@<!B-.j1[$uhjF1o6BJ-"WO"5&3Ha'o@7;!G;WX>U(:'pB1a;O.B2IbF
%+*-sN&AQ&Xk:]ls&]1`bO'&j'0(a:5O)hJJ54S[9@OEGGHP-1N/"cRmrmNYQ#gMmmIs-`\f!V_Jm*N-=*X3?ec9#=i)P?#RrGHme
%BE[nhkYN/HBZ81dZ`R!c>psJ'Y[Be2lKZNRh18\a,p][ge?sV2'hHZFKA+)slNk^qW.O%\.@=%hAA1%P]jWFia]W4*_D+5kmC]p_
%nu?+*Zl64P7iZq+_<G!VnS>rWG)j@7Zo:p_"@FHPXja$G*?"ZhC'9SDb.5+5[Xkg4lFbOJi(%(Kl,,T/jW-n$*h(`b0Y#R1ZeuGk
%$9sc"<JSuU=@)>8G9%uOU%_gXNA[3H6]r-bQm*pn\K8b?S1FRbg*oUW<[9K>c8%04?j/J1Ba`1.c;K"&p9CtY[7c#D0X6XZJY"-E
%]>Cn1Z[.qGmUfNgp<[dOPFu/A/#l8e2'kD:>6eNKC7u.go$Pko$6..S>@K5eV7a:sAdVo9F&4fD0/8dKf&fhpcRsr;(MC>afF#Xs
%O7-NP?tO>_oiA(!1!'oIp&3shbFMet4Y!gsYbi)`[k9m<W*GJdP#QQ?(0?#>NA_NIhCG:S<``mYb;5M(F209)aN#^RTX_A"'M`30
%qh<hbQk\QKLIq,WV_Z8@8>,Udb_Ss-2M*q:X8j<u];qA6k_ND.orpFen3p%lIHN'O1CR#Yn^W8tmY7+QV]R9oJ;:\i#Uo#o`f=1*
%:*[l`A3o@&M1?Y)Z4+psVmOh.!0p<Gd(`q[hsHf-s!*kEWD-8KSX6C9h1s2RRTC>77h6WZZ!M#&Bk5T(U9^;0Mt65C]h)ID7.LSX
%@S(N;?AEWC?AaN=;Z'Y#1895h%BEmF]rq!MK?pNdf/7[Xe?FW-0A)cHru"eUQY`PE0kX*d3km]470W/LOKD.^e@"Z7mNr!2X1RD&
%PqaOT!Pmi?7V)A+$<F4m9%EM$)gqW`7sIg9XP&M4D5m"AKg5%].bM3A1,rZ'!C+B.Enjkg@d%kQWZYH846l7D/W@ckc7OVebS+$f
%\C:_KI6Znc>=9<fDHFfWl+2CF"MX<NRi#jdFD>J2GFh+f*&$smm/X!PFat;T=]r3T&T58em'Js"CS^]7>\Z[(Q;isZl>l\<E2d]6
%_pGpdN,\+1YR4FklVcX7q#@UMe&dg7@mQi<]Q[fp/-$C[U<OZC6+YD.1*I?!Jh9Nr$6WRt\G1'3`1S$n@]i)&ZurWI^DomW(NkBS
%2m.j2bGOh75UnW%7ua+1Jrjb@*8.mPAqJ$RR^n:\RC3`p_Wh$(5rsq4^EJ*S\4KX#?B.>0.eoFC<*Kg7hbYZtrII+W]#q;]n`)H>
%ouG-Qc=MU*^hhS?S?B7,Sq=AEMQe(9Y$gOqr"eoC>=Y[#aoM`5[jd$TPnmSB#YG2'Ct"8/\buj`,GdL1:+sT0<n\*u7l<2D_Y7Ku
%`G&!rH"GAUS>HpDQcU=fMZ(b0"t\4IQ70!D\kA^$A\[RdBc=fU2:4V)OEYR',^]B.d&?]7cY*C^dpAME6V=bDYL?"5hT`R8g:4f9
%rQDH7J.)=kHFR/R?;1sAe1U##oetZEG,XSO'U<FuD,:gTA7b6%g?g"3N3Y2?L%NjY4U<G#h+,dRSp02_KoGB(b40W]C6t&J"3\B2
%e*tg,aq%2],adS4KX^[2l(Ts@(P,-u%)^G?M1i(D"uSEkUKP4eh24&S$8l(o87h?S]!DT&Q8]&**lPQGU.K(um48E3_&@A=[TWL_
%`=IBV;PO<f)A)"()V)o>bd>8h_NeC/VI,+h?Aq$NFbH&So#=uG_N@er0*(_Jr)/T>?NHm_iZ/)TJ]eu/RPRfr6?0[8Z\MU<A4?,@
%OJFbHMNFZ*KBFKgD:&;A0KaqQbE_5PhA7]:*lq&1H/>Fe.>%LoF?NO7E1Br,H[1ZG_6Uk")n[ku*n`_RE/n'-.^Vgin`&nlV$r.K
%Cp3)?$JLjk[hU#QWsEf^\6HH$7=)>jLLFp`mT(7oL5T)>4C"T'CHoKqE:NtBS-+.aiV\?GefhQMM2E.O/)p:<K;)B`PsWH%Na'@1
%88akg[HjZ*VOI0sp!oSU]WQkN[5d=p?@r5-0[`u)L-nU<:Q-Nb0`0o@2.pGps*K"((j7UX0>8JDr%U5N1)=]s[XTEsQXCW]hkt+K
%nYN5*98/GdI3Jr(_'oXL,5HH($)gX\aI/"7<n(VY'+>1O%H2Sl0jIPm&VrL;oX2RSlR6a<`ie'FH$<o*Dt]2WdM\2)T9lH/V<QeR
%]$pPU>%J//_pW<RQi-UjG`+li<ln,L+=1$u&P-l#b^tG9n,YS:+N![VZ)iC[JPCY@clm9FQa")n8+Lt]O-HKkW0\6#pgkSXD)BS#
%(s4$V+Mo(cJBaNG5f$FRHFR].]7I2G<51.$[C`B97iU8;WYeUd!Y#<J;=!7X.f9<F_dGRL&O>*8cN'Mi$reE@\XMe%gG'TcI1<>'
%^quR(_I@ZnOKJ2C/iL&A[6*M*MDh;Tno>nCRoc6F@Y,@6A#Q:8CL=US9uaTU$"*a*>Lf8J7)7lWaPn]@YieSoC=I\\rX8].SmW$N
%.IqhpbFRHt!L2Tfs-TMA<l">pI9ddD&@G_A4=+A@QVUb@,fD&l:)G</mUJF_g7Gg\B"]su:l;Jb-t3/[\@rM+dSef:,@WHqUSgV8
%hEAjK.$jDB2)n$&G6$!W@,71D.WH$R6_*:2%t]1l<J<"!/iT&knl$O[mL^!=5K3OYEk$b0A@5=`$SHmM]na@7YdUFlFZ$dL8Z8JR
%nN&^7E^1+=a-jIEMSbn3<QCi[?6KL"_uCSae.UJ*PfblLP=quYnsm3T236$f+Fr<!noL4q080,+Gg<hY#s\@$!m%Y[lgj2\#a5<"
%8jr8l]*>,o2X1j^WZ/TU1ghC5<"<$JQ-RqCOXo*+neTqe[=-5FJr2[cjd/C#9"0H,'oH5I1bB$fW[*i62$BeDVsYj;P:&D%XFU+8
%#M!Gup'%Csp$DKM_^QAImI9g+LZ=G`)0@#Rqa]Y-:'2]ecU'ljQ"c-X/4!B/RYN*U=o$9UaGWJRZK$q]mG.Hg;t4JhlTggd.fDi<
%6cD2mU.r;*"E(a4EjV`b#$[iHM@-(i+<5]ALQQDLW?[P.f#Mjk5!s]m5s)5;/TO,@It)"THBP^?BrBW=CdW)Y'NEBh^:AD-8;h-^
%K-R,T6q9CgF6?,TaCRJ_b[D(lXRs]PPPK-&>h'nI+-@\@<J6i#o;QhD!c2Irp)8OD`it)@?NSfK%rD[SMgArTU]sj`,meimDGBln
%#&TZ6/o$D$@=&M97I4I(l7;(P#g?IC(m5oBc&^L<W2VtU=0[qT]2<t'e]\"jC;V@C(3LlK5ChdR?gL/9CV:@<Gkb5RPUJ53BK_lZ
%7fZ7_?.jJgI1)YjiBDrlH5K=h(FdH(m&1\8'C']u>_k^3TK:HK]aC-C"Ujho)>WKAd3EGo;W:t<aH'sTdgt'\=H>"p6^_/]Be>Nj
%69Fo-I#n^d#h6ToO:Vko^KmYUlk*6M"1cQ+LdrYq!A$n)hM:<VJo&)1LZ4=38I7fc1[5cn%ti_FCbVkO]q4XbY>OoKZ&`>kmie2H
%3$Tu[r!<)N:^1*%0kiS&M&g06@MI$I_:$>_DgP0tU./nV#'VL!o#"h9+9pI%=;X(h;U)^ml<JXtp9!_[Tm!oQf_;I2'T@*C^BD0o
%=&YfWmr_";fd5O\]+Wg`$c^Ba)>]`[+bi/-iE:I5$*7m1m"<l:9,29?es@F-j?TIQD^QN%lI_/`"5T1RPrt=6MLk24'ID<&*]a:r
%)7AcGeiH7>etN5c#j/"%A#-p\HPQtlWoc/g:aIg3Ye"<4s6dWp$[N;UX.&S_VaGlDh7Y4V^?D9OnMRsg8JOl)<ga(A21PSK5s^e1
%,A*,H$@mr&k7OL%m6oVt@N'<K!#qEN=V\@Ng7eQ2k#f_QK,P[,DS\J:X%,R^W]R"j7khlgs83-lST\7Fb2OnQNb2fI-9Bl8%MsG6
%Z+?tE:=!SaNLd8Np4uX]9Z&&NO;Ih_G.nMVcBt)"B0no]5]LJefc5-97A(;"qKiG:2,?e)<'`R$.l$&pAkHs%OV:-hC>#_?]0Wq5
%iPY?X%&M/Qd_Dl`9"(?m;5BM4#0[9N.hIsae`;rfL[[%c7<CjU3M3)[%B*K(\HNY7`@p3-90eef:1k,3la3FD_g($U4^Qs&$",WY
%-H@R]:9Y:`0MeKN*N6=Gacd@I7/gU^XXdM0flqL'@rJ4rYb:G<,Pum9B*q!;2eu:O'X_9/ZH=N+#AdN^%dMT#-o2C9`aY3&B&_Ur
%JP's#%5qSt^\c^AZ&!;KAC>@F;(^eJ*<_psNQq<6%7E,M3nBZ;RPQksiRFH'_W%eO21a>Trgr7T,WpafYI.m<iZ)C#M++=o<o3A0
%"pA!@ScX-_+sM%4Mas<UQ!`'%[-N^8,g>qT9UVsFd%$%p<':pVb-[$A*Gf%N6!0bG_1lBYQE7>*`!0W(K2&Tt_D66ef>-J28F1%p
%]38O\9K,UM)^XfA:<0fY,>f>+[M2B]2Z^R/'E3soees^V>fo]BoCZli+!ccJp,*d\DqZ+V+.^,LgB19_3GF,ooB,oSIlnu;le.)_
%dFR%N1ZCs?oak<,k9$t6^!gKs]g)mPGhrGs'9X<o:<?(dUCV^"%U%Yp?S5@Bo`>EL!bs5@6tnuZ.&GBc=d9HM65FZep8rY3dL23:
%ruP?h-4OO:ijJ`0hCo.$;FuWSYQ[H9e?>;s;,"W>TP.Q:A+s2to*f<`BJPEsjGCO+oEbDg2jZj7-m%[fapMl5hsP:+CRH:lL8#Ln
%0*aZ+W/T`,bi3h<WJ)6_mWS.M`UjGD63S%"O4X:pd,-5HFp<k$R!be!YD8F!J=NX(VcVkHGr/M=Q)dd02USERG-JFYB,.;Knqs)?
%V<+C(E`?)5R$HdtX-&!1OHCAO;"Q;=FH-qQW^RVm(R0.H4Lq^_a>76E`\pl>>h_V/AOF)rg'?F<GW'o+e-d'EDbGXgl&db@jXh19
%Lr(D=i9c-cUY5r(^1XCt:rAAaQ&^hWkH@T?Oh`+HT-T[9b;@Vc>"6k`InhhT&m'PX(W`!p#]j7a$W03)\HjE[f0Ua'>r/>B)b@n`
%FHMR28[1-q*`<kX.N\IFj`QKba7BVc`0NB$4[s0>@_"qD+La_4B'gbV+!dSSLAo`N]R]8nYPmt^L:6j:]X^&S.Fh]a\!#%f'SGq;
%,$EMiWM:(7-clU9E#8LkCKA,OXRMmPLK6Q]K6p7SGdGgZpr`PA'.3/k.:j09j@P!(Ti14Z@ithJMI:6ZKTcl)bH7VF<Q*M;GQRHo
%`?I(LMJQp"N/"/76bgSu1:">GHH'\^8%^4gpE3F9"jhcK\qfrMfm/tQOCHJ!fD!`fM!%`)2c@_b]+*)>e%kG,F(34ZD<R6i,6:$T
%6t>m^!VP62mVRE@B5Fp7Q"Pp`,d-:A3;mg/*<]m&lJ\$F[l;WF1Z_`>5+o>^=arFXO-K8@pLQ34*u_EjfDHl7,mjXWi*<s!:nUjS
%QOhgN)q;1O_ZWDhG@]OD->bg:SaF.lSA5J;o(eOZ/nY3JS=UH#"8@.UAOSF2Kk7:R1N2Hp8^r,$SZ8)j]/VBLLSPN<>]"oX3O'fB
%Nn42r;$A5cMV^HamZ\[309VBP)QO2W6=*$X53$*R#TMh97YO+^_@]XZN;Z=qn+gtlh.oW)1j>$:UDT-LCXDfC92nD;HV'GK[K?Q`
%4\d'I"]5$VR*@XuV2%eohR\AT2\N=Aq`3k*+j+hXqJjl>NW;AD0[G>T]?DM"C\h!Aflotk\iB>)C?-#i$%ie\HuKQ-'4+TB&MB<R
%H.[\p^Ea9jVLbLmWUEiq'V1Zq8tqThGNM;S('Ud.3W?uP=M#eF!gEoGU5jLWj29q:@0E;KJ3uk8L7tctr!7e-?=5Ya*JEDDEfg4b
%#)8^rg&oid?*Y"t+'6'AiC@/SKsNc.,H4L`&"sMQ:-,KkcDW9t*ZbR%O[Mu4FE3$4]*HNII?/>q.c@</[Et!gKM3!>4sJj,IeCA;
%O^bFH0s,6YNtpIB6B]t3X:s/*8I>)L!EV"*+=c#b&EPQ^AROb[U'&p2DkfJn^Gu[8K6,g&T)^t6/Bq)D(0C,LL2csa60Uud5=&R[
%s7Z2K\e@4:f*C"U$/<GD8#PY6+9r);<n=]^Ns!811_3-4(=G`Ej^YQO9`^!W+Eo3[a:9u;eK36=HlC3X@!'K3ZNd(qNeXA4:s_Ks
%O:Nf@+E6$%78PE>$XRFT?PBq=5r;sWoTRu="W#O,!."T)caKk3?fot>5N5S<TX@Q/40l9dUJMu@Ds-mhTQ6-k`<<)mV)N*19lY0?
%40;\JP9.2t]cc#IaIo"r9cDl-auXMi<c>bLJ7`MQ8@`ie2kFV\p58-Am@cp+?&iupW`h3MEeBd1D,Hra*qOcSM&gDNp.tK5H']o,
%Q1u\pi:*[jrmU@_eO&0pWmd0opE'L>&<a0S*^D6^DGs/-Rl_78@oa-m=:*R3I#C-7(!Kp\?4J#e&QD//%j`FYZ;,=-;AK">?pSce
%;(QX,@G[d,*@*Y'$@3pE"[$,h'o!pd"(mV)_MbFcPc2<aE[Si'1TCks]_`HD$i7=F=8O^<!UH`(,UP7+*LEt>Iq[.;+]p<Le/Vd,
%@t0n.&q+oYU'%Xe.AgrNe7@7cJjmg)=$'ZN;io3X&Z%pnlXqK4_:;<@,0O5MWs)<edL&07M_fkjKU*"eooau-I]K'13[ZBu@M$^B
%R>"scCQ7e6Ct\P:.$dQC*\4920O%:8:;sL?WZG/=c1Ius;iq3BO/KN=iaQV[SfN_!ZFK`ijpMmTDgQgk/#b<=rD"Ks:nQDP>bm;8
%:,TaJQL))[fh,l_%TZb_7mpfrb'f3IS*0L]CaWrBH]$E(!q<dJ69puI7B7rqdMi+#Jgo*:7mCcTo)@p"fd"g^,g,67a$DPHeR(jP
%_#_&hqjdP29%#R\ZWeqV0cU'6'VZHUGa.;j=@pnUfW<"tH\u[";G)e]-piW`,!;G2H;Mrk)F(AdX;?UTKT[,@FL7HH9hk3Gb<_3F
%EBf3`0n*nSZHs-19sd0FF1'd$;U[(Qn]O3+.,6!3W!Mmid^mgUAmLIV0I#"pRY-Daid(gfqN_@l/q<lE3C(MT8Zp^XLV1sV6)mts
%"bY+0-#t]nn8m.qU]CNj-B8oV]/']_H0+\=#`H?8gAEBb7_EW0/M(Wc,`_Ge\r053??W'6]jMBYVU&N"1!tg-0K8j@@3\GjluOs7
%6R/7pU*@?4'il9;g5P4aeRRA9A&7]!@<.&QOOSA2?=reC![kS>[(m.U!qa+mc`bES?X?tk9!&D,1kgpu)p4l#Ii;OrV@&3m?tnJF
%<77.42F?l-JnhRKBR@Ka:l^;F+j-EuMJRpf/<#GZmFiPAGPuRm[a`,tp2g=O"p62DYQDBH*S#Er)>qrBZ%O`0I.OYhdrb8AA0]SZ
%!O].rc0#$$&ZiUUmEmiJq<q,([8Qh'_W7^G=?J)^/DBHLXfl2/RcQ_#:%5>X$Mm06@1PV7$dZ,V^::dc5G+Mm#6Oe0L%iu@"ot>T
%a>fB071(gd>tdk18@"o,69!NWm`")k=K0#Lhd[7e"_D>\?^SXH.e7#Z1K*S,Mf,"A7">>REQ2QUPN-A0d)0QW[6c)M3I[(n!`h`D
%:G!Q1'Y-*mH&mOjoPNj^RSE#h9-f2^n3l/N(*VL3r(0&ZH)J:,'Q$6Y%i\RXF4==;BNo<9<mFF?[j5jS%c/eeXVRDEN\ts5\>3!*
%;Z_7u3rJf5*L8/PkX)4]4b)d!)^8.oG;SK/-2#)2Qg^LEGPMf6HNihkg+*di;YnfLL!.qQU$3rfOH$j33kQ@WE<#X>l(^,PN_]hZ
%9**FQC(YadCSZ7^C;chNL/G4OU\lNYQa7F;U3Nd\K?pcYUXo=(Gg<_#2-[+3RM(tQV]oGgVY(U*13L8+c+)DWfM&H?HjhOde7iEN
%Lou^5Et=;*]"R%/'ia8JdGj[+!,#X)WqC=KdoFnA]QiZ0*NIaB%.E$>V4+&g!K+T8*>;dK+QMO5i+g\0]!&BG^HR8.[-DOMDIZJ[
%HI>kb.)P5?,jj0O'-Q_RU4+6!OA<J7?LI6tNMRA"HB!=,1^Xu1/`.?tJS0pLR#itF4=]@mFCrm]IG3N58p9,HcFDRD[c+dEf1Sm;
%\]_!DCKN$`d;\`kNlV]n;5#+FBccBacm'1i(cddBW':5iCj?1!/XHQ-WTsFUP^<mG!FS@uMJZEIeV_.$(iuR]&lE5g@HHu0,QYD"
%KFmV!a-Gf4Z6%KR;I8SNn0rr$]CtJQVV\7JEiI4`n9%QUGo]/:6:$\RMSs$E-^/jI[FrsXNnEIX2O!6$\d`s./A>$?ZFr'4$(6!e
%4g\i5PsbCK^Odte*i<VYlg5,tM+ITfq`s6U%A6G]pfIeZPE"c6n_CK'o9g:e&e[XM%b`?9M)F'kZ7`WS@?eI!b^<O9j?:966SCnF
%'>CT@e%ng]>P#M$9u;X0M>EujNg[jl"]J[\RMq@SQ>4.)T3LRsD':Hq>$Rn?TbRiBaE%u.5WWtod_9fA)"F$B7]1f3]'p\k=_S2I
%%B18YA5?FS?`EZW(YaoF-]=!5?/I?9aZR37Agkpg&!VgojW<gP=\%m_0A\(#TdNh].il`3J>"i4dS0;uYo]6,--Ka#camL<Eq0bX
%<RK<CW#=/Ukij^R_b7Zg3go^O\KZKF]BG9L<,Z1m%CR!?T.Q)oR5pIOi/)]3bUYYG]H\1d(3VTTIL8+XP]kL'!k[po*(`AsWCfm`
%Y$OJ6lZpd3C]^>QpZ^X.0')![`Pl;>12sBJ9Ykj(dAU2OlnS\5+PArVlgYqe`26pLVtu`lZr<LL8t@HK31KNP)EBEMk:&%g)"iq^
%if4%?/+bGCRBqk^lGHu9[VFP*:t6M1&+JBsdrD?n&S:QVbHC#s6l+<[%_@%a""Q]>W)%7R1nbpXbtE,4?LMa/Ssm:3Q\0b)[6^?.
%T%3RQ^TGXp4o@`m(0QI`WDa+kHi@>6r&h$"91K6r-58A8>"U!7+2m>0+u?51n.rCKZpSsOZC]N;Ua$X!g>%h/\/-6?iHC4T-B'+I
%YjDeQkKqsPjUMa8>d@G-4s1>JJp?,"O@g`LG<TB/.ot.G9<FU@6t%\=.cX(6,(4F#Fg@G;EFbNPekMme%h!$o$Vb:=$]6hMr>IH?
%\hO2&*tdCFIZ^ZO5,W=5TCSETZ/gOk#p4`AoUYN[/>+_#KaYki16nkpcb\:!"C]T)'p7AqR4#4^+gTjW(cfGT@EP/I)1D\#llJ1`
%*BB,R):*7qn=6PNkoS>g(`,"ge-o>5U&)gK_@s+&q"iX#g1oN9G1#teha1'_e9[UmcI<&Zc$\W>mQj765cPs_G)*(W);=sN'/tc2
%@aCm0l=H[e<HoA(Is^uu"VK8hYqSjtOOpXiY$pqDWdY+>6kJ!Q[P.bd%/#_Td],tX3I4EbPS#gT8WBR`RPfCp?e7gq#<>RCXc_5#
%[;:5UHE>aVLr\)C!`JW30A%j&Zl<SUB;6F'%NkZ>Lhq,/`_7BA]`biub%+,9?q3rGbBoe+E^Q\i[`/r[]]qW3>0\nk$9He-!#d&Z
%*lT,plufkN$[1^!ip$))=b5H%"!!gWp*2i@EQ>4PJn*g)b]"=$>p.@a<!s<<(NO)naJ25>;;K9%Wg=pu?Vb?c3dT$^@%^<a2AW*M
%XhF2P(:l>hnQdb$OG_Is1TBE8nSP&t)]S1s&h].KH%i9alIDr,XRr+@s*N'?,kXnF081a!H#f-.X('Qg'l\G15HM;qWHg`)k_Kb!
%%IZ0s*:1h6n7j?s+mMAl3^1o@[$8b7^)a-e"YENBi#?Ne"03-'+>!ZIOVYH_f;?1aOK"UF?OjeS@tB+\=YpTEq_E+:qFE[Xca!ES
%H*XlIB;m![!(ECu9*A_KFT\;2L>?\-O!4+ip7H&f!-1Ut*idA;UqO76qm%&88Z(h<\TBt9"e!dRX2%LMWc!`Qd+(-tIaUgl.b^mc
%Hd#U:R=h#@R]oZf*aM]c)XBLCddW\)*`cT;RgR4N>]O4E!j.3f`n+hX<$T?eb],AlV^[8Np2tUok\BQl[WNsE<,L,rN\cnH&p^Ld
%pKeoBC#V<KV$JXnBilfQUO=65Ph><2b9I@GH`!=jlkumil+PWSaA8_h+`K[O/s$f$FfT[iKEmeb1Y#sTg3QfTWK+j)HS/+ph:HL/
%SaAGO+'YhC.cb*m]nG#tgCfJKJNM>4B&8jSAuB/$HiiO6$25#Di[#3X,Ij#7JqEG9BF!J;q-gj`75e43.`):$ejMFledI3TdStqK
%CT#9bFQn?$<'"hX38'g?/Ja;hI4#&N02`WdKi#;@L+PG>IPXt_Ahj)+1VlT[AmHQc/1KI&^gWj!VMM:J'4#;:>F3fUdG^VBKM\iT
%:0gSSVAlRlk53'U*b`miKS8YG$"^R[;j6)33h+WXLeNn`G&*J"L@e=u@@E@qkibW,89m<HatE"/O12)@A/a*.pF+$6\@RqLk/gAL
%c^ks=BeE\1Cc+%9MYK?HmD71O-#bk3P;>06XC^#[ag"rf@,DBc#+)BM_o5f9O53CHFR1>b9"M@[_nd.lX1*mm:K\s(LUR_*?S2,7
%[oU,Y%3'n]o"0c]?R%!id4@N4UUZ]&U%^<Y`ratrjiuu1]9u#@h=P*p2#T(`UL_3R*.72^9oWR30lB,,3&E5?7BGDX5Dmei3IPja
%cnr+H:dc3`R_cZEk%C9'IgE/-IY"c.Y?RC23e+fpE<Jap+;=UmH\Ui.N2EJM]_;%bim?#7a+,)$@uhhWI>)C="q+.h>Seg+B%r6C
%^!0m(M@@H<nZ2>@5)SK8So29BV\fep6IEm$j@#_>GiiqmMA9^$mWKb8&F[^`SK,A6"1A3/Wh^j<>Z8M+Hr"dg`jSp*TuS0Pf5?'K
%!7eWGH-TJC6W9Nc)+M6<\.dZRn*q,#Wt_EB)bOH"cQ#p#jEA[m$<f/d!NTC$pj<$hK`e(LIX"GpHae\haRh^QP[tr1Ypa:<6Z.9>
%<p0IRo@b@pN=n[0IOlnVLI5BRRmb@fN$`(g#qh^9r5([HK>*rd:(QN.jo>3t4lUGGfb`+49d)aMSlbhW-s3`X!5L&j!R:*%;tL8U
%(J?W6`aTZMO._M,Zat^>p1m?J[!pJgoMeW5!55OQ11L]%A+d9W?RL:YbD"<?QG[)VcoR"^[(].@;-OOYbG'g"gVmXq+kT;&%7^IO
%bib]NXT8RO12I=sV/3=]<`>]g&K/,bX*@@Z*))!G31F$erA&l2VYjSk?q"[#bdk)>Ho]h5"RP0!`9^jl@5b=>KjtR=*uqAP^iKF[
%2Z1tSd0?_7-IIQo5cpff:d[UB"t%"*(VR'RK3-$dPp_dP^s^!gK2Ki":D'(CfC+2:#l+FCLPqK@r;7+[749&53X65`@a63SlT/'&
%?[&;(qD;\M*i=NHIFb7oSn;+/,D2[.*a03HZ!'d7fkSWcX>r[ZHH@1]BgnC1)^:"nodY)SHM"We6SfmO*);C<p]Q/MFgU4!C)rjf
%)Q"V4%:u*^d8Fo0!r6/L:7EtrfVJl7;:,M6bXjMs(FYoYHs9>FMC`(S>"Ipr@8IU2"=csb"&Q12Dt*1iq[g55jF*4^l"ef,R,g,>
%JJ[F2\`W#3b4E^t],dq.>cu]1rWhVheL6uL+NIJNCeBSEo]f/jH(_0WRKE&M"s6t:ouoMg)b;i>Z,I@k5pSIMd;(s?8f$YPk,\Fn
%%30r&,H!&]8mp;bmgKS/XdFp/'\+,5D=%V"S_1[LYfY^=&$q"@PJ3rhe@&0/0)]1Ms"q;nFd?4B1pKq'm)S;>@i&iLM9.1;Wl=G7
%_t$##K/%L@n4Fu5c'2YZ)erH:C,#ZghKbNGaV1P)M4j\1G\L)WCtr%DDSadN8)-(mRU!#tXWVS&2)G+'i3'6h.-a<ViT4Sg)kQoI
%dl5ua=Sa63q>,=]c/*k0PogfK^oL>qhiB?&CH5aY0e7(oO)pV%6HN;kHIUeL:[/@tlcM*EkM&RE>'22ma.C!ZB:G&<HT=koR1:$/
%JXL&S_4&'D*[j`$[MuP\=e5Me^D]EYg2P\O3n=3ZHRmJr9$te(0#tO5m4]lJY$1R^c.>/IKFE=thA[pfb-kD-KeUM[_dSWCmbPo!
%gPkQU.Wr\D3ob'<R"RO;$nMB=%5l-rJWgmOE!abqrP3d*\T)Xp28cJiiEW&T8G.NRaA!mY/$ggsDW&2S]8$>YoF5"hVn/E'l!eY<
%O9;S:frQ*jS%h<m's_]j[J\$9ipn'Np-Z\]*`52G<1nj,B[li\&an\kdm[nKH0nf/U!!)hc9h)\pMuDuV+PH';hIc.0gs;t&u8Hf
%\#8R'92oO%0\X5,LTYW@l4C=dS^=HF42c4l=*s?1RF66hhl+S..Q?XN<h*JI:eSqsq0J$g9S9OLFqY/+/QD7HDCT3N`OrP$jCtSH
%<h=Nd&^5mac>1.sca?nc8]eoU2V7/mD5t6l[5'l,"VA$'3#i%K_SmCrSBMlBMU""q.4X[$_J<oLSlRgg361>eLD9cB?N040/ZJLK
%S(TMFeO"E`#37W`Vs7P;&$jFmKHmlN1#"D$<&![nS+dND(RM'qNJfHdHDIDibNd)&hHpcLGIR!'d_%%q/2sUr.%i&d9&d!!:q7st
%>`Z/6]]/^7L9%KiIf^Q5i&KS`8fLHV1$_;c_+V5^mH\1*-:B=U``[B&H]r:%ffN-X?fUHPfcZH5-*@)$FedG5Nak*1q%>a6_p]<U
%1ts9i>X49`9[l'g+t.+efSB[XDu*quBj>N._BKs'ad5ZB.r0;;j)#6FOu^t?9CmMVO'D'ZB-I^V+"<3:.2$[Qhp3k90\))7N0P5@
%K3uq[&Ms,C$<2S^iRZuF]\k3THAar'NFQ/`7NuEt6/!lmS=o$dW1>._Dpj+.!')Zie#P7NYXQ25:sd1.*X_Yb[V6@YDef=j-.ems
%,s?Rs.p1i2$mj/E?!NJ4942+]ml\6MTWhSqpB>5nM"JuK(F-f^hr-I1a=>P;>(9qG]c=\S;@V5h=UcRl9Vp+>!\i'F#CtYC9iZ-?
%\@TH\j@,>C&nYs6AeU_r*a'>IO,K^d05E(Y'KH:Er78"90's)jbnr4UHM&2(Z`\`LA]`h>8A7FhP(rfSa[O!par7;O+>Eh;O7H4;
%X`+*sZ\tBarr(^<Z88*71a35Y&IK)(QTM:5_i7`!r;r*N@<&]i&=CGrig4`\Zt',#]r[!1?@Z'%rJdVB<`@QKKU^35^[;-8;o%Yo
%pKbPcMR>VLZ:-()jr!?96@3]pNAmgjC<%l^Gd*htC%DNo%I[FC8;e[/>prh*@kCFP66OOAp/k0DqbS.@!"u5_K7"F]Vg=TjUdJMf
%Y[m2EmYBC71IceTDU.@u4[B1nYojT9<g'=$+"?'"h<ZE:EF20!ojBEmW5!R#ZPPpPWNmQF1([CQC@d3*p&bUM3QU\uW-HtLZT]%N
%\FoG17L"Q:4I@9&?`G3X(;sJPFMG'.90+HEYb@WS.aGBC3U<QL).uPUkD]@TRP6iedm2+-:S?5WHRPC5>53V(8aWTIThUUJlH-CJ
%[\f+"U65.4<NOS8[4N&o8rk&.PGYc0!oi*ilh0!>YXb8Da+FU27u_Y;lJ\1DHDLn474t:H;Y24!MRqC9*a4^[-pcAR"I!?#!_k-%
%lXQ$$`iG49NJ_MXHO$F<6HPIu$u8cP:UMK'r;EiSZTcs5H#uV0p8Mgrn+Dlj5O0@OnI!#-gkG8-^@Q_G8VD_)df9)kBJG.q5)Lif
%4s6:IO$EcL#m8Ktn1,B&Fs=/"V*2N4:;hk^gHoGWH9RFulaf<fpk:$/[3&E#nVQRlW^'j]c`$E:<\.Z&\h[mZK;<%M\m"%:6,XhM
%Ad0W\KJ8$OZFt&n_)H.`c0(t,WI;97)[?p.m(3F7<\IMimoga:FbYEepVcaP$@FD$E</jGl]_"`oVl^7;-[@e,<A\86l!J8S4\Bf
%KU"&$"q7'pDAsC-@G<P_X_<X!qEDlaLr?QYdPigdQL\9SmnOC,7"Q1q#gB,^Nuein6Q.#7c^3*cT2TnSa)RK0?X03*jQI3"TfGZg
%=:q[Xe^M7D?M;J08]^Sja"[p+#=h%XU-Z@M^cB2&Pk4a#equpQJr$+&cqQ,+4g]>SQ_RP\<'R2uCHnKuQI8t+.9@>SK?.qU2a*ee
%3kT*-)sUiYIA!boZqW<;N\rXSBNWV?b$F`&i0GuI^8J$P0MZt]U<D&!FL>Z!BL7,Cc"GI92XRjC],W;nk_Sn3pC7X"R;%'RN$('e
%qHuijbWOOn_QP%s\:%)D$"7nDEJ--2ndf.]"^=<fQI@Fe('iILg"1Z^P*8'3o:BB!\>)_si!$b56b6)Y]/$Q=mD\#*>M#MP9;fka
%Xr?Op];G9goMTF7/402lFr1"om5.72o*/?`fe$c/-C(U1B%2YAEJ\K0gkfP!UR=`IVCh?FWjN+gIOI8g_,a5]jmEXEMVYp/jYCRh
%qs]f_Cj3=Ao6&K+C=\`ONE0Y^1q$'qr]\,(_)L0Zks(3D3rPG\M0*&-=UOT$8BRUPY#Jge:RISV&QYXq<*#t&-RC'Z,u*sn7rSon
%WTlFBB<\Xk^9;j7cMA9$lALE.&f(>nG<qFimqu`3:"QR>1kW6=:=rX#s."^a?V;Lh`k?jb2qLmL&<iN,$#q4n]C!;V>MtYZ3%-00
%`hJ1%D`Can7R?k?4=@rI%Soae.953@nL0s?8l+CGT,9DT41[6Y;:!()5#bfkdhD1h&ma<"r`aXiCV`,mi*F!GCL&O(d-`VBI/$P<
%@WC(PcbZ9i?q`tEpLS&+gC5YoW18WPMN5-f-'g\n$h@$:l(rQ"PNgQM(nU*JOH.cS+YAfHT2IW(eH6;/@P:+I!P>?D'M"eH:-_jT
%QEuoH1lhJ,;M[J9#n%a&-Nm[G!Jbr#*Nm@pl2trl4@4trGq[2[++4@ofCQH]AYG,EdLAkK^!h7(25f`N7jn(O0[.G_^.h%P,n<q'
%Dga#7eF`^H+@-15crZQ;_q+U$?_@-CkM5<#ABf<B-lUUXU?A<KP<^N^`pfildH(NAc$r/u#tAZUa=a-`JBcc5H3ZAd[c*VYV;uNX
%B3K%0b_rLR1aK?l2d_cQ",eXtU>o`r@!%YY=RIX/nC>>:.;6(-DR&fI5S5D!MR9Tm'rDt:LtW&QoAq*POMfBrV)MM'U#Don7ZEV0
%<Af;7f7O$C&>7039iQpe*2m"QA$[D?b,KGkD296sBZ<=I@8@A;>`/>Cb/ISk"X0/=VmTr@!EX$rjl"7C?qKMFPQ7spN)#HaER"dt
%P^_[LV8\V7Dd85i[giCaa2fg`C'h43LGUT_L\ALopK7VYF>YT5PuZu_BP^DhS?WTb`:9G57bI%EjRbCOgY[GE>??kK5CHp0n6TB2
%f-/q=g`m.7_Zr(E%kC#`.]]5BWqPi%99%#/JX\r;!jp;E;ECJF@9NTD&U68o5dN4H/[+Jfhr)DLaD%RJkm!\ED.#orX;mhhGGGiW
%P#&t*3[3ASAJ@K8<D#M/1Tsc/q6hNF0!R]<cg)uh^lE:&Jr[pi[3f'W_.n7$lMCc-^\K%r'70u>%fbth)YR\.G@9o44^"0fMSnj%
%MX=^qC>0u.#@I3[M8kb9d;_l6(;4Qu[b*p'28G>Fh)Rk9<<ckcO_j1V+B+8`G?m*..f\,hAP@usGiIL%pt[2NWkFqN^+7i92<j]-
%bh4m_AMX%LK?Ar)+]Bhf-nQH6Ka=A/%eRGgAQcnqFGe"6nD,p4PYbeii+i\"pq<).[/jQ]YG!&C5gE-0p[3<0hQQi!6M!u0i8iXK
%rAhom`D%;;2W%MMLk))Wk#H]0i:ND*ec9j?O.bcL9b>a#m]D&])R$">e,.<j^#Z'D:M>FH#OTli-Q.lB]/6d)f"6oJV.%(idIZ;A
%.<:rI)m[XN4L82-6t@1;Gn'AI""#n`.UANaVK,h89V62N0pU67"*EYMAIjFV%.)%SR&la]W%p1172@I4U/>nj8W1(P:NS!\5tK<G
%9\6"1g0QQ(n$SkT[!s,q5\nO>,0o.:%,jREGNES?,NO[c0bd@*k>^@OP'$-t3'O,_AK-uX^Sd^HO:Y4?Tr3LD>)\5?l$Vd9mQJde
%"Bt%^5$mtC.T?<sn&(%,c`r(2_,/8(^kVnahS],Hh^:2J5auTI22\B\#l1/Tp<OFO01RgeiI4mE8jUVX5Z3:1pub0p_A,J^9&gDc
%N65+'XP4MB0fV]*-<HWtVS1.kr(XJU=4eI+#Uu2<&VS00BZ=5mN^GK24bAF?]Ca]*1/F#M<"YRp,;9`Y\>%O4S-?H:K<iJPX(e(@
%(DjdOn"q/!XGNBg,4+2<M@!59g7gn?mT3@sOI=kN)4#Z-<$8t\WaO9*6]\R\lDOj3P%r^3=i3[dMRHq.R9-a&Q4(-m*sD`mEj1?q
%(YgVk5qLZ7#h!GTK)QqQXUM)60fj2h>)Wtom-fI&PbH\UQV3Ho]$?1hEXJ>51U=U'<ROcPZ-.UUgu8Rj*7^L'[Ld%uGJ&,&JEIW6
%a'&Z.:FWSLSqT7J$/JqslO#bEgq@j=X'eLfjFp'2Sjb-=!XZC4(pfSJ^0I!P`_AFHcK75]I9Cj]W%t@]Rd>>`WeT`XAk5GD.5*0U
%=V]Ca[u?8N!T"c8h@.S3Q/)$2$t;88CLlZM^J@\pfj5P[jm9l*]cqN9W?<`eD5!Gp34<BrrGCW7&NGRVqj]W+PU9CF"QumYO'9.*
%"c@Q*-3g)dVul[dETC99X^ILm\V-o8<2Hri?;6j\C&Bi"/:&7f[&r:E>6DD[+%p>PF'<8<\](boWC';u,3:]"kQcgB\<m1LmHEHr
%UW8dD<il=VG^qZV2<efpXen;\%HV&j+?tJ%UKUSNr0ehS.Ckn1q-jJJm[j/C+0jHg9sLmIs7:&kkFhkGn#ucer6PDc?iT.N2&CB;
%=EWC,>2P-QVUPQ*a6nHb93bLdT!iscKbLX8]/&l[S/d^3)>eL'.%=[?"21[@c*>5AnViI`=LMXq6q\WnVCc^X(DFf<f1#Zn\:dDD
%DY3YZiZD[ZQbOTsT02R2CN(NSE4ZFtA,L]W0:Oh7#A>lUG!G!]nJkNYY/nMG][)Z;3T]ViTO%Y.?(\sfM1Z0'LqN!YR4XgNd9r9h
%.@@T#L^>#P&OXq2r;DJuceomtr/RE'(bo,YSE.tm@C5f_p%_f:3#XY`CgEDJs"Oc]q.f=%^]4)$^SMZeH:7@7$e>AUm)\"8faung
%iEtT#AMpu++sA)OedJiag%GbjFneV(N7PRZ5<VWkFbq>9;(Q$KU"^).R3W((pN+\*W$rd2HA!jjA`IVlcU!);6LW/.Bs[%pF5"f\
%7p?.6S/3l)8iCng,,1<_bg@.`K)%*">6F8CTB-gWKe):\]]s[IaC8&#("!-G.MS/?fl3fnaWbCs9SVfsU\q(ZU@=k2[;J<"5=;G@
%3%Z[,o,":dDh0>MD:9PpRiUc8XruG.1g?Z:&98fF&0`.d\#\`>.ICmc74fri_2Lo,d$No_4'h"Q!=.7L1S2YZL6"CK/(c.;;66']
%.4r$U;Aq,"b/4B&1+DmL&1PYqE/R*GhsR8J.GJ&$%;FW!IB3TO+t-CQ*mZ_Z8W2"peKu=_3dqto=869FV5R\QhDRN&a-DsP6DAob
%S5l0s7:hH-SdLrT/0^9nL!n;q-D&9,.k:eql!mSKRMl_>BoQ*1F-=MD+0<>kBK$pd'g[Ca-4\S]2174EK[=,6B`6,n6^p4#O)e(4
%C*m4ud4%2iq(lZFYS@:d2I/P3#g:inDi\1g9R$&?Rl(;=6)lT<3%sr`q8UHoVRRZ=4!>L1XcJcIrOe_2Pu3I*`7=Q8C=MAWkqelg
%dcZUq>Lm?TGe6S:F4[+"qE8C*H2@2\c-30?Wjdl:77%&N!X1m/!+A@rA_[S!M$fj<7\3+2N5sIj.B)W"?[PV(OF#>*rZ_(p4]I!(
%a;!d5!supq'"^4CnHh1l=]8f4YrB?Qd=(MScUjuJ%sJ?d2`c$tLt1hMnfiVB)a$<<MA)#kGR$d)W:r%?+9!0F3b&dse4\%<MF_Fn
%"6b4-`5WqE>!]:Db#gTiNY*h5?2MX@$OZdmWH!1C$DCs&D65R+\"][$.S5?kgKigm-?c#s"%Wo8h78V_4)[cdB_;S*'poK`N*7Pq
%c5nV>1(7,>"Eo;\]hBt0KR`BU]9J>G\i<26Q'r:Ke>ajo8c9or.4'Z^!I>UX(AkmUIu\]_-qiBsjrNrZ`3%PWUYm_k'ebIk;7.)S
%OZ1ZJgG.A)CJ(7EKr$L-O.%>IjkOpF$Wr%1ctH%6PPVNpp>t2'dcc<EDcqV'VoPqWS7h'/@NqhI@VD=fiOMiKiNX9R_hYQDO6_69
%o4"+'d$h;''<M*,4-i>:>3`_W3-,e9d-U3FN>)gbYG:=^?!;#t((CIY26u-O`Jf7jrB\:.GBOZ4<9o6G14K0gLhD/oA+,egAo'3N
%D&VC$,AaT2ReP#l3op%loWR`uB]5eZ&+sRAAVC`Pf.4cA0:U%h10ANmZ],U8H`6qMO^Ff$fnV9Ipu9"AJ!L\^hKLUl%tc9LoQedV
%Xr]'V]L%_E/[de+=e_&cLsLhi;"iC&[\uqF[CNeQ`c6OejD3s\P=@UMPYsNN-%p9L8hLfgG&2I-2;1cPh!Y,3ZQMYe-ioHk'CeTX
%>KQIf_]O;;#tmYm>M8RO&Ef)=;qS/7o!$a-"NO9M#asK+C)j7*QGZX9(GBgffgR_rDa"pU'@gB+TM_%cH5C<=H]',s5#3Q==()R'
%WS01*\#?r1gF`2UP\e$kkCfPVa,h[b0TCEQnt,n<UjLSqQogOG0:1aWq8_6&.t>KD-a>Bf`dV\_OrXIG;3(/23T7k.*[g006InT<
%af@JB5K_f^V)Di>JekH>O1b2YR:%cSO9$3`GS8__U!t2&8Hsok0NSU,[m`(p2A6)\>g6)jgq7Ote)PW4&t#EC')9F"0-$NLF>D^?
%7GAJ9T^)`n;T8UX1s%%sioLQdYGiS<>n16blA_Ia__QuKar3G918Z38)JYC$c`Mu4KJhH4Kpa;UD'DH6f7%]a>U`gg1#EqLluKVi
%5qQ@oSZ:%XXGr1QL)a+Z7Mp.Y`$oL!(l'&k>uVjC0035I%T?+'>IL<=`Z,:UN8HV-!WtroEHD'[6T$4`hSZ:-;D1?;8IKTR\u;=`
%bY*D!pqWG%fno#2iSKp+n7ucnJfER5Qln5t@5/p^(q<opE_Q.B8iTMrOr#XO.$B!%PFaC>,/[kFg2iR47eg35?Pfrr=O2PpS@Em'
%*j[rBjH6Y8J1='k[.`%H%)"^iS33Q.PbK7,h!NmaP(^"fTs&suiVSH(7$5i:$O\K`(V=0h<0niB!X(QU'_UHmophod"<1q6J'#E<
%E^HIbYob[-FMHP&4,6fRg4M"Gm,9FtR-bJC'd@muHH[^aSeOjsUp'L8j+tQgH%rG5?;)%$EMs7U4!]$\[NUUNfA]?(+Lm_GUa>mu
%D7ZUjKOA)5nN:;=Z@A_Urb8]'RqS/9QIa*<B=-WtW]b[)^bf&gjd.\r>O5e@P/Ji=BZ'@JjQFmNWYa3`'VI9n]>nl`W>DAUg:4D0
%2cH`>-KiOTdDBGkn;;PPrg)hCC''&NS=OjbcK]91XEK8F0?.no)NXY>T&D,PKp4&b8i\?=Za&nbZ8p0MBY[(@r30D/]%j_33)SC$
%=sJuO9AQb+EJs1UUfE+oC[Tk4mBFYSmnF-8`Lrg;L:Ke,dVDeH=.H/^,;$D^B4GE>HE9(8D^MDQl+gNYFCPiEM;:EbZ._,a+hWh+
%\[5l#[)U+KMWtrm-]oZ^(=R*!_Z^r92=k3?KU6Mhn47nf+4CXReSuT^_Wnd3N1,p^G<DC4+9bX%\s62mpHW*p9*FW.eGXF>UEIcF
%3[q`53#OI&i%H441Y4cCMZ?0a1:hpjhj%c,=%01t!g^QoP2N-PR<@"m:YUrAr/.-53K7jh(Dq8V)k@uJS-Unc`'acgqj\gpCd@m:
%/t5&hBoV(u&VJqlgmddW*:tLVLd>udqJ!UT4'3$7X>1FVC%ZgV.JB.uHO)/Ps'PqtE*h,id#2B_OJc/k1,a=TTk,kdK]O,9&G['3
%pbdEOF9L!i[XWa%VgK0p@H_(loNTf+hDu)j&e""Ma;+o^kgn8e*SO(XVn7YmU0"90X59l1T_-R_`WQAmL>uS8pIZ=F<8@u]EtA";
%H)Kp3rpn*GBp?JYj,6/aCfJpO<dts6o5s9\_H9TC+O\4X9+4Wo8rI@hL,t?CIIq16Fk@H:inhQu_\l6dLE!F5'r>h=DEkk%7QoIA
%fc`Um:mT88SRPJ-7$M7i"2#=dQIOEEItCQ9_T)5c&WYau7j?7S8!VUk/Pc\AN?m?]6TAOS'SlD.($figpt4W4F"K@^:NK#]`m1Ct
%-7KM%.pE<M[Lm.SS5^OamlS$:cLn7H>II(J)L`hX=DFF@GnH`8+'aCi=l(a&T=jMoZm1nWqiPG!,.J*rgC^95_d]\nFnB^g_-?'O
%4+$oE,SFD38(VkRW^i*d+GW!DO2F3b2]BASl)^#X;_\_]I!q+\!nTmO?:#R>fS#nbX3H(,MCB2/:cc52N$;0J,Z?D^O@j6Kn8S`b
%cFWS4*!fUj]_=9sSC.aN2H687n4F'KUsL,aEp`qu9J'Q?Kh5g3j'R[C0u7WhRmjOmB4(Mj0T@Q&;OM;!b8XtMi.uW'50ArJ@Hcp;
%S<k=NNbYhSE^Hmk6:s]Q2Pl5V2;6Dj_TqK:(iEi1Q#ngX>.S<@+pRp93tP:,Q#_3gE)).&A>SRURNd=8?nhHOh=;1Sf2<cLl!sFB
%(s/FYUtMg=E7ut1NGMI;c.T/e;]WE[OcPAh4oZs&Q"6lL]mt=>K.ODJ1,Z?=<W:C&_R63hE^r<7$GOP[CFr&91MOq6LWaI]GIK;,
%o7R(a3n,BGeX'b"#]dAE@9%mFV]rSbm.Bj.j[qppm'?KWH_K*5R"5r]F$h6>fnt<kpnWU?<tD?,iMfD^<c08o]4XR/JpLE`M0#)B
%'i+SW\bM,slU[FX9@lJ;2fD8J@#&B;l$7-Iq9?E18lXmfXU'Zfo@[/-D>/lNJ$F<XcM50g>^GQ,%c^ut\>p,`jYZ*5am#<(d`mWG
%V]4pPYMmaD\bu/h8?/?hTTj0f%d3.o,EJOp]K@0VPNt5G_'(A57dcc,Ubu>bUP4'>r("N>f3PISG(83],MK;KUn@PsPuK1bAL='?
%=nXtq-!1r3B.,fn+e(4tHdSAL[OXB-E]+*Db6AmN56%!*%8.6d=Rqf*pg$#[d_ZU/S'*iTbNV!ao-?5gb%#q^Dr-]Ma]=YTO6jHb
%DJURPDqh)BUjLfcZi<t0XL?A1?h,pM?:!%#Y-jN7:^"d?*Uo\P?M&J';ZKYo&(*_-0htGXOKIZnF+\rn@GcTa_p]K*Edjj^Y&VWK
%:lY]pZ]R*o5CJT4c`+5)?XirkY$?<5$D9ggQGiXZEELnrphSCe,'\@tUs1>p$]2;^oAN1I7N;kta;:_%XR=:RUHog!ZjGWJ^"BiB
%*HeFMWmqLDM=Em+&B`&%hJKL57a>PX_GGF(PZP:.)'&lP`!t>R,MK&lTBtC=]+DdPJsW=g!PDCeWp'c;BmB4:(nShE`KtYO4rHiW
%1au>qTtfa=I/SS[?MEm#a[T0#RjDq1CBR(1SK!Z*"aCGUIS!@-'C@Q1`D8KnfHW8u0m+c1<-bqKo4i894]?]mSXZ[<&-!\"PjO>@
%U7T<7,;>[Vc.j/cBg6cl+J>!*TibC!Z<*Rd_2RATF@I>0l2@`FHoeO'@8%r3JAk)%FpYUtjJt:fkt%).o`u'3Xs/IQ$Y"V2_0d"C
%?'351V%X@!PIiif:DY]pWnG&J^GS#*9Cre-/"aiJcO[K+-'7D68pl^Mbb8?H#.bFYJH/3mod.UR*$.qfYLKO,$8E]W3K-]RCpuW&
%/J>iq_*=JCE$re9&`C^[!h#.6hD7PU<'dJY7?Q+^ctIpNBJ=5oV(rD/`#lbG81i=SQ9N;NQ)m-tR5qS#a1*^81NFae=j&i7Q#uGQ
%%/&kUou"9Hj9V[ui4aX5YQ@.V02,EuHQGJLZp?S_M\bDfmQ"9DJLOMoZ-]!XBcI!](6tjc:kJ2_?c.It.13[7B:;*-4]K<3+&[H:
%Vf-JEG`;esW8KXL;XP*->BpF[%KB'EI4At-2"h!Rq.Ql!qK2NQ`II\XKRj">LO$Rrh1cCZ9VL0smB6(-))PV_I4Q*9@4X\e-I5Z)
%?ZgtRk6TrQ+q)/@5.;`#&F2?SL7@$h\]^cY%m*.L;[Pgof=LE1;[TQAjc)D1e^@"*a(9X7lVer56.0f#9Tac%@Z%b^6,U]47MaQl
%QAYl`J)A5eA*Ab$;JG^!J96QB\7?o2^(&8@i]:)jk%Q0+Q%!\o'rj`->tPTpMpc7ph>AT3`L`,DC+m0P"bdZi8sN>q/ZC$=TU;To
%g>6G`C1msk83cQB`^S%Z2"1YXlQe+2a&;TYbGh7!&(K'*q?U)uFSDe_8)8=L2'/WCnI-.#-:/=<K0ut.<OjSGj$V405hC+P\tSue
%<`7"F.7qZ6X=k-]dWlLfqN[4,@4JdNQOXS-N]S8c643ln<DD2t7pZ2LQ*rE4.&+2BSr5h=8(+b(ipMr;;X6TJo>ndj0`nC!=*d,Q
%n45kPeIG$@ImYq&eL)l?3C\4o&shLuRQcQf&<JM,Je:nH.[hg5k#CLEZPaF69?>O(:i^E,:SUjX=:<qM/n88[/NjMV@oo=6<7kS_
%=D>g1;%o>R"*olK)]A"ek_:hnW._RAK&e?qkm+aTaY$)MNb)r$<%L[I#us;,)P!;NW\?CdFd\%*\?p!;g'AKanEJ.HhX:4W1\5ij
%R9RRs<X6]+a2H$P#B[>.NQMsW=#"9o<d7[$+CXu<9]H,T'%s=AdJUk9DnTc?D=*(pfgO=.Lo'Kgf]THD6B?D&m-31tQ&b4]l&(B3
%\T6;<+LI/2E5I-(h`Cu^NqMO(&QZ;5N1[_PX2ZgXDhAMncr58eNh%KP\'QP)LGq^g+D)b1a-L*.L\6B]IR]3+O1\_c1b6+VXg.E>
%<N5OAJk@ZR#uX#i4ba'9Z70FCMe1d<F+r"[f`<s3*:RRh`RcWYS8o]@;J/'`j,DE+2'YMW$F]!FA45k@_t>9<2V2so(#EKAZK"H[
%>NUa`Y*)$'PCgX#`Bui(9]VIO6bIB2H?FMF=5._"1G:N`:DX>F=!"\f(?:W.U\[j"ot<j6i]4mcTe]su3d4\)NF^gQe?`"]R<DNi
%E$F`>S/_]&,8E$0VmGeF+>S]%1l`ROG/#hncbZZa/QZL>IsqhKnq'WNk%QW(FEhZ+'/989%grm_-[Sq)fWC./Z21SN-8P&4GRh^4
%nfh1_e/QR#@KPLXjPcsWBVpiO75Ye5WmGAlo(_cJnX,=;$Gp(I(VLHSC0HDd90eOcNf1J^^jkX-+V@`T=F0kU)qW6P/:N^&2Eehe
%GT8Eg3'B[tr:s,A..YHE77[M+jcQrMS@<_!:r0QLP?ph92rJ9j'G?H?AVh'bD%1LYjGMl5f^m=\XWJm`4\dI;Vb)8f:Rf4@=KhAN
%\iP=:^?gluN!_V1\-objK3=\*Au\=R3:KSiJTM7]a&4=_N"2*]E%W^eRC.Q8&V]&'`].E^eDmk9m$o?MK>'=P?5@e%CO-LFOfoIl
%]?f@B:XSERlB'a`Z@dJ#\DU="T#UaiZ^H%<jfC!ZJrR_5m$HNV1W%<@]rpU0.Qp4[*>h^QO*,:t#u;dKj5<$CM+5jGpK(na/q;/b
%*Q;;*@3Ku$307_kSrr`A(\Xrm=*AOJHe*/,']/j"&FtiM31Y^8Cl43P=&OR[:-j&p^]&(t._=Q]D;`L:o<e1)UrW_j7G2"Y$bi1)
%crS;9d0+)?o8JBWE*GGVI%F$%P#ebDDL%6;301?K2(^W&nQ=6)m,9Vo3F"X%3u>q&Z`lXt_iihLU:!hL<^%m*+A3,9-Skl5^ZUPg
%#gQ_!18pi?0m%(R/XgX1%:47"3Xl92%gS^ud8sds*oO1`l&T&i,TCp-*'c=NE&.uCVA\I."^qG$;%9tI44QV@NblP'YQX!(U(%mH
%aKtGNI(o`R+H\]t;oI_-'3aaHX&VOo\sLn%r^A::!7N\R:4Zq?#3(mCZ5j,'_A?]UU,p9L\!'+,>q21YDT%^">%ORMriXtp+h=Z@
%)SV^frDqU8LVLn7[;mSSj,k/i2SeSI7/orWRCZM^;\P[,3=ieD0+HT+T(=HOSMLi3+-Fn+j^+i@mXFmo:a&'K*0:n3pEuq(EYXF6
%<H\MAD'D:I`o`lk\:PJ:3*(CVku&I@0NS5mF\bZ'.T3C\>#E0#UC$f55i562e!j/14#jVdVp[OY0"\jkFb=\oWFB.)\fV1/INKf5
%?Tg&g_%__FT<`g40TNTd+)<d4qhXV%ffkM..sfM>(l;s;)F.3>r&=1C@mX-a@,$u2I7S#%`<bA0p%+75)pB63WBS.Wa=@,3:I?&I
%A:%mU^7L?]e6^PT50a``h=BE;0'a3V;3FoUn!hOt&nI6ndOdD@/]LIWR3'2p/Ym(&3d%7GPeXejn1RUF?a^PG`,OcL&Usjte+no:
%NQ.-)n5l*$l)+dgP9UWWemO$uW=WiHU`g75*iXQqisi+m9WLLR0i?&am1+a5pT)A$.4*[0g_\(_(mLnG[Nc:-iGPiL7@Ok%)a9Z#
%B+L'MH8.T8>s?\)12g=scq"\F7nJLe(ao1r4<?d<KIiN8F)n73LT+ZKRU>V"a#t_Zb6Th#>\>G;UN5mJ9kc\bHSp>f*_Z4jkkgc.
%qJkjbRa1H00DBLo7`sb2AC_5XbaGYBXFpa\oXT+`?qRJ>h^:@AKW(m%qg92si-RN9DP'WoNW"uTbFuslZZe]K+mU;7#(FKbB(46K
%3o+t&Lu0:B5+g%S$EPWA>Wa,GpVTU-A@3FZAQ=,DD6ajI&+7KA@2>"\h,;/CWNIL!-C1,64$U1F,98?QZ-uB,;iEh[:,.X%2.Om\
%'c_rC#tb'/`A-'%=N`3$+>S5tqKAJ@!]e<Lj]6XoPs(Zma&EV$a0/pi1-RR-Ra;eP^;@9HoSHdr6$4I><tc.g]m)(YP7b+s`k.:*
%m`;b@+u]V.=d+XecEEUB"ctaL35-S8[I[f"c\S2f7`YU0RDib<fW3es+'.jN+5`,9*d-$!6u(9E'1n.2^!<nMW!p\#fuQ%=p_4A?
%l22WH4F4sP,2pCZ7>H$I7A'aZ<gh.6^?#eXYE;p^(VH3&&B6"R)7>6gp4haegd\Fs;OiYlB"@D#k+,"?SS_r!H.c?US5W]8N<Xt#
%;r=9Hp@"J3SNj1tNI09)BenIKOidEDXKk?@fT$-B8m5BcU&A3j4ei7Zq,k7-:/EE01Ymj3#2j+I)V3A<d,ehi%&lp-\&ig9(E$27
%`nJaG_eMb#X=2)k8NbYl%T<*Hm=)5m\5OG\1VG!4T1*,57*9]iMkcI]Ib/GZCIT6)&E0I;K0cLWD*p!6!$=VG'MXFB%PfSfK,-Bu
%($Q3>@0$h#C^=^15*d)k'Cd[fYlhY*PX.1NiXL23k<Id%jIE#ITo<0[0n5_V?r7al<9=%ojs?p'kK[r1K,Y\R'pDr[Rln))M6S;R
%//RtulRI]>f+_B#p&9cCh^<rFeQHcN>KAR`\?;@t`1W(Hr9MrGQEHYVkB-T&p[Esi!U5+h*@AgH"Q\L<i,1$mDYH;24".W]JLF3A
%d6*Lfn_-@RBOe!B(34!4"0#>nV'950%I&bOGMMtdfkMeuA2VGj\'k@RT5cl*('@ZOHVVA&g%bG\#]hWcUJ*B2bK"4B6njS@K8g\1
%;Y?-5aW2X6G,?7;Ar/QZ5'nTe8FTF!gOR5g22>(&+-bg(Gn'K4=7;+lS2LEuHVoJ!OaDg+D3iBM5tMqh=C9$B>.Z0!V^Y9n2Q9[Z
%A'&aK=`&f#Dp=CmmO;%F_DRW'_1YA2NP\s<jcl/e/ii&($o&@Y&0S;-_/d5f1<CE("&7<]G9hIZ.S\8;.nGL?21IA@C)op6/dO2.
%fYUlh]N>!ZQS8]qNt`K>7`8,N&7D)uHjLL8YTHb>U0;PNR-busM,^OsqrWflOiqGR*=*u&SZK;T7`K>oDVini.@iB1E^_Ne3PD9[
%9:6^(V9QVhR]#VV#1>uaCpH(FS97b:V^H?b&+YB.'%Dsb@>+!ir(5#0;b2q#D/eO:mi^5saD$q%6["8gJ8bFX&hD*;F2Y/$PU5Ic
%ePNo8Y@/0`9eLF&T1["phJ`gn>/R5=6M/tgHM%TcgA,o`^(s;(I('4/?6_&LqU3+56gEm9$*Q#o=osZp;ru?/J"$R4:)gb'kHc:X
%dI$k)(Wk72\EaZLVk`&XP/&"4/Lg9FW'DPF0'eWJYL<W,FJ)CgQm1H$#%L1aX`gfQY;=./1b<m">./Birl`8Z/T3q70Dlh/Z79$D
%Acd=V&;"Jg&si%]^Kf5NrFkJFnmc7D?+NLh,)&L=!,8i[%6@D0!K=jclNK4l3PCjLBBVA;eIcjh#=b3QA84$;\QT?_mNt.UC9fnX
%`V'd4k-^1sL'"l'9+kM;+X7O;QA<6:=DWb!Srh4@aWU2T4?Ur(hipTE,s<t^@.G+:'QWTf_Rp)JIL5Y3<^jAY"uSfLonqX#nj:@&
%)6t^%ikFR&=?7EHP+/itHC:1WX&0ej.F*Wk$;S\/#L=O5QUXZj@\DA#\hHpZlY1AI%ZnbS_"C=?*(2JghN'#u46EFg4EPsD4_"ba
%V%GfQ?,/'q-]\nP-0bhdE/4Jf%dUQ?F5I9iQKVd3MT]U:<89!'4_u&`\N]m[[fM^4*Vd"#f)R)WM]@%<OXT49CSXdi32;$oEa/:n
%A=\pg:UL0X9?\u\mtq]UCu)[n_Lbh/I/Y%'gQM4XbJGtPZ?VpEkpTorl&]f_[FF<<qb+Fl*Z#k]K6n.Up>cLLh&)(Q8J><=huHtt
%hNPHJ?APP9BMG'Jl@I`aSNX?%1'g&iJ?2)s1eI/8eBc6:hut+AcrLPOY>S>Gr>%Mu!$o];H3mJO"k-)GLi0D'_jHFU<m`-8ed=[k
%e>.BV+"XlE3E]H.R;d[-dk>0kHj'ci[TXZj$N!!59*om+h5c:oQppaZ6HZ2sA@=geF(40DRpt'S=XP_2rl1j&2LneaiA)+V@d/2b
%HfN@gMEJR!#Y_[K_p`t#hPDEd@hjP,'q8ubEj^>H&HHGI0qe.eQ,XG+7C/'V:5KmII6[=ag1tC;76%4kge>&Eq"$ojHiBK,Z=4FE
%fSD!.P)"i-jJk"9SOdkDjSDHLSOVNsV::>uCd[clTqMQTLnFRSTb^6h,o]hkO[hs\s5d8)Me'20#b2o$jVs];BP/;^&B_.CW*X_]
%UYPR-5%JQEU@6%aNLeAq=lgJ"El[f'S]AnspmUsK[G?3/-8--$F[*-@m)Ys!Y\g@m8UUk6;QYa(fG@ado1hsN<94Z9*4K<CN#rHB
%,[]?eLa"1/n0bDH_pYLu-\o93BmZ.$eH^L^K^9%HM$D0-iV2gb7o0U%0A\>H5:>lf>!\Glmb2P=k>Jo4XNa`,Kp@53>fu?ZMUW/0
%;8B.G''NKCI\riE-nKdDWU9;]=Kh&XQ&nT-7:j)ui')TeXE>':-.#*JZp/3NRYqBQl*mL_>\V6TUf<N^cSD33oL3Kro`X<5An.]A
%YXh:b;tS&+9);o0L+V2&[5b)6KD<,!5(?KpQQin^J3%2)If.M3<#n47CWOsX@Hu6";.tHNOnZb>In(KYEs,R@SrZ'@C.'Dfq@OD[
%;L"tJ<(i/AqSe?U(UIQ1A(C@ceCQiI$t%M+VX!%$]k?hXc!Qh-$DSW=dZ)_X7tb+8Z!M$=DXp'fnk(.rET\2RHrU!5\l)2QKlQ8n
%iQe3(j($X3]%#=P5,nuI&a`Q@BX(>434>iKfi%FPM-Y;';6*W,%1FG/USXEmN"H%$.)oRpQ3YIU]e>sngDTP^m1)f#?bG`SQ5=<Z
%J+`>YZOj!_O&`HI1(#IWiN:Dc(r7Q5iVpPW?(P<MfDW[j9=VW`7CsT;?0NDr/i*dCBfISuYV"+F@5^G;;dY6;h3?TTXG*`"llgER
%)s?[NX6nK9r;+Zf%1'(RBAI,\+]TfT$$d?U8a+YsX9K"$UPC,;c"`*eH9^$HdfSu.q%P[kJ8ou%4bpS-'WAcrnm@SS^Be@";<m1^
%_4s$E7*-`)T8"up^2a,"jc,QI`OiH`6pN@g4s#EXdWEH><G*)i7>.kl=g"E65AZc3_HoCUG*4Vp\5cE6%F0UM-?/Y6Fq9KbB;qQl
%k.Q&MM(l&]h;@6O?2OXmCG^@0n3OX6p5M;#%nK@lhJl?.&8I:)QTcbKOd`0PB\/u>_;E_Rj`hhP70neUl<%(0ePfFHdVao"mDbhn
%(]1m[J%J3B")/.p/J<.irjj2C!9/3`?g2m/deloFm4\5%Id9i;<#O`KUDCCnb71WOWbX%tF5?a>)B=8&"`gW@*=S%5Q:6^cniKnL
%I'r_JM\b3NmCsV6G(S47lb.)*j7Okc;j!+I21mcAWP3d9on:Q%]9([+D"PXC6ukgbLVM.n:?g2\%a?:427p#$Nc\dL+9#^PpTRl4
%FB$[tFN6j`MSqn$?]8C<P*_\FeD!"L1OE-_/:Q7d4FH(&TX1Q4H%kc`9`sp4(aJ?rW@:OReV[F()p@N\\i%BW'uSDK;drK'V`"`W
%C?hB8EEkS,k6q)(c>NJT1O>5sfU:n)9A<i[B]N]W0C%J7IXGrdagpBjFF,s^&"h*Ceu*lWqs^m(KTW/#X`ar^W>0d`!:e(hN8S96
%-q1<;o_Je"9+d6f20Pagms`$4/u^25]q.`j^.UYu`lAdM1%a)<a-7Lh0N>>Ho;G^^>q.=rj"L=kVk$\/Wq5\/)HEunopdRgT:;F.
%8WcHLaY@EXBr*'3(s^KZmWdYM4m7YSSGe+43pfJXp.<p\[OKY-fF4/D#QcV%U2u0-S\VL[7)HKKbVSpB:A[oQ=cf-#'F$?rT7L/?
%nFUp@/>9*phU?k@1S+6;a"cGl_pcA%(^\(ccUH1NFM5`X7jM+;^0&5>;i`Pb6btU1Dm%0d;n6`_fuT<g]Z`"UR+"o:!MG^(gU<P=
%Us*sW"fXD+CD:jL+kBNnGeeVc72RiNK)f?"+K^Ea+8_CsKXV[FVoM>Hc$)Y:EGX/N]b8X7VgPEtQhNcO\$Eg,]_^D]$2biX'A`>.
%3pIqL?B>r%NNLJA[Z]?rp&(PIK?^HVVt2]\Tr3^djt]@Ho;Xu<(:M&:O>pZH4K#t>-Cs"k&(NAbFpO;01!)j0-KB0(ILmS/GMp%S
%-=[(KGpc*Wrq/_A4.+N,ne\+-O$?]ULiPsJVB(c0bGpCl^u?:`Z\k8rY_d^bT_HfC_GfS!/$fhE"5_)2.,66ZNTS3L2)o]"CSoT"
%]S?-,K4cZaAhM:b2;O11?=3<UA(nG-DE?M?VqDJ.s2^WWAVFp/+(B?J3mpHM,Frk`9#YF^Q04McM!@k_o!&A?TG#4q&D!\H?l9#c
%9QPAF*o;.jYjnu5HsQ%'*lm^!AnIDm/!Ga]b'SCmg>aQ$$USl5:h1tr/c*cg\P3Ye!CO:QA&9PJk^hi\A.l<*Q=':qB&qpp.Vhf`
%OTSR_X=c@Sis/(*Rl.?J:&hfBl%JfqG\s@YX=eUgU/u8lQ-'>mhtO'%5ZA0S?jEpGO+`!!bDKb#1'0O>1D`#[e"I=,muY=Q5bs<&
%V7TI>ND:3uZh0*3&%tJ>l1o,)D05/'mZ^sm`m]%S%n8`N.^Pa&\0;"^rN%5s)Q:_NMos<[b&]Np*Pt:t-`[`SaF7rRGY2T+nS>X_
%NDHC`?,r2*>::)+(I]#\X(Ah/Ks#;29*F;N_(,d81;VIudD[8XaH8sBD*=ApLBbN9q/VS`&cmo:UO_;)+*Cgne3Q$G=ZUY&OU]`!
%]qZaTQ(C3,`X4I-"^?`j>X-*S<^8*+@pKfN^jjMSCWi[%Zn6]#c4DDD^.1KTAO6racRr[AdY:k<q\I0@.5JG_<`#c!:oo#.ct(&I
%&Y)^F/o6*VFnb^4m!KNMkO<Ngp/3oVY=_r9'.^._e=E*<\nlSe)taV;=D+-KHKeX[\!n!_`i3A!7.'&t/`Kmu-Bfm%W48#/6m7N]
%>7+h]nM7&'4lC=\W-hc(:i)$L!cQr[;/i'9/Mc)/1;CL1MQ#IH7RrQf-UtB:aXW?"Z7OrVVfu6oa0-XB>/?AlXt+'hrm7UU&fD6<
%:ONQaG'M!.l3FnOF5Qj+1X\FD?E<?2NeD]kA8>])K?6)jf%m;">o#<dMp_JLHRud.i"dV=gfo"80cc)q/44%&PFTm_Y10H7J7FUT
%a>%d&HT"iG%VO/"E)K2&a2tNu[nI.7^O1=tA=`%d+[DBV0(CCbg;RQC"=AWOMKO9eN_,VpG4'j-:"@RHE./"$XrhnM*=9$&Q`hk8
%IGsk:N)(r,@Tb3e9U<28#]fO>[/92D3s'\t(oja(@!1^EbfQm3pLCj89cd\N^ROp*=AXMQdW]n9m-Mc->iNr'2W1\X.S#!nWV(J@
%fZWKm'mTWp.\>+e\hP8TQ,9?"IdlSW!a5]ZZIacnGi,=+J,1X!F@F'l0cH1*L[U%ofCZ%SN'L\5lUaL`9N.3erE(DCYOgfI!>;/6
%f'Uj]"sSp^pl$@iVg#eVaQA5J8?UfFY7JF_q[qPA08#CP47;=WC,X=7R,7?0N#!%P+74sZQ3$SHc#kh&3Jd!L'0BUZZf"kMFO1^]
%mC4-IV\,l<^LCsPrPs!p>C'9iYJ\?jS]E'lCOL^p*&MIAT!E*\cNUK?C%9Om]c*`O$qr7O=9,DAF^PSO9^m?4q.t('DX<enj1SR@
%:?t]LK\imBM(.g%m89'N]J@pL2Mu:T8P!L]VgAf'\7H3Lo%N*jTEl:RgaB8;(:<P-NIi_n)_GDB\,sGRZq0'(f6uKt209"=@%j:7
%,VpW!2DXchMYkl#G*?e.nceSaj??`J(5,CYbKs)pB2!%o$GI>22AA3`rp)P@c!(An^8&3_qG^iJFeu$Srr+<T$;55S4`dI!J%X(3
%B@b7O0+MV\9iY3F9>sAsHke`NeBN,W+M>*$H$Wd]GTK?mV%hjm(,6B.8gNK+jf;hC?Al$eTDnYF>o#!8JD_-BYuAkOlLq=`1ol#R
%&Y6WLfRs*n7RNN&6:$%lea:$C3AN18,H*D=8B1O)ZL-4<RNE5e^Xgrugj$N*+QQN2/)g;YPZ^Jnk-rAbSX.<cR\*F\V(mShJPKO'
%-YS7B_HZ`9$p8tJ/^X$eG/l#U.uhV4d8Wr(l`ONC?)jcU)Gt]-4,dc_E&9_]oR2M0T9[0N^KpUH(a>tu]9t5@s->"20QU7l;e4^f
%;1ADcT>Ks=l,mu07#usgo3hdmG&0o.Bi"KMf6.7@Q(>LG_!Vs]WT4qClXr:Kj=rU$55(T#+g-q96U@;DJui'BhE;3ja*epPpel'j
%`67rDB!&<%qEi-&T</Z\V6t1>e7nm(EC7Srggjd4D:eNbjIN4Qe0N>gL$d9>Hl7<O1S@\rX:(d]5s'2*UFO^cWM.q88oU.T.reF?
%75-,VA+L>@L]#=;X'dn>Mt>sCQoTKF50I7/$MtSkhnclc]sIR,!OS$Y_T4u=P^SNrH"<A+)HrZu%J7\TY?nmI<"m9J?#kdWLP\mi
%#OR.k[lKU)CSVNXn6G-2Iqgk>V$]1\mtgmZFID>_&U_.,UY%]C]*=:1>^uD$W>RQG`lAQ>Wd[?tX&Uff]5<5jA2ng9n"WcWD!p+N
%n(TmZh-7F9&b14<;TCaZI9rZGA^B1_g69JbRK]R)CNjAJr.+*C2&#$[7UP3MZ='=';+KGcm8KYURV/3j''hc(NPdl".LBk:O)MsJ
%`Md*N;<s2$(<Apq^*r2V,[MQ0eI'#17%IocDR[(-\GU'snS1I6FXS;2r5-ldPTmmE&7MRPEQ#17iTNZII/+Y4],fcL2jr:tH5:s3
%5bPR)'m%[s5AhO<;$/8UH,+$#"%RD]3AbRLcBoA+CD0^)0W%8A?`WAle4sDTL(t`+aoW@EC)PuFok*c)X0I9:9!r'f%mE.T=BVq@
%0D?h>[DiY`&[G.*#TKj@O5fCfjACV9fUYb_.`Z)eBmM3`/GiZo*.#jCa7rt"3-8F&lYSc)Sn#u#M,F,;f:397V`gL2#aKsu`5@R0
%hTEcfeP@E=I((H$N;OES&$'J2)pCCT[m5<uPGJ]>i;OVAM>BN\o.it"P@`9oE5V+FQP/B:WhlsG9-V5Wjj?#mBZCST,Od_EXNXG)
%OcOKEIgd!Nku+pJ`\0OSV"`G1e)Hp-d4jCmASgS[fe6Pg:62-8Z$KYa=rpPUk)"Q#lqa8`;A^ts7.@A0)4E^d"dC,E1?O/YC_lQm
%G_39/3UMTC)UW(f^6ip]-rA1'/Kc2Sd2/XWZ*)i[L$_dC#<>mn*%gR/*dkQp3k_O.@/F;k6-X=Zs#tkRaP3o1IZ3?Rg8rbsIKs0-
%+3+@N(Bd.^n@3kjFlOA,[KBLi0L0S.MYWJN3Nr3WTR[Pg\LW8$p+plddf(X+$5Og)S"ILGW(if?)X_fRXHT]U-l!.2fZfS)\lWsc
%kK)5pY_lgGbU`V$_;ChWbl$Kq7FcGH61qa0`42RX^s0`Sb1jO7Cb:&DF-(nJ@QqX@R@6>F_7`R*I"XNi+4iBAc-n8HV\gL;buFaC
%V`OYJ/NuB(&TnP/>eGn8%o/2MH=>NelOZ7/8iou?Wi('U("2?R-pD$Pb3.I&OecM*Sd0mG[n=Wdna-F$HYs`TF[RkR-$&1<6$EoH
%C2<6eG&R8ha*@RB7539<Y@$(@gN^WoIr&.J)n.FMF(GsLn`UJVE6b"<[Q2f#hWl/\3uGeIKd)aZ7SaYBVB>\JLE"!qrGj_PqRQ"u
%s0m=P&)SRiJaot<ZU@SPK":IJB]`;s6qoS:e%?&eo00&'-#j^N36,8^Itks*kDMcIGkoX.Den['Q+P#N^J9=s>9A2aOgWMVg5>"p
%s3(:&pY7i8:jG[5N&;S9@6OR4Mn^i,9%b``4X1,"0T5>&IFt!"6%3W1VRjI\kf%_F4sp!<U`mdT.PfQA7karIFf>E_e1],"KPK07
%=>dfFolZ<;$V`7?M;.gq4A>$>\4%63CGVA."+SS]AU^TBW2fM^U;Lq)[)=\3#lba!7OVl*6)("]jeOKI/=[fg51C"2jGO(pCKX4;
%LidQogIQS^LjV>@%-gN[p7SJ45pem;e,,*F@ih$10p*!++NmDXAH'OT?@/-+U$5hgcS:+88#+A@XOD5e'an\N5)1kaK1uoJTZ)iY
%F0Bj:?]AUna?E#M0eXC>Te.EJGM&P<.%DtSg>*X7FpA+WC`KM/Q->(S`fOfURG_3%QjMIuMT9:#q:K)TT\:/38%05k^[`H;Xn:D#
%ete`VOo"b0Mm+/_$(]la%_4]==m'%_HHjXf%`9=qMDU='Lcg'D_K(*QCi+1GW_6cNeG)2&VIPkrLc(Wt_?]#]B_WEVF`4[Sb)bW:
%pC8FUEIaI'KZp4,P1;)!4GlmsYO-,dcUlOaE+ZHXSfo-Nhu>XGdf9%,hpt$kf.V0N*GgDmRB?sS[,uC!"pG"C*2RSIG;VhOCiBU1
%dhqUp.;aAI5muro1\,KZ`0pK2;QfKOFK#k?'CmB8%BE-%j1k$PrPeg&K.Z!do\]<8s8&S_[9Yuge!Cpds.3s!W,8_O)BGN<*p%MJ
%#7N&$mV?J[QJp(<;()#%HM@lM.[ZJM6J;ts#n<@,<S1B<_@S_'\!pBdKmO=?F#-`d)0c9#]<YhEfVg3ne?'qG_9s)[4f'E6NI6A9
%Z1pAX\\SXB$gk)YC@D:g>s<TYk_1gH('gL5Bk='#Tk*i*FjY0n=?60?<D')[W`mR'ae0#/L%dc3jAjm`r4cg6c&*La&V]t2H&(&Y
%m)=[]bc7hGV(JjdE5>l5fA;p(4NI^M)+fdT[s*<LIbS%$9NQ@[AjoajN/2PNa-QYobq`PiBcMl^2>gmQ[2?k%(I[e;f-s1D9K)+?
%knU[&p)-P]AJnMn&;h=%pTf`+J.V,j6'9tSLNB6pUR8PU^"-/Io9,:\:1TMmT,Df:Q2eSOLIB>q%A4Ol;RfhnJ,FV)M\?NkB%nGu
%]Gh2G@g`b!%n85Og1S%Ee??iu]9sXqFo0.]js2+gEC?u'iLs3k#,"o^rY2/j2&W)e(HF`%Y'"qd2AHSJHUtG]1HfU8,`5*r-;-pp
%A%hU<[SAksE@Bi]d8#-iSOr\;Zh_"!M3M*+R,n;F=?`@QdG9qk+KISEeqKqF-V&AA11XNcC$gqNeD]Z5:iAr$1*)e:1e$ZbOnkB_
%K[Z-K`%*uR*PHPtFAKm^(e[@oNj*Wdp4_VLFR'jkBfL.5Y'*<1\^kl`UmLM@/B(tY<JCI0Q#&ImKjJVu@IrPZN=AZYlKEC3*=D-i
%c''l^*\BOc=mVQR.T"/Dh35/R0V(b#Mc_ajP?C<HH$<&]+*e&VZ3iXED61?)T+V6(\oP*LF]V<Vpbn"<N>_!'@^I6:2_A*+!rI(N
%ogrp$O.RFm*o3+?<&:!'E+Q1N:m\=YXbA6Q\h>GS>53,t+<EiRH<oU?jiaB]UM_T1)4qg?H1I$Q=KZJD>mLq^nLqcfqfqQ>MB%Gl
%LMMrd["nXH66&e)g8gQK]I`D#MeZ^=1"D)k15]J]fQ2+fYAD-*7Sf%4aKUKuMb$YR@aduHfSCu9iOEV`2,0'p'IS8T9WC^#QT6it
%_>L5t^3ts^!NjqTY-pMrNhGe%YY`BG'KPBR:9_8A,Yg")@JCOM'7`iUjP^EL:_N&V;c#S)RMVk$&;R>C+"s^jn]X&O0UEda$@#Bc
%@/eMqqrYJ2kJiQh]dZ,_CDX6Q3u;,jolB#:4j6+qgoq19emsjZ3u#*fJ;2cHFk<Y8;SE%5*1fV1bYjl-l;\gKgo_!3rjC![g.j3?
%0Q9Bf?s!aq+Vm3rP,7GH3/f,hIR5$)-V89KRetpr\6;)]P8R@9P"f)OqY,l:p9[o4GA'ap/_2UZ#8HcQ=k16o)[soTM[lpL>>73@
%?i1AVo6-_-k>JVjW9O[Ed4-g4XB\+%ZmA#,dIUG.2.oP-Jch.00:17tY(pMce&R[9cZZ"1/<[Jk[r($)UZ:!DBK)Fu]lZnW3EAAo
%iS<=pEh)!\UJ719JLY3PC25'G"Mo\0[H;FdD^hDZ2\rr4Sn.R&8If>sB$D2`I:B@MOk,>Pen5rAm9-$'ga,!rFk4N/-'m;DCp@mT
%1F?UX)Tjcs?YBoG'TdULG`!!.n^Bi;[aQ:EQp.6O$d_&Wp#q\F8HJ"jG:?&MAi.-Li6BN>[E9l(O$HN][<>iF>*@ar;(/\Z48\[o
%V%sAIE[S-\]PXft<AJ%lp!+0Hpl%d+'1'F]l-0N_-8A`QQEq`m[bNg)lW)iORY%$Y0t5UU,aB\<Aro='ZVB&K=tA+N-#'@THj*`T
%PqTa"9hnhH8fCTj54r5lGQ61tY@iA'0c@p[lZ&=MMm<X#:,Ah":6+C5%iBqTp<KU-b)IV(AnaZ"K4S7&Mg6[_bsQjIYdZW*<;HgN
%$/eb*eLLI[(q9j*ST^6Z%+>e?K_V*m_83iN'^^DX.TZu4UAFiJ;2c>d5$36@po0X(Q+j$oRhfHRegmLR"te^Y'S`1$N9SR?FF(!a
%l%iu!_DQ,nM5U&D6kn74">1s%G]h<*)#f<A&B)gmi!hWQ.6lepMQ:/Z10=2]P+f]nA?r*L.pr6cBN@>Y,?HG=8$E&m_=P%Xlmb_Y
%o>)S)V;.f*Qf8032uJRKJ5:D+r-'I9[W79@`4b"Z-]I]<p3:4)VTQ8bk^,u>=@cp]b";sH;)UTsIBO($&@ob8MO.Z;`$Y%imfYdd
%SG_sC)laYVXY$$iJ*1%#)l[E@g$Z"0-QHLDAOGF1:(Am'<0OJ+3D'=&P>r)eC!oqXLn4eCT8HCkp+0*<qo/C4GC+,D-:1!^r-tn%
%)W>:OJsa.\636pk+gK5a\"/j1?8n$pM=!,a`?9OaZ8b?2=75eX`]No[%hUgl=(<Lf(9EM':42Ya&C$*bab,F7a[NRE_eM4fCR'Jt
%b0BIl^%PND,hV1^>9lX3bTl#iQ%$hHj\)Eu)2h:QS]L;'Md(.0AR"Kb.nu/O[#XX(h+bgU9./j5Ehhk(fc9q+S8TJ7;*E)B/ub-h
%:[u'/,i;)6a,!EB"6NZ(L=VoV;&Na$MDD%CHcUAMhlGAR)q']eOjj;NZNbk5$Sm+sDqQD><V)EY"\*7KF$aCr.='u]"@d<QJ*T1.
%1D[*"Ng/+U_mj=D2r/)b"ZPF4@?],#.^!DqTjmVPE2j"K'M3;EatO7ufsm:M!)E8FpIA\342!/fD?9oB/A9)"4$lsr5NWtmP.3dP
%"UJPJ*MN3.3XPX3N2gJs"@BKk]>hfF^$"M%]N08k&WAk67,`$"I'3_aFDSSqamU",OH'MkWBXTre&YeZ:8W\H;%X*J'3pB-&A2SZ
%ho3+eYis2V[K,N7h%6/V*rqV]_Z9%E:/d]mkaA3QcjNs/Gcu^odt@qYk1+="78MR*@GU<Y&r6.brJ68:"dr4^\6ZGt+_:s-0VsVj
%&Pc/p9k%[5)8r0"YVOXH=#IAj<h='-@ndkBQ5l$aaItA(,AIt[:mnMooL8i9)Jak2U`3&`4#F$t;4?,(A"1Hrm8g:<A9P%*0m!4]
%a3(8YZJ@fXDJ"a'^rfQf=!GD`1:gr'*sGb9mn0-O$'p^L46LqW?l>FP[h:5:S7NhqYqe(Q@Z'MSRHogc+g<^oDpk6A=;dl+=T^.K
%\`N/t"dMgKF'f;)91VhHSq+rrS"&9B*`2[X(f5LP9YHue607qH!L9o,G<gf'(`,im(K?^uU6S"[<3G[!W6CT7<,E:F)2iKL1oO[.
%(/VOWY$km?M)uYYQ;F=hWspU9RCd3h""[5j7?=:\EXfF-j^p'J4I#nKNWRDP:g9Kp8+2+Y3#Yi#:Go54ENWq_A_l0?g5_H'kb,+h
%ATSW'dgiHq6@erYLQsSTI@XkZ/4stBW,,(cHQhL>YX$?YT+QN/Ul8/S]8;au*k,qp.I3BJB^J?Y<RO0A+D&8`?/?SNA!FW:8'3S:
%fQ*XD_8N)N-oXd"A^_[T)c1.M;-.$.b*&,(<H/"MFqI<rG+^rtR4_`lM/C1\5p0a`QngH,.:^kC/<Fo?22RPDLahH'L6OEMKIDuR
%'PG50O>>.=(9JfmC%k1>4HT+J`O%u(6H[N4@AH02>j+]M$'k**8>nYI;EkL;UPLAmo+%$_E&H&6#*ic\V:;1o`f8UsTe_pJ+O$N7
%(8IBPW/PVqW$!!XT'COU$Rqk:X.n[0Pf[s%mj4Z>lL-&tQ;[4^bWDUoX5cK?=<ckn[SN]Xjg#oY4/>QN]el6@;T?5La1+LZfdW=[
%H)aUM>jk4oZ<@\d-dP%%jf(Ca'Mq9`=#Hlr-qjQkIR!pF8IV3pPGKl_k6dU#bsfb/@<*4f-DLi_h;/Sf6UE:8k(LjXg/*g=:ib5/
%,^4kpEZ,ia/mC:@g"&-IEe#]P=[h<NOKh@LVB]VcdU&4DOg/"J(_BhgcW/Z9K#l_A<T4=I,n[1FZ@L$e)+"%POf/&bM<b6gC\[0)
%.#^8W`ASW(Y3humA>pVCF>Yamm5ol]EGd)&)aq\X-Xj9D`hse#f6b(pAA.2modGW$&OSfoWV%n0d35e:L4(S*/2cYUc")Be9rur<
%P"ZWBhk:K&h\eBMJbf:fKNnUr#[((ecD;(m/q-,tQGP_r&gFZ>fBojZ7*[)PLb'XXj3RR0DJ*dR!Kj4i/R[*OEk4k0A>pN+H`KGC
%N5kMR&@odq&6Z$PB4k384^.`!6=dgWRkl$.1ON2sFGS.KQ./Na/6Qn2rAKJUrKT35Loc^WEEtlkqFq!Q=`8*;#`*9ucKBW]OYKUd
%bsKK,.+&V4\aIrYEd_@=jE/a:a<if>m*H;aqj8VhWU:_R*.a2_\L=X`#T9CNYS/0]#i#tHY%@9eJWL8+1k]*GQQtPuV#hf5>?Y<7
%Kodf)$A=p8?i]8H'H96%NJcSCa&3.DAUM;R8[G:c[g%nM[3W&Ln/*^W&r7$Y0hQ%#i:2j^f\l:,+5WQL^\R9WhuEE>m[)fq]R0[j
%5ApMrq=?h#H$Xi5qU85!_tuY_I=1k6f;F+JHMRF,mc1dSf9aOUc_%t"J,908TA.+%5CS%VpAN1dQcF%EqXRuE>a-&;J,f,4rp]FF
%It<[OWr~>
%AI9_PrivateDataEnd
